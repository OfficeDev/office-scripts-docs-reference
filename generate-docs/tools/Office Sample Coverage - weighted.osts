{"version":"0.2.0","body":"async function main(\n  workbook: ExcelScript.Workbook,\n  officeJsCsv?: string,\n  officeScriptsCsv?: string) {\n  // Setup the workbook.\n  let worksheet = workbook.getWorksheet(\"Coverage\");\n  if (!worksheet) {\n    worksheet = workbook.addWorksheet(\"Coverage\");\n  }\n\n  worksheet.activate();\n\n  // Clear out the old table.\n  let table = worksheet.getTable(\"CoverageTable\");\n  if (table) {\n    table.delete();\n  }\n\n  // Get the data as comma-separated value strings.\n  if (!officeJsCsv) {\n    officeJsCsv = await fetchCsvText(\"https://raw.githubusercontent.com/OfficeDev/office-js-docs-reference/master/generate-docs/tools/API%20Coverage%20Report.csv\");\n  }\n\n  if (!officeScriptsCsv) {\n    officeScriptsCsv = await fetchCsvText(\"https://raw.githubusercontent.com/OfficeDev/office-scripts-docs-reference/master/generate-docs/tools/API%20Coverage%20Report.csv\");\n  }\n\n  let totalCsv = officeJsCsv + officeScriptsCsv;\n\n  // Trim the trailing new line.\n  totalCsv = totalCsv.trim();\n\n  // Convert the CSV string to 2D string arrays.\n  let apiData = convertCsvToArray(totalCsv);\n\n  // Add the information to the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n  let range = sheet.getRangeByIndexes(0, 0, apiData.length, apiData[0].length);\n  range.setValues(apiData);\n  console.log(`Removing duplicate header row. Should be 1. Is: ${range.removeDuplicates([0, 1], false).getRemoved()}`);\n\n  // Format information in a table.\n  table = sheet.addTable(range, true);\n  table.setName(\"CoverageTable\");\n  table.setShowTotals(true);\n  range.getFormat().autofitColumns();\n\n  // Filter out the fields we're not tracking (Enum fields).\n  let typeColumn = table.getColumnByName(\"Type\");\n  let typeSet = columnToSet(typeColumn);\n  typeColumn.getFilter().applyValuesFilter(typeSet.filter((value) => {\n    return value !== \"EnumField\";\n  }));\n\n  // Find the percentage of entries with \"TRUE\" in the Has Example? column.\n  let exampleColumn = table.getColumnByName(\"Has Example?\");\n  let totalCount = exampleColumn.getTotalRowRange().getValue() as number;\n  exampleColumn.getFilter().applyValuesFilter([\"TRUE\"]);\n  let exampleCount = exampleColumn.getTotalRowRange().getValue() as number;\n  let examplePercentage = Math.round(exampleCount / totalCount * 10000) / 100;\n  console.log(`${exampleCount}/${totalCount} APIs have examples (${examplePercentage}%).`);\n  exampleColumn.getFilter().clear();\n\n  // Get the weighted coverage.\n  let weightColumn = table.addColumn(-1, null, \"WeightedCoveragePercentage\");\n  let classColumn = table.getColumnByName(\"Class\");\n  let wholeTableValues = table.getRange().getValues();\n  let nameStartIndex = 1;\n  let exampleColumnIndex = exampleColumn.getIndex();\n  let typeColumnIndex = typeColumn.getIndex();\n  let fieldColumnIndex = table.getColumnByName(\"Field\").getIndex();\n  let weightColumnIndex = weightColumn.getIndex();\n\n  // Look at all the fields in the class.\n  for (let i = 2; i < wholeTableValues.length - 1; i++) {\n    if (wholeTableValues[i][0] !== wholeTableValues[i - 1][0]) {\n      let totalItems = i - nameStartIndex;\n      let propertyExampleCount = 0;\n      let totalPropertyCount = 0;\n      let methodExampleCount = 0;\n      let totalMethodCount = 0;\n      let classExample = false;\n\n      // Count fields based on type.\n      for (let j = nameStartIndex; j < i; j++) {\n        switch (wholeTableValues[j][typeColumnIndex]) {\n          case \"Property\":\n            totalPropertyCount++;\n            propertyExampleCount += wholeTableValues[j][exampleColumnIndex] ? 1 : 0;\n            break;\n          case \"Method\":\n            let methodName = wholeTableValues[j][fieldColumnIndex] as string;\n            let previousMethodName = wholeTableValues[j - 1][fieldColumnIndex] as string\n            // Don't count method overloads.\n            if (methodName.substring(0, methodName.indexOf(\"(\")) != previousMethodName.substring(0, previousMethodName.indexOf(\"(\"))) {\n              totalMethodCount++;\n              methodExampleCount += wholeTableValues[j][exampleColumnIndex] ? 1 : 0;\n            } else {\n              // If an overload has an example, neither miss it or double-count it.\n              if (wholeTableValues[j][exampleColumnIndex] && !wholeTableValues[j - 1][exampleColumnIndex]) {\n                methodExampleCount++;\n              } else if (!wholeTableValues[j][exampleColumnIndex] && wholeTableValues[j - 1][exampleColumnIndex]) {\n                wholeTableValues[j][exampleColumnIndex] = true;\n              }\n            }\n            break;\n          case \"Enum\":\n          case \"Class\":\n            classExample = wholeTableValues[j][exampleColumnIndex] as boolean;\n            break;\n        }\n      }\n\n      sheet.getRangeByIndexes(nameStartIndex, weightColumnIndex, 1, 1).setValue(getWeightedCoverageValue(totalPropertyCount, propertyExampleCount, totalMethodCount, methodExampleCount, classExample));\n      nameStartIndex = i;\n    }\n  }\n\n  // Add the weighted value to each class.\n  let weightColumnValues = weightColumn.getRangeBetweenHeaderAndTotal().getValues();\n  let classCount = 0;\n  let weightedCoverage = 0;\n  for (let i = 0; i < weightColumnValues.length; i++) {\n    if (weightColumnValues[i][0]) {\n      classCount++;\n      weightedCoverage += weightColumnValues[i][0] as number\n    }\n  }\n\n  console.log(`Weighted coverage percentage: ${Math.round(weightedCoverage / classCount * 10000) / 100}%`);\n}\n\nfunction getWeightedCoverageValue(totalPropertyCount: number, propertyExampleCount: number, totalMethodCount: number, methodExampleCount: number, classExample: boolean): number {\n  if (totalPropertyCount == 0 && totalMethodCount == 0) {\n    return classExample ? 1 : 0;\n  } else if (totalMethodCount == 0 && totalPropertyCount <= 4) {\n    if (classExample) {\n      return 1;\n    } else {\n      return getWeightedCount(propertyExampleCount, totalPropertyCount);\n    }\n  } else {\n    let fieldWeight = getWeightedCount(propertyExampleCount + methodExampleCount, totalPropertyCount + totalMethodCount) * .9;\n    return fieldWeight + (classExample ? .1 : 0);\n  }\n}\n\nfunction getWeightedCount(given: number, total: number, ): number {\n  return Math.max(getWeightedCountHelper(given, total, 2), (given / total));\n}\n\nfunction getWeightedCountHelper(given: number, total: number, weight: number): number {\n  if (given == total) {\n    return 1;\n  } else if (given == 0) {\n    return 0;\n  } else {\n    return ((1 / total) * weight) + getWeightedCountHelper(given - 1, total, weight / 1.4);\n  }\n}\n\n/**\n * Get a string (a CSV in this case) from a URL.\n */\nasync function fetchCsvText(link: string): Promise<string> {\n  // Fetch the data from a URL.\n  const response = await fetch(link);\n  return await response.text();\n}\n\n/**\n * Convert the CSV data into a 2D array.\n */\nfunction convertCsvToArray(csv: string): string[][] {\n  // Split each line into a row.\n  let rows = csv.split(\"\\n\");\n  let data: string[][] = [];\n  rows.forEach((value) => {\n    /*\n     * For each row, match the comma-separated sections.\n     * For more information on how to use regular expressions to parse CSV files,\n     * see this Stack Overflow post: https://stackoverflow.com/a/48806378/9227753\n     */\n    let row = value.match(/(?:,|\\n|^)(\"(?:(?:\"\")*[^\"]*)*\"|[^\",\\n]*|(?:\\n|$))/g)\n    // Remove the preceding comma.\n    row.forEach((cell, index) => {\n      row[index] = cell.indexOf(\",\") === 0 ? cell.substr(1) : cell;\n    });\n    data.push(row);\n  });\n  return data;\n}\n\n/**\n * Convert a column into a set so it only contains unique values.\n */\nfunction columnToSet(column: ExcelScript.TableColumn): string[] {\n  let range = column.getRangeBetweenHeaderAndTotal().getValues() as string[][];\n  let columnSet: string[] = [];\n  range.forEach((value) => {\n    if (!columnSet.includes(value[0])) {\n      columnSet.push(value[0]);\n    }\n  });\n  return columnSet;\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[{\"name\":\"officeJsCsv\",\"index\":0},{\"name\":\"officeScriptsCsv\",\"index\":1}],\"parameterSchema\":{\"type\":\"object\",\"required\":[],\"properties\":{\"officeJsCsv\":{\"type\":\"string\"},\"officeScriptsCsv\":{\"type\":\"string\"}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}