{"version":"0.2.0","body":"async function main(\n  workbook: ExcelScript.Workbook,\n  officeJsCsv?: string,\n  officeScriptsCsv?: string) : Promise<string> {\n  // Setup the workbook.\n  let worksheet = workbook.getWorksheet(\"Coverage\");\n  if (!worksheet) {\n    worksheet = workbook.addWorksheet(\"Coverage\");\n  }\n  worksheet.activate();\n\n  // Clear out the old table.\n  let table = worksheet.getTable(\"CoverageTable\");\n  if (table) {\n    table.delete();\n  }\n\n  // Get the data as comma-separated value strings.\n  if (!officeJsCsv) {\n    officeJsCsv = await fetchCsvText(\"https://raw.githubusercontent.com/OfficeDev/office-js-docs-reference/master/generate-docs/tools/API%20Coverage%20Report.csv\");\n  }\n\n  if (!officeScriptsCsv) {\n    officeScriptsCsv = await fetchCsvText(\"https://raw.githubusercontent.com/OfficeDev/office-scripts-docs-reference/master/generate-docs/tools/API%20Coverage%20Report.csv\");\n  }\n  let totalCsv = officeJsCsv + officeScriptsCsv;\n\n  // Trim the trailing new line.\n  totalCsv = totalCsv.trim();\n\n  // Convert the CSV string to 2D string arrays.\n  let apiData = convertCsvToArray(totalCsv);\n\n  // Add the information to the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n  let range = sheet.getRangeByIndexes(0, 0, apiData.length, apiData[0].length);\n  range.setValues(apiData);\n\n  // Format information in a table.\n  table = sheet.addTable(range, true);\n  table.setName(\"CoverageTable\");\n  table.setShowTotals(true);\n  range.getFormat().autofitColumns();\n\n  // Filter out the fields we're not tracking (Enum fields).\n  let typeColumn = table.getColumnByName(\"Type\");\n  let typeSet = columnToSet(typeColumn);\n  typeColumn.getFilter().applyValuesFilter(typeSet.filter((value) => {\n    return value !== \"EnumField\";\n  }));\n\n\n  // Find the percentage of entries with \"TRUE\" in the Has Example? column.\n  let exampleColumn = table.getColumnByName(\"Has Example?\");\n  let totalCount = exampleColumn.getTotalRowRange().getValue() as number;\n  exampleColumn.getFilter().applyValuesFilter([\"TRUE\"]);\n  let exampleCount = exampleColumn.getTotalRowRange().getValue() as number;\n  let examplePercentage = Math.round(exampleCount / totalCount * 10000) / 100;\n  let coverageString = `${exampleCount}/${totalCount} APIs have examples (${examplePercentage}%).`;\n  console.log(coverageString);\n  return coverageString;\n}\n\n/**\n * Get a string (a CSV in this case) from a URL.\n */\nasync function fetchCsvText(link: string): Promise<string> {\n  // Fetch the data from a URL.\n  const response = await fetch(link);\n  return await response.text();\n}\n\n/**\n * Convert the CSV data into a 2D array.\n */\nfunction convertCsvToArray(csv: string): string[][] {\n  // Split each line into a row.\n  let rows = csv.split(\"\\n\");\n  let data: string[][] = [];\n  rows.forEach((value) => {\n    /*\n     * For each row, match the comma-separated sections.\n     * For more information on how to use regular expressions to parse CSV files,\n     * see this Stack Overflow post: https://stackoverflow.com/a/48806378/9227753\n     */\n    let row = value.match(/(?:,|\\n|^)(\"(?:(?:\"\")*[^\"]*)*\"|[^\",\\n]*|(?:\\n|$))/g)\n\n    // Remove the preceding comma.\n    row.forEach((cell, index) => {\n      row[index] = cell.indexOf(\",\") === 0 ? cell.substr(1) : cell;\n    });\n    data.push(row);\n  });\n\n  return data;\n}\n\n/**\n * Convert a column into a set so it only contains uniue values.\n */\nfunction columnToSet(column: ExcelScript.TableColumn): string[] {\n  let range = column.getRangeBetweenHeaderAndTotal().getValues() as string[][];\n  let columnSet: string[] = [];\n  range.forEach((value) => {\n    if (!columnSet.includes(value[0])) {\n      columnSet.push(value[0]);\n    }\n  });\n\n  return columnSet;\n}","description":"Gets the coverage reports for the Office JS APIs and Office Scripts APIs and calculates the sample coverage.","parameterInfo":"{\"originalParameterOrder\":[{\"name\":\"officeJsCsv\",\"index\":0},{\"name\":\"officeScriptsCsv\",\"index\":1}],\"parameterSchema\":{\"type\":\"object\",\"required\":[],\"properties\":{\"officeJsCsv\":{\"type\":\"string\"},\"officeScriptsCsv\":{\"type\":\"string\"}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}
