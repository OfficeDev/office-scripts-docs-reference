////////////////////////////////////////////////////////////////
/////////////////////// Begin Excel APIs ///////////////////////
////////////////////////////////////////////////////////////////

export declare namespace Excel {
    

    /** Contains the result for methods that return primitive types. The object's value property is retrieved from the document after `context.sync()` is invoked. */
    class ClientResult<T> {
        /** The value of the result that is retrieved from the document after `context.sync()` is invoked. */
        value: T;
    }
    /**
     *
     * Represents which cell properties to load, when used as part of a "range.getCellProperties" method.
     *
     * 
     */
    export interface CellPropertiesLoadOptions {
        /**
        *
        * Specifies whether to load on the `address` property.
        *
        * 
        */
        address?: boolean;
        /**
        *
        * Specifies whether to load on the `addressLocal` property.
        *
        * 
        */
        addressLocal?: boolean;
        /**
        *
        * Specifies whether to load on the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormatLoadOptions;
        /**
        *
        * Specifies whether to load on the `hidden` property.
        *
        * 
        */
        hidden?: boolean;
        /**
        *
        * Specifies whether to load on the `hyperlink` property.
        *
        * 
        */
        hyperlink?: boolean;
        /**
        *
        * Specifies whether to load on the `style` property.
        *
        * 
        */
        style?: boolean;
    }
    /**
     *
     * Represents which row properties to load, when used as part of a "range.getRowProperties" method.
     *
     * 
     */
    export interface RowPropertiesLoadOptions extends CellPropertiesLoadOptions {
        /**
        *
        * Specifies whether to load on the `rowHidden` property.
        *
        * 
        */
        rowHidden?: boolean;
        /**
        *
        * Specifies whether to load on the `rowIndex` property.
        *
        * 
        */
        rowIndex?: boolean;
        /**
        *
        * Specifies whether to load on the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormatLoadOptions & {
            rowHeight?: boolean;
        };
    }
    /**
     *
     * Represents which column properties to load, when used as part of a "range.getColumnProperties" method.
     *
     * 
     */
    export interface ColumnPropertiesLoadOptions extends CellPropertiesLoadOptions {
        /**
        *
        * Specifies whether to load on the `columnIndex` property.
        *
        * 
        */
        columnIndex?: boolean;
        /**
        *
        * Specifies whether to load on the `columnHidden` property.
        *
        * 
        */
        columnHidden?: boolean;
        /**
        *
        * Specifies whether to load on the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormatLoadOptions & {
            columnWidth?: boolean;
        };
    }
    /**
     *
     * Represents which properties to load on the format object.
     *
     * 
     */
    export interface CellPropertiesFormatLoadOptions {
        /**
        *
        * Specifies whether to load on the `autoIndent` property.
        *
        * 
        */
        autoIndent?: boolean;
        /**
        *
        * Specifies whether to load on the `borders` property.
        *
        * 
        */
        borders?: Excel.CellPropertiesBorderLoadOptions;
        /**
        *
        * Specifies whether to load on the `fill` property.
        *
        * 
        */
        fill?: Excel.CellPropertiesFillLoadOptions;
        /**
        *
        * Specifies whether to load on the `font` property.
        *
        * 
        */
        font?: Excel.CellPropertiesFontLoadOptions;
        /**
        *
        * Specifies whether to load on the `horizontalAlignment` property.
        *
        * 
        */
        horizontalAlignment?: boolean;
        /**
        *
        * Specifies whether to load on the `indentLevel` property.
        *
        * 
        */
        indentLevel?: boolean;
        /**
        *
        * Specifies whether to load on the `protection` property.
        *
        * 
        */
        protection?: boolean;
        /**
        *
        * Specifies whether to load on the `readingOrder` property.
        *
        * 
        */
        readingOrder?: boolean;
        /**
        *
        * Specifies whether to load on the `shrinkToFit` property.
        *
        * 
        */
        shrinkToFit?: boolean;
        /**
        *
        * Specifies whether to load on the `textOrientation` property.
        *
        * 
        */
        textOrientation?: boolean;
        /**
        *
        * Specifies whether to load on the `useStandardHeight` property.
        *
        * 
        */
        useStandardHeight?: boolean;
        /**
        *
        * Specifies whether to load on the `useStandardWidth` property.
        *
        * 
        */
        useStandardWidth?: boolean;
        /**
        *
        * Specifies whether to load on the `verticalAlignment` property.
        *
        * 
        */
        verticalAlignment?: boolean;
        /**
        *
        * Specifies whether to load on the `wrapText` property.
        *
        * 
        */
        wrapText?: boolean;
    }
    /**
     *
     * Represents the input parameter of setCellProperties.
     *
     * 
     */
    export interface SettableCellProperties {
        /**
        *
        * Represents the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormat;
        /**
        *
        * Represents the `hyperlink` property.
        *
        * 
        */
        hyperlink?: Excel.RangeHyperlink;
        /**
        *
        * Represents the `style` property.
        *
        * 
        */
        style?: string;
    }
    /**
     *
     * Represents the returned properties of getCellProperties.
     *
     * 
     */
    export interface CellProperties extends SettableCellProperties {
        /**
        *
        * Represents the `address` property.
        *
        * 
        */
        address?: string;
        /**
        *
        * Represents the `addressLocal` property.
        *
        * 
        */
        addressLocal?: string;
        /**
        *
        * Represents the `hidden` property.
        *
        * 
        */
        hidden?: boolean;
    }
    /**
     *
     * Represents the input parameter of setRowProperties.
     *
     * 
     */
    export interface SettableRowProperties extends SettableCellProperties {
        /**
        *
        * Represents the `rowHidden` property.
        *
        * 
        */
        rowHidden?: boolean;
        /**
        *
        * Represents the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormat & {
            rowHeight?: number;
        };
    }
    /**
     *
     * Represents the returned properties of getRowProperties.
     *
     * 
     */
    export interface RowProperties extends SettableRowProperties {
        /**
        *
        * Represents the `rowIndex` property.
        *
        * 
        */
        rowIndex?: number;
        /**
        *
        * Represents the `address` property.
        *
        * 
        */
        address?: string;
        /**
        *
        * Represents the `addressLocal` property.
        *
        * 
        */
        addressLocal?: string;
    }
    /**
     *
     * Represents the input parameter of setColumnProperties.
     *
     * 
     */
    export interface SettableColumnProperties extends SettableCellProperties {
        /**
        *
        * Represents the `columnHidden` property.
        *
        * 
        */
        columnHidden?: boolean;
        /**
        *
        * Represents the `format` property.
        *
        * 
        */
        format?: Excel.CellPropertiesFormat & {
            columnWidth?: number;
        };
    }
    /**
     *
     * Represents the returned properties of getColumnProperties.
     *
     * 
     */
    export interface ColumnProperties extends SettableColumnProperties {
        /**
        *
        * Represents the `columnIndex` property.
        *
        * 
        */
        columnIndex?: number;
        /**
        *
        * Represents the `address` property.
        *
        * 
        */
        address?: string;
        /**
        *
        * Represents the `addressLocal` property.
        *
        * 
        */
        addressLocal?: string;
    }
    /**
     *
     * Represents the returned format properties of getCellProperties or format input parameter of setCellProperties.
     *
     * 
     */
    export interface CellPropertiesFormat {
        /**
            *
            * Represents the `autoIndent` property.
            *
            * 
            */
        autoIndent?: boolean;
        /**
        *
        * Represents the `borders` property.
        *
        * 
        */
        borders?: Excel.CellBorderCollection;
        /**
        *
        * Represents the `fill` property.
        *
        * 
        */
        fill?: Excel.CellPropertiesFill;
        /**
        *
        * Represents the `font` property.
        *
        * 
        */
        font?: Excel.CellPropertiesFont;
        /**
        *
        * Represents the `horizontalAlignment` property.
        *
        * 
        */
        horizontalAlignment?: Excel.HorizontalAlignment | "General" | "Left" | "Center" | "Right" | "Fill" | "Justify" | "CenterAcrossSelection" | "Distributed";
        /**
        *
        * Represents the `indentLevel` property.
        *
        * 
        */
        indentLevel?: number;
        /**
        *
        * Represents the `protection` property.
        *
        * 
        */
        protection?: Excel.CellPropertiesProtection;
        /**
        *
        * Represents the `readingOrder` property.
        *
        * 
        */
        readingOrder?: Excel.ReadingOrder | "Context" | "LeftToRight" | "RightToLeft";
        /**
        *
        * Represents the `shrinkToFit` property.
        *
        * 
        */
        shrinkToFit?: boolean;
        /**
        *
        * Represents the `textOrientation` property.
        *
        * 
        */
        textOrientation?: number;
        /**
        *
        * Represents the `useStandardHeight` property.
        *
        * 
        */
        useStandardHeight?: boolean;
        /**
        *
        * Represents the `useStandardWidth` property.
        *
        * 
        */
        useStandardWidth?: boolean;
        /**
        *
        * Represents the `verticalAlignment` property.
        *
        * 
        */
        verticalAlignment?: Excel.VerticalAlignment | "Top" | "Center" | "Bottom" | "Justify" | "Distributed";
        /**
        *
        * Represents the `wrapText` property.
        *
        * 
        */
        wrapText?: boolean;
    }
    /**
     *
     * Creates and opens a new workbook.  Optionally, the workbook can be pre-populated with a base64-encoded .xlsx file.
     *
     * 
     *
     * @param base64File - Optional. The base64 encoded .xlsx file. The default value is null.
     */
    export function createWorkbook(base64?: string): Promise<void>;
    /**  */
	export interface ThreeArrowsSet {
        [index: number]: Icon;
        redDownArrow: Icon;
        yellowSideArrow: Icon;
        greenUpArrow: Icon;
    }
    /**  */
	export interface ThreeArrowsGraySet {
        [index: number]: Icon;
        grayDownArrow: Icon;
        graySideArrow: Icon;
        grayUpArrow: Icon;
    }
    /**  */
	export interface ThreeFlagsSet {
        [index: number]: Icon;
        redFlag: Icon;
        yellowFlag: Icon;
        greenFlag: Icon;
    }
    /**  */
	export interface ThreeTrafficLights1Set {
        [index: number]: Icon;
        redCircleWithBorder: Icon;
        yellowCircle: Icon;
        greenCircle: Icon;
    }
    /**  */
	export interface ThreeTrafficLights2Set {
        [index: number]: Icon;
        redTrafficLight: Icon;
        yellowTrafficLight: Icon;
        greenTrafficLight: Icon;
    }
    /**  */
	export interface ThreeSignsSet {
        [index: number]: Icon;
        redDiamond: Icon;
        yellowTriangle: Icon;
        greenCircle: Icon;
    }
    /**  */
	export interface ThreeSymbolsSet {
        [index: number]: Icon;
        redCrossSymbol: Icon;
        yellowExclamationSymbol: Icon;
        greenCheckSymbol: Icon;
    }
    /**  */
	export interface ThreeSymbols2Set {
        [index: number]: Icon;
        redCross: Icon;
        yellowExclamation: Icon;
        greenCheck: Icon;
    }
    /**  */
	export interface FourArrowsSet {
        [index: number]: Icon;
        redDownArrow: Icon;
        yellowDownInclineArrow: Icon;
        yellowUpInclineArrow: Icon;
        greenUpArrow: Icon;
    }
    /**  */
	export interface FourArrowsGraySet {
        [index: number]: Icon;
        grayDownArrow: Icon;
        grayDownInclineArrow: Icon;
        grayUpInclineArrow: Icon;
        grayUpArrow: Icon;
    }
    /**  */
	export interface FourRedToBlackSet {
        [index: number]: Icon;
        blackCircle: Icon;
        grayCircle: Icon;
        pinkCircle: Icon;
        redCircle: Icon;
    }
    /**  */
	export interface FourRatingSet {
        [index: number]: Icon;
        oneBar: Icon;
        twoBars: Icon;
        threeBars: Icon;
        fourBars: Icon;
    }
    /**  */
	export interface FourTrafficLightsSet {
        [index: number]: Icon;
        blackCircleWithBorder: Icon;
        redCircleWithBorder: Icon;
        yellowCircle: Icon;
        greenCircle: Icon;
    }
    /**  */
	export interface FiveArrowsSet {
        [index: number]: Icon;
        redDownArrow: Icon;
        yellowDownInclineArrow: Icon;
        yellowSideArrow: Icon;
        yellowUpInclineArrow: Icon;
        greenUpArrow: Icon;
    }
    /**  */
	export interface FiveArrowsGraySet {
        [index: number]: Icon;
        grayDownArrow: Icon;
        grayDownInclineArrow: Icon;
        graySideArrow: Icon;
        grayUpInclineArrow: Icon;
        grayUpArrow: Icon;
    }
    /**  */
	export interface FiveRatingSet {
        [index: number]: Icon;
        noBars: Icon;
        oneBar: Icon;
        twoBars: Icon;
        threeBars: Icon;
        fourBars: Icon;
    }
    /**  */
	export interface FiveQuartersSet {
        [index: number]: Icon;
        whiteCircleAllWhiteQuarters: Icon;
        circleWithThreeWhiteQuarters: Icon;
        circleWithTwoWhiteQuarters: Icon;
        circleWithOneWhiteQuarter: Icon;
        blackCircle: Icon;
    }
    /**  */
	export interface ThreeStarsSet {
        [index: number]: Icon;
        silverStar: Icon;
        halfGoldStar: Icon;
        goldStar: Icon;
    }
    /**  */
	export interface ThreeTrianglesSet {
        [index: number]: Icon;
        redDownTriangle: Icon;
        yellowDash: Icon;
        greenUpTriangle: Icon;
    }
    /**  */
	export interface FiveBoxesSet {
        [index: number]: Icon;
        noFilledBoxes: Icon;
        oneFilledBox: Icon;
        twoFilledBoxes: Icon;
        threeFilledBoxes: Icon;
        fourFilledBoxes: Icon;
    }
    /**  */
	export interface IconCollections {
        threeArrows: ThreeArrowsSet;
        threeArrowsGray: ThreeArrowsGraySet;
        threeFlags: ThreeFlagsSet;
        threeTrafficLights1: ThreeTrafficLights1Set;
        threeTrafficLights2: ThreeTrafficLights2Set;
        threeSigns: ThreeSignsSet;
        threeSymbols: ThreeSymbolsSet;
        threeSymbols2: ThreeSymbols2Set;
        fourArrows: FourArrowsSet;
        fourArrowsGray: FourArrowsGraySet;
        fourRedToBlack: FourRedToBlackSet;
        fourRating: FourRatingSet;
        fourTrafficLights: FourTrafficLightsSet;
        fiveArrows: FiveArrowsSet;
        fiveArrowsGray: FiveArrowsGraySet;
        fiveRating: FiveRatingSet;
        fiveQuarters: FiveQuartersSet;
        threeStars: ThreeStarsSet;
        threeTriangles: ThreeTrianglesSet;
        fiveBoxes: FiveBoxesSet;
    }
    /**  */
	var icons: IconCollections;
    /**
     * Provides connection session for a remote workbook.
     */
    export class Session {
        private static WorkbookSessionIdHeaderName;
        private static WorkbookSessionIdHeaderNameLower;
        constructor(workbookUrl?: string, requestHeaders?: {
            [name: string]: string;
        }, persisted?: boolean);
        /**
         * Close the session.
         */
        close(): Promise<void>;
    }
    /**
     * The RequestContext object facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the request context is required to get access to the Excel object model from the add-in.
     */
    export class RequestContext {
        constructor(url?: string | Session);
        readonly workbook: Workbook;
        readonly application: Application;
        /**
        * 
        */
        readonly runtime: Runtime;
    }
    export interface RunOptions {
        /**
         * Determines whether Excel will delay the batch request until the user exits cell edit mode.
         *
         * When false, if the user is in cell edit when the batch request is processed by the host, the batch will automatically fail.
         * When true, the batch request will be executed immediately if the user is not in cell edit mode, but if the user is in cell edit mode the batch request will be delayed until the user exits cell edit mode.
         */
        delayForCellEdit?: boolean;
    }
    export function postprocessBindingDescriptor(response: any): any;
    export function getDataCommonPostprocess(response: any, callArgs: any): any;
    /**
     *
     * Represents the Excel Runtime class.
     *
     * 
     */
    export class Runtime{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Toggle JavaScript events in the current task pane or content add-in.
         *
         * 
         */
        enableEvents: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Runtime): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Runtime): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Runtime;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Runtime;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Runtime object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RuntimeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the Excel application that manages the workbook.
     *
     * 
     */
    export class Application{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the Iterative Calculation settings.
            In Excel on Windows and Mac, the settings will apply to the Excel Application.
            In Excel on the web and other platforms, the settings will apply to the active workbook.
         *
         * 
         */
        readonly iterativeCalculation: Excel.IterativeCalculation;
        /**
         *
         * Returns the Excel calculation engine version used for the last full recalculation. Read-only.
         *
         * 
         */
        readonly calculationEngineVersion: number;
        /**
         *
         * Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible values are: `Automatic`, where Excel controls recalculation; `AutomaticExceptTables`, where Excel controls recalculation but ignores changes in tables; `Manual`, where calculation is done when the user requests it.
         *
         * 
         */
        calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";
        /**
         *
         * Returns the calculation state of the application. See Excel.CalculationState for details. Read-only.
         *
         * 
         */
        readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Application): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Application): void;
        /**
         *
         * Recalculate all currently opened workbooks in Excel.
         *
         * 
         *
         * @param calculationType - Specifies the calculation type to use. See Excel.CalculationType for details.
         */
        calculate(calculationType: Excel.CalculationType): void;
        /**
         *
         * Recalculate all currently opened workbooks in Excel.
         *
         * 
         *
         * @param calculationTypeString - Specifies the calculation type to use. See Excel.CalculationType for details.
         */
        calculate(calculationTypeString: "Recalculate" | "Full" | "FullRebuild"): void;
        /**
         *
         * Suspends calculation until the next "context.sync()" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.
         *
         * 
         */
        suspendApiCalculationUntilNextSync(): void;
        /**
         *
         * Suspends sceen updating until the next "context.sync()" is called.
         *
         * 
         */
        suspendScreenUpdatingUntilNextSync(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Application;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Application;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the Iterative Calculation settings.
     *
     * 
     */
    export class IterativeCalculation{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * True if Excel will use iteration to resolve circular references.
         *
         * 
         */
        enabled: boolean;
        /**
         *
         * Returns or sets the maximum amount of change between each iteration as Excel resolves circular references.
         *
         * 
         */
        maxChange: number;
        /**
         *
         * Returns or sets the maximum number of iterations that Excel can use to resolve a circular reference.
         *
         * 
         */
        maxIteration: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.IterativeCalculation): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.IterativeCalculation): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.IterativeCalculation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.IterativeCalculation;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.IterativeCalculation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IterativeCalculationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Workbook is the top level object which contains related workbook objects such as worksheets, tables, ranges, etc.
            To learn more about the workbook object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks | Work with workbooks using the Excel JavaScript API}.
     *
     * 
     */
    export class Workbook{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the Excel application instance that contains this workbook. Read-only.
         *
         * 
         */
        readonly application: Excel.Application;
        /**
         *
         * Represents a collection of bindings that are part of the workbook. Read-only.
         *
         * 
         */
        readonly bindings: Excel.BindingCollection;
        /**
         *
         * Represents a collection of Comments associated with the workbook. Read-only.
         *
         * 
         */
        readonly comments: Excel.CommentCollection;
        /**
         *
         * Represents the collection of custom XML parts contained by this workbook. Read-only.
         *
         * 
         */
        readonly customXmlParts: Excel.CustomXmlPartCollection;
        /**
         *
         * Represents all data connections in the workbook. Read-only.
         *
         * 
         */
        readonly dataConnections: Excel.DataConnectionCollection;
        /**
         *
         * Represents a collection of worksheet functions that can be used for computation. Read-only.
         *
         * 
         */
        readonly functions: Excel.Functions;
        /**
         *
         * Represents a collection of workbook scoped named items (named ranges and constants). Read-only.
         *
         * 
         */
        readonly names: Excel.NamedItemCollection;
        /**
         *
         * Represents a collection of PivotTableStyles associated with the workbook. Read-only.
         *
         * 
         */
        readonly pivotTableStyles: Excel.PivotTableStyleCollection;
        /**
         *
         * Represents a collection of PivotTables associated with the workbook. Read-only.
         *
         * 
         */
        readonly pivotTables: Excel.PivotTableCollection;
        /**
         *
         * Gets the workbook properties. Read-only.
         *
         * 
         */
        readonly properties: Excel.DocumentProperties;
        /**
         *
         * Returns workbook protection object for a workbook. Read-only.
         *
         * 
         */
        readonly protection: Excel.WorkbookProtection;
        /**
         *
         * Represents a collection of Settings associated with the workbook. Read-only.
         *
         * 
         */
        readonly settings: Excel.SettingCollection;
        /**
         *
         * Represents a collection of SlicerStyles associated with the workbook. Read-only.
         *
         * 
         */
        readonly slicerStyles: Excel.SlicerStyleCollection;
        /**
         *
         * Represents a collection of Slicers associated with the workbook. Read-only.
         *
         * 
         */
        readonly slicers: Excel.SlicerCollection;
        /**
         *
         * Represents a collection of styles associated with the workbook. Read-only.
         *
         * 
         */
        readonly styles: Excel.StyleCollection;
        /**
         *
         * Represents a collection of TableStyles associated with the workbook. Read-only.
         *
         * 
         */
        readonly tableStyles: Excel.TableStyleCollection;
        /**
         *
         * Represents a collection of tables associated with the workbook. Read-only.
         *
         * 
         */
        readonly tables: Excel.TableCollection;
        /**
         *
         * Represents a collection of TimelineStyles associated with the workbook. Read-only.
         *
         * 
         */
        readonly timelineStyles: Excel.TimelineStyleCollection;
        /**
         *
         * Represents a collection of worksheets associated with the workbook. Read-only.
         *
         * 
         */
        readonly worksheets: Excel.WorksheetCollection;
        /**
         *
         * Specifies whether or not the workbook is in autosave mode. Read-Only.
         *
         * 
         */
        readonly autoSave: boolean;
        /**
         *
         * Returns a number about the version of Excel Calculation Engine. Read-Only.
         *
         * 
         */
        readonly calculationEngineVersion: number;
        /**
         *
         * True if all charts in the workbook are tracking the actual data points to which they are attached.
            False if the charts track the index of the data points.
         *
         * 
         */
        chartDataPointTrack: boolean;
        /**
         *
         * Specifies whether or not changes have been made since the workbook was last saved.
            You can set this property to true if you want to close a modified workbook without either saving it or being prompted to save it.
         *
         * 
         */
        isDirty: boolean;
        /**
         *
         * Gets the workbook name. Read-only.
         *
         * 
         */
        readonly name: string;
        /**
         *
         * Specifies whether or not the workbook has ever been saved locally or online. Read-Only.
         *
         * 
         */
        readonly previouslySaved: boolean;
        /**
         *
         * True if the workbook is open in Read-only mode. Read-only.
         *
         * 
         */
        readonly readOnly: boolean;
        /**
         *
         * True if calculations in this workbook will be done using only the precision of the numbers as they're displayed.
            Data will permanently lose accuracy when switching this property from false to true.
         *
         * 
         */
        usePrecisionAsDisplayed: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Workbook): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Workbook): void;
        /**
         *
         * Gets the currently active cell from the workbook.
         *
         * 
         */
        getActiveCell(): Excel.Range;
        /**
         *
         * Gets the currently active chart in the workbook. If there is no active chart, an `ItemNotFound` exception is thrown.
         *
         * 
         */
        getActiveChart(): Excel.Chart;
        /**
         *
         * Gets the currently active chart in the workbook. If there is no active chart, a null object is returned.
         *
         * 
         */
        getActiveChartOrNullObject(): Excel.Chart;
        /**
         *
         * Gets the currently active slicer in the workbook. If there is no active slicer, an `ItemNotFound` exception is thrown.
         *
         * 
         */
        getActiveSlicer(): Excel.Slicer;
        /**
         *
         * Gets the currently active slicer in the workbook. If there is no active slicer, a null object is returned.
         *
         * 
         */
        getActiveSlicerOrNullObject(): Excel.Slicer;
        /**
         *
         * True if the workbook is being edited by multiple users (co-authoring).
            Please be aware there might be some delay between when the workbook status changes and when the changes are reflected on the result of the method.
         *
         * 
         */
        getIsActiveCollabSession(): ClientResult<boolean>;
        /**
         *
         * Gets the currently selected single range from the workbook. If there are multiple ranges selected, this method will throw an error.
         *
         * 
         */
        getSelectedRange(): Excel.Range;
        /**
         *
         * Gets the currently selected one or more ranges from the workbook. Unlike getSelectedRange(), this method returns a RangeAreas object that represents all the selected ranges.
         *
         * 
         */
        getSelectedRanges(): Excel.RangeAreas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Workbook;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Workbook;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Workbook object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the protection of a workbook object.
     *
     * 
     */
    export class WorkbookProtection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Indicates if the workbook is protected. Read-Only.
         *
         * 
         */
        readonly protected: boolean;
        /**
         *
         * Protects a workbook. Fails if the workbook has been protected.
         *
         * 
         *
         * @param password - workbook protection password.
         */
        protect(password?: string): void;
        /**
         *
         * Unprotects a workbook.
         *
         * 
         *
         * @param password - workbook protection password.
         */
        unprotect(password?: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.WorkbookProtection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.WorkbookProtection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.WorkbookProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookProtectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * The WorkbookCreated object is the top level object created by Application.CreateWorkbook. A WorkbookCreated object is a special Workbook object.
     *
     * 
     */
    export class WorkbookCreated{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.WorkbookCreated;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.WorkbookCreated;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.WorkbookCreated object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookCreatedData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.
            To learn more about the worksheet object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets | Work with worksheets using the Excel JavaScript API}.
     *
     * 
     */
    export class Worksheet{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the AutoFilter object of the worksheet. Read-Only.
         *
         * 
         */
        readonly autoFilter: Excel.AutoFilter;
        /**
         *
         * Returns a collection of charts that are part of the worksheet. Read-only.
         *
         * 
         */
        readonly charts: Excel.ChartCollection;
        /**
         *
         * Returns a collection of all the Comments objects on the worksheet. Read-only.
         *
         * 
         */
        readonly comments: Excel.CommentCollection;
        /**
         *
         * Gets an object that can be used to manipulate frozen panes on the worksheet. Read-only.
         *
         * 
         */
        readonly freezePanes: Excel.WorksheetFreezePanes;
        /**
         *
         * Gets the horizontal page break collection for the worksheet. This collection only contains manual page breaks.
         *
         * 
         */
        readonly horizontalPageBreaks: Excel.PageBreakCollection;
        /**
         *
         * Collection of names scoped to the current worksheet. Read-only.
         *
         * 
         */
        readonly names: Excel.NamedItemCollection;
        /**
         *
         * Gets the PageLayout object of the worksheet.
         *
         * 
         */
        readonly pageLayout: Excel.PageLayout;
        /**
         *
         * Collection of PivotTables that are part of the worksheet. Read-only.
         *
         * 
         */
        readonly pivotTables: Excel.PivotTableCollection;
        /**
         *
         * Returns sheet protection object for a worksheet. Read-only.
         *
         * 
         */
        readonly protection: Excel.WorksheetProtection;
        /**
         *
         * Returns the collection of all the Shape objects on the worksheet. Read-only.
         *
         * 
         */
        readonly shapes: Excel.ShapeCollection;
        /**
         *
         * Returns a collection of slicers that are part of the worksheet. Read-only.
         *
         * 
         */
        readonly slicers: Excel.SlicerCollection;
        /**
         *
         * Collection of tables that are part of the worksheet. Read-only.
         *
         * 
         */
        readonly tables: Excel.TableCollection;
        /**
         *
         * Gets the vertical page break collection for the worksheet. This collection only contains manual page breaks.
         *
         * 
         */
        readonly verticalPageBreaks: Excel.PageBreakCollection;
        /**
         *
         * Gets or sets the enableCalculation property of the worksheet.
            True if Excel recalculates the worksheet when necessary. False if Excel doesn't recalculate the sheet.
         *
         * 
         */
        enableCalculation: boolean;
        /**
         *
         * Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * The display name of the worksheet.
         *
         * 
         */
        name: string;
        /**
         *
         * The zero-based position of the worksheet within the workbook.
         *
         * 
         */
        position: number;
        /**
         *
         * Gets or sets the worksheet's gridlines flag.
            This flag determines whether gridlines are visible to the user.
         *
         * 
         */
        showGridlines: boolean;
        /**
         *
         * Gets or sets the worksheet's headings flag.
            This flag determines whether headings are visible to the user.
         *
         * 
         */
        showHeadings: boolean;
        /**
         *
         * Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.
         *
         * 
         */
        readonly standardHeight: number;
        /**
         *
         * Returns or sets the standard (default) width of all the columns in the worksheet.
            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.
         *
         * 
         */
        standardWidth: number;
        /**
         *
         * Gets or sets the worksheet tab color.
            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form "#123456"
            When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.
         *
         * 
         */
        tabColor: string;
        /**
         *
         * The Visibility of the worksheet.
         *
         * 
         */
        visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Worksheet): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Worksheet): void;
        /**
         *
         * Activate the worksheet in the Excel UI.
         *
         * 
         */
        activate(): void;
        /**
         *
         * Calculates all cells on a worksheet.
         *
         * 
         *
         * @param markAllDirty - True, to mark all as dirty.
         */
        calculate(markAllDirty: boolean): void;
        /**
         *
         * Copies a worksheet and places it at the specified position.
         *
         * 
         *
         * @param positionType - The location in the workbook to place the newly created worksheet. The default value is "None", which inserts the worksheet at the beginning of the worksheet.
         * @param relativeTo - The existing worksheet which determines the newly created worksheet's position. This is only needed if `positionType` is "Before" or "After".
         * @returns The newly created worksheet.
         */
        copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;
        /**
         *
         * Copies a worksheet and places it at the specified position.
         *
         * 
         *
         * @param positionTypeString - The location in the workbook to place the newly created worksheet. The default value is "None", which inserts the worksheet at the beginning of the worksheet.
         * @param relativeTo - The existing worksheet which determines the newly created worksheet's position. This is only needed if `positionType` is "Before" or "After".
         * @returns The newly created worksheet.
         */
        copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;
        /**
         *
         * Deletes the worksheet from the workbook. Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with an `InvalidOperation` exception. You should first change its visibility to hidden or visible before deleting it.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.
         *
         * 
         *
         * @param text - The string to find.
         * @param criteria - Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.
         * @returns A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria. If no cells meet this criteria, an ItemNotFound error will be thrown.
         */
        findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;
        /**
         *
         * Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.
         *
         * 
         *
         * @param text - The string to find.
         * @param criteria - Additional search criteria, including whether the search needs to match the entire cell or be case sensitive.
         * @returns A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria. If there are no matches, this function will return a null object.
         */
        findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;
        /**
         *
         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.
         *
         * 
         *
         * @param row - The row number of the cell to be retrieved. Zero-indexed.
         * @param column - the column number of the cell to be retrieved. Zero-indexed.
         */
        getCell(row: number, column: number): Excel.Range;
        /**
         *
         * Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getNext(visibleOnly?: boolean): Excel.Worksheet;
        /**
         *
         * Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;
        /**
         *
         * Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getPrevious(visibleOnly?: boolean): Excel.Worksheet;
        /**
         *
         * Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;
        /**
         *
         * Gets the range object, representing a single rectangular block of cells, specified by the address or name.
         *
         * 
         *
         * @param address - Optional. The string representing the address or name of the range. For example, "A1:B2". If not specified, the entire worksheet range is returned.
         */
        getRange(address?: string): Excel.Range;
        /**
         *
         * Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.
         *
         * 
         *
         * @param startRow - Start row (zero-indexed).
         * @param startColumn - Start column (zero-indexed).
         * @param rowCount - Number of rows to include in the range.
         * @param columnCount - Number of columns to include in the range.
         */
        getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;
        /**
         *
         * Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.
         *
         * 
         *
         * @param address - Optional. A string containing the comma-separated addresses or names of the individual ranges. For example, "A1:B2, A5:B5". If not specified, an RangeArea object for the entire worksheet is returned.
         */
        getRanges(address?: string): Excel.RangeAreas;
        /**
         *
         * The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).
         *
         * 
         *
         * @param valuesOnly - Optional. If true, considers only cells with values as used cells (ignoring formatting). 
         */
        getUsedRange(valuesOnly?: boolean): Excel.Range;
        /**
         *
         * The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.
         *
         * 
         *
         * @param valuesOnly - Optional. Considers only cells with values as used cells.
         */
        getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;
        /**
         *
         * Finds and replaces the given string based on the criteria specified within the current worksheet.
         *
         * 
         *
         * @param text - String to find.
         * @param replacement - String to replace the original with.
         * @param criteria - Additional Replace Criteria.
         * @returns The number of replacements performed.
         */
        replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): ClientResult<number>;
        /**
         *
         * Shows row or column groups by their outline levels.
            Outlines group and summarize a list of data in the worksheet.
            The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed.
            The acceptable argument range is between 0 and 8.
            A value of 0 does not change the current display. A value greater than the current number of levels displays all the levels.
         *
         * 
         *
         * @param rowLevels - The number of row levels of an outline to display.
         * @param columnLevels - The number of column levels of an outline to display.
         */
        showOutlineLevels(rowLevels: number, columnLevels: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Worksheet;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Worksheet;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of worksheet objects that are part of the workbook.
     *
     * 
     */
    export class WorksheetCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Worksheet[];
        /**
         *
         * Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.
         *
         * 
         *
         * @param name - Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.
         */
        add(name?: string): Excel.Worksheet;
        /**
         *
         * Gets the currently active worksheet in the workbook.
         *
         * 
         */
        getActiveWorksheet(): Excel.Worksheet;
        /**
         *
         * Gets the number of worksheets in the collection.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getCount(visibleOnly?: boolean): ClientResult<number>;
        /**
         *
         * Gets the first worksheet in the collection.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getFirst(visibleOnly?: boolean): Excel.Worksheet;
        /**
         *
         * Gets a worksheet object using its Name or ID.
         *
         * 
         *
         * @param key - The Name or ID of the worksheet.
         */
        getItem(key: string): Excel.Worksheet;
        /**
         *
         * Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.
         *
         * 
         *
         * @param key - The Name or ID of the worksheet.
         */
        getItemOrNullObject(key: string): Excel.Worksheet;
        /**
         *
         * Gets the last worksheet in the collection.
         *
         * 
         *
         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.
         */
        getLast(visibleOnly?: boolean): Excel.Worksheet;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.WorksheetCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the protection of a sheet object.
     *
     * 
     */
    export class WorksheetProtection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Sheet protection options. Read-only.
         *
         * 
         */
        readonly options: Excel.WorksheetProtectionOptions;
        /**
         *
         * Indicates if the worksheet is protected. Read-only.
         *
         * 
         */
        readonly protected: boolean;
        /**
         *
         * Protects a worksheet. Fails if the worksheet has already been protected.
         *
         * 
         *
         * @param options - Optional. Sheet protection options.
         * @param password - Optional. Sheet protection password.
         */
        protect(options?: Excel.WorksheetProtectionOptions, password?: string): void;
        /**
         *
         * Unprotects a worksheet.
         *
         * 
         *
         * @param password - sheet protection password.
         */
        unprotect(password?: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.WorksheetProtection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.WorksheetProtection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.WorksheetProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetProtectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the options in sheet protection.
     *
     * 
     */
    export interface WorksheetProtectionOptions {
        /**
         *
         * Represents the worksheet protection option of allowing using auto filter feature.
         *
         * 
         */
        allowAutoFilter?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing deleting columns.
         *
         * 
         */
        allowDeleteColumns?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing deleting rows.
         *
         * 
         */
        allowDeleteRows?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing editing objects.
         *
         * 
         */
        allowEditObjects?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing editing scenarios.
         *
         * 
         */
        allowEditScenarios?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing formatting cells.
         *
         * 
         */
        allowFormatCells?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing formatting columns.
         *
         * 
         */
        allowFormatColumns?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing formatting rows.
         *
         * 
         */
        allowFormatRows?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing inserting columns.
         *
         * 
         */
        allowInsertColumns?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing inserting hyperlinks.
         *
         * 
         */
        allowInsertHyperlinks?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing inserting rows.
         *
         * 
         */
        allowInsertRows?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing using PivotTable feature.
         *
         * 
         */
        allowPivotTables?: boolean;
        /**
         *
         * Represents the worksheet protection option of allowing using sort feature.
         *
         * 
         */
        allowSort?: boolean;
        /**
         *
         * Represents the worksheet protection option of selection mode.
         *
         * 
         */
        selectionMode?: Excel.ProtectionSelectionMode | "Normal" | "Unlocked" | "None";
    }
    /**
     * 
     */
    export class WorksheetFreezePanes{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Sets the frozen cells in the active worksheet view.
            The range provided corresponds to cells that will be frozen in the top- and left-most pane.
         *
         * 
         *
         * @param frozenRange - A range that represents the cells to be frozen, or null to remove all frozen panes.
         */
        freezeAt(frozenRange: Range | string): void;
        /**
         *
         * Freeze the first column(s) of the worksheet in place.
         *
         * 
         *
         * @param count - Optional number of columns to freeze, or zero to unfreeze all columns
         */
        freezeColumns(count?: number): void;
        /**
         *
         * Freeze the top row(s) of the worksheet in place.
         *
         * 
         *
         * @param count - Optional number of rows to freeze, or zero to unfreeze all rows
         */
        freezeRows(count?: number): void;
        /**
         *
         * Gets a range that describes the frozen cells in the active worksheet view.
            The frozen range is corresponds to cells that are frozen in the top- and left-most pane.
         *
         * 
         */
        getLocation(): Excel.Range;
        /**
         *
         * Gets a range that describes the frozen cells in the active worksheet view.
            The frozen range is corresponds to cells that are frozen in the top- and left-most pane.
            If there is no frozen pane, returns a null object.
         *
         * 
         */
        getLocationOrNullObject(): Excel.Range;
        /**
         *
         * Removes all frozen panes in the worksheet.
         *
         * 
         */
        unfreeze(): void;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.WorksheetFreezePanes object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetFreezePanesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     *
     * Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.
            To learn more about how ranges are used throughout the API, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges | Work with ranges using the Excel JavaScript API}
            and {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced | Work with ranges using the Excel JavaScript API (advanced)}.
     *
     * 
     */
    export class Range{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Collection of ConditionalFormats that intersect the range. Read-only.
         *
         * 
         */
        readonly conditionalFormats: Excel.ConditionalFormatCollection;
        /**
         *
         * Returns a data validation object.
         *
         * 
         */
        readonly dataValidation: Excel.DataValidation;
        /**
         *
         * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.
         *
         * 
         */
        readonly format: Excel.RangeFormat;
        /**
         *
         * Represents the range sort of the current range. Read-only.
         *
         * 
         */
        readonly sort: Excel.RangeSort;
        /**
         *
         * The worksheet containing the current range. Read-only.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4"). Read-only.
         *
         * 
         */
        readonly address: string;
        /**
         *
         * Represents range reference for the specified range in the language of the user. Read-only.
         *
         * 
         */
        readonly addressLocal: string;
        /**
         *
         * Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.
         *
         * 
         */
        readonly cellCount: number;
        /**
         *
         * Represents the total number of columns in the range. Read-only.
         *
         * 
         */
        readonly columnCount: number;
        /**
         *
         * Represents if all columns of the current range are hidden.
         *
         * 
         */
        columnHidden: boolean;
        /**
         *
         * Represents the column number of the first cell in the range. Zero-indexed. Read-only.
         *
         * 
         */
        readonly columnIndex: number;
        /**
         *
         * Represents the formula in A1-style notation.
            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.
         *
         * 
         */
        formulas: any[][];
        /**
         *
         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.
         *
         * 
         */
        formulasLocal: any[][];
        /**
         *
         * Represents the formula in R1C1-style notation.
            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.
         *
         * 
         */
        formulasR1C1: any[][];
        /**
         *
         * Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range. Read-only.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents if all cells of the current range are hidden. Read-only.
         *
         * 
         */
        readonly hidden: boolean;
        /**
         *
         * Represents the hyperlink for the current range.
         *
         * 
         */
        hyperlink: Excel.RangeHyperlink;
        /**
         *
         * Represents if the current range is an entire column. Read-only.
         *
         * 
         */
        readonly isEntireColumn: boolean;
        /**
         *
         * Represents if the current range is an entire row. Read-only.
         *
         * 
         */
        readonly isEntireRow: boolean;
        /**
         *
         * Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range. Read-only.
         *
         * 
         */
        readonly left: number;
        /**
         *
         * Represents the data type state of each cell. Read-only.
         *
         * 
         */
        readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];
        /**
         *
         * Represents Excel's number format code for the given range.
            When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.
         *
         * 
         */
        numberFormat: any[][];
        /**
         *
         * Represents Excel's number format code for the given range, based on the language settings of the user.​
            When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.
            If the argument is a single value, it will be applied to all cells in the range.​
            Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.
            Any returned text uses the locally-formatted strings based on the language specified in the system settings.
         *
         * 
         */
        numberFormatLocal: any[][];
        /**
         *
         * Returns the total number of rows in the range. Read-only.
         *
         * 
         */
        readonly rowCount: number;
        /**
         *
         * Represents if all rows of the current range are hidden.
         *
         * 
         */
        rowHidden: boolean;
        /**
         *
         * Returns the row number of the first cell in the range. Zero-indexed. Read-only.
         *
         * 
         */
        readonly rowIndex: number;
        /**
         *
         * Represents the style of the current range.
            If the styles of the cells are inconsistent, null will be returned.
            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.
         *
         * 
         */
        style: string;
        /**
         *
         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.
         *
         * 
         */
        readonly text: string[][];
        /**
         *
         * Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range. Read-only.
         *
         * 
         */
        readonly top: number;
        /**
         *
         * Represents the type of data of each cell. Read-only.
         *
         * 
         */
        readonly valueTypes: Excel.RangeValueType[][];
        /**
         *
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.
            When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.
         *
         * 
         */
        values: any[][];
        /**
         *
         * Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range. Read-only.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Range): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Range): void;
        /**
         *
         * Fills range from the current range to the destination range using the specified AutoFill logic.
             The destination range can be null, or can extend the source either horizontally or vertically.
             Discontiguous ranges are not supported.
            
             For more information, read {@link https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464 | Use AutoFill and Flash Fill}.
         *
         * 
         *
         * @param destinationRange - The destination range to autofill. If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).
         * @param autoFillType - The type of autofill. Specifies how the destination range is to be filled, based on the contents of the current range. Default is "FillDefault".
         */
        autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;
        /**
         *
         * Fills range from the current range to the destination range using the specified AutoFill logic.
             The destination range can be null, or can extend the source either horizontally or vertically.
             Discontiguous ranges are not supported.
            
             For more information, read {@link https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464 | Use AutoFill and Flash Fill}.
         *
         * 
         *
         * @param destinationRange - The destination range to autofill. If the destination range is null, data is filled out based on the surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).
         * @param autoFillTypeString - The type of autofill. Specifies how the destination range is to be filled, based on the contents of the current range. Default is "FillDefault".
         */
        autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;
        /**
         *
         * Calculates a range of cells on a worksheet.
         *
         * 
         */
        calculate(): void;
        /**
         *
         * Clear range values, format, fill, border, etc.
         *
         * 
         *
         * @param applyTo - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.
         */
        clear(applyTo?: Excel.ClearApplyTo): void;
        /**
         *
         * Clear range values, format, fill, border, etc.
         *
         * 
         *
         * @param applyToString - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.
         */
        clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;
        /**
         *
         * Converts the range cells with datatypes into text.
         *
         * 
         */
        convertDataTypeToText(): void;
        /**
         *
         * Converts the range cells into linked datatype in the worksheet.
         *
         * 
         *
         * @param serviceID - The Service ID which will be used to query the data.
         * @param languageCulture - Language Culture to query the service for.
         */
        convertToLinkedDataType(serviceID: number, languageCulture: string): void;
        /**
         *
         * Copies cell data or formatting from the source range or RangeAreas to the current range.
            The destination range can be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is smaller than the source.
         *
         * 
         *
         * @param sourceRange - The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.
         * @param copyType - The type of cell data or formatting to copy over. Default is "All".
         * @param skipBlanks - True if to skip blank cells in the source range. Default is false.
         * @param transpose - True if to transpose the cells in the destination range. Default is false.
         */
        copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;
        /**
         *
         * Copies cell data or formatting from the source range or RangeAreas to the current range.
            The destination range can be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is smaller than the source.
         *
         * 
         *
         * @param sourceRange - The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must be able to be created by removing full rows or columns from a rectangular range.
         * @param copyTypeString - The type of cell data or formatting to copy over. Default is "All".
         * @param skipBlanks - True if to skip blank cells in the source range. Default is false.
         * @param transpose - True if to transpose the cells in the destination range. Default is false.
         */
        copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;
        /**
         *
         * Deletes the cells associated with the range.
         *
         * 
         *
         * @param shift - Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.
         */
        delete(shift: Excel.DeleteShiftDirection): void;
        /**
         *
         * Deletes the cells associated with the range.
         *
         * 
         *
         * @param shiftString - Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.
         */
        delete(shiftString: "Up" | "Left"): void;
        /**
         *
         * Finds the given string based on the criteria specified.
            If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.
         *
         * 
         *
         * @param text - The string to find.
         * @param criteria - Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.
         * @returns The Range object representing the first cell that contains a value matching the search text and criteria.
         */
        find(text: string, criteria: Excel.SearchCriteria): Excel.Range;
        /**
         *
         * Finds the given string based on the criteria specified.
            If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.
            If there are no matches, this function will return a null object.
         *
         * 
         *
         * @param text - The string to find.
         * @param criteria - Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.
         * @returns The Range which matched the search criteria.
         */
        findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;
        /**
         *
         * Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.
         *
         * 
         */
        flashFill(): void;
        /**
         *
         * Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.
         *
         * 
         *
         * @param numRows - The number of rows of the new range size.
         * @param numColumns - The number of columns of the new range size.
         */
        getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;
        /**
         *
         * Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".
         *
         * 
         *
         * @param anotherRange - The range object or address or range name.
         */
        getBoundingRect(anotherRange: Range | string): Excel.Range;
        /**
         *
         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid. The returned cell is located relative to the top left cell of the range.
         *
         * 
         *
         * @param row - Row number of the cell to be retrieved. Zero-indexed.
         * @param column - Column number of the cell to be retrieved. Zero-indexed.
         */
        getCell(row: number, column: number): Excel.Range;
        /**
         *
         * Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.
         *
         * 
         *
         * @param cellPropertiesLoadOptions - An object that represents which cell properties to load.
         * @returns A 2D array where each item represents the requested properties of the corresponding cell.
         */
        getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): ClientResult<CellProperties[][]>;
        /**
         *
         * Gets a column contained in the range.
         *
         * 
         *
         * @param column - Column number of the range to be retrieved. Zero-indexed.
         */
        getColumn(column: number): Excel.Range;
        /**
         *
         * Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.  For properties that are not consistent across each cell within a given column, null will be returned.
         *
         * 
         *
         * @param columnPropertiesLoadOptions - An object that represents which column properties to load.
         * @returns An array where each item represents the requested properties of the corresponding column.
         */
        getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): ClientResult<ColumnProperties[]>;
        /**
         *
         * Gets a certain number of columns to the right of the current Range object.
         *
         * 
         *
         * @param count - Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.
         */
        getColumnsAfter(count?: number): Excel.Range;
        /**
         *
         * Gets a certain number of columns to the left of the current Range object.
         *
         * 
         *
         * @param count - Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.
         */
        getColumnsBefore(count?: number): Excel.Range;
        /**
         *
         * Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").
         *
         * 
         */
        getEntireColumn(): Excel.Range;
        /**
         *
         * Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").
         *
         * 
         */
        getEntireRow(): Excel.Range;
        /**
         *
         * Renders the range as a base64-encoded png image.
         *
         * 
         */
        getImage(): ClientResult<string>;
        /**
         *
         * Gets the range object that represents the rectangular intersection of the given ranges.
         *
         * 
         *
         * @param anotherRange - The range object or range address that will be used to determine the intersection of ranges.
         */
        getIntersection(anotherRange: Range | string): Excel.Range;
        /**
         *
         * Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.
         *
         * 
         *
         * @param anotherRange - The range object or range address that will be used to determine the intersection of ranges.
         */
        getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;
        /**
         *
         * Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".
         *
         * 
         */
        getLastCell(): Excel.Range;
        /**
         *
         * Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".
         *
         * 
         */
        getLastColumn(): Excel.Range;
        /**
         *
         * Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".
         *
         * 
         */
        getLastRow(): Excel.Range;
        /**
         *
         * Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.
         *
         * 
         *
         * @param rowOffset - The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.
         * @param columnOffset - The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.
         */
        getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;
        /**
         *
         * Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.
         *
         * 
         *
         * @param deltaRows - The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.
         * @param deltaColumns - The number of columns by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.
         */
        getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;
        /**
         *
         * Gets a row contained in the range.
         *
         * 
         *
         * @param row - Row number of the range to be retrieved. Zero-indexed.
         */
        getRow(row: number): Excel.Range;
        /**
         *
         * Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.  For properties that are not consistent across each cell within a given row, null will be returned.
         *
         * 
         *
         * @param rowPropertiesLoadOptions - An object that represents which row properties to load.
         * @returns An array where each item represents the requested properties of the corresponding row.
         */
        getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): ClientResult<RowProperties[]>;
        /**
         *
         * Gets a certain number of rows above the current Range object.
         *
         * 
         *
         * @param count - Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.
         */
        getRowsAbove(count?: number): Excel.Range;
        /**
         *
         * Gets a certain number of rows below the current Range object.
         *
         * 
         *
         * @param count - Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.
         */
        getRowsBelow(count?: number): Excel.Range;
        /**
         *
         * Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.
            If no special cells are found, an ItemNotFound error will be thrown.
         *
         * 
         *
         * @param cellType - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;
        /**
         *
         * Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.
            If no special cells are found, an ItemNotFound error will be thrown.
         *
         * 
         *
         * @param cellTypeString - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;
        /**
         *
         * Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.
            If no special cells are found, a null object will be returned.
         *
         * 
         *
         * @param cellType - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;
        /**
         *
         * Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.
            If no special cells are found, a null object will be returned.
         *
         * 
         *
         * @param cellTypeString - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;
        /**
         *
         * Returns a Range object that represents the surrounding region for the top-left cell in this range. A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.
         *
         * 
         */
        getSurroundingRegion(): Excel.Range;
        /**
         *
         * Gets a scoped collection of tables that overlap with the range.
         *
         * 
         *
         * @param fullyContained - If true, returns only tables that are fully contained within the range bounds. The default value is false.
         */
        getTables(fullyContained?: boolean): Excel.TableScopedCollection;
        /**
         *
         * Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.
         *
         * 
         *
         * @param valuesOnly - Considers only cells with values as used cells. 
         */
        getUsedRange(valuesOnly?: boolean): Excel.Range;
        /**
         *
         * Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.
         *
         * 
         *
         * @param valuesOnly - Considers only cells with values as used cells.
         */
        getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;
        /**
         *
         * Represents the visible rows of the current range.
         *
         * 
         */
        getVisibleView(): Excel.RangeView;
        /**
         *
         * Groups columns and rows for an outline.
         *
         * 
         *
         * @param groupOption - Specifies how the range can be grouped by rows or columns.
            An `InvalidArgument` error is thrown when the group option differs from the range's
            `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns"
            or `range.isEntireColumn` is true and `groupOption` is "ByRows").
         */
        group(groupOption: Excel.GroupOption): void;
        /**
         *
         * Groups columns and rows for an outline.
         *
         * 
         *
         * @param groupOptionString - Specifies how the range can be grouped by rows or columns.
            An `InvalidArgument` error is thrown when the group option differs from the range's
            `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns"
            or `range.isEntireColumn` is true and `groupOption` is "ByRows").
         */
        group(groupOptionString: "ByRows" | "ByColumns"): void;
        /**
         *
         * Hide details of the row or column group.
         *
         * 
         *
         * @param groupOption - Specifies whether to hide details of grouped rows or grouped columns.
         */
        hideGroupDetails(groupOption: Excel.GroupOption): void;
        /**
         *
         * Hide details of the row or column group.
         *
         * 
         *
         * @param groupOptionString - Specifies whether to hide details of grouped rows or grouped columns.
         */
        hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;
        /**
         *
         * Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.
         *
         * 
         *
         * @param shift - Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.
         */
        insert(shift: Excel.InsertShiftDirection): Excel.Range;
        /**
         *
         * Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.
         *
         * 
         *
         * @param shiftString - Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.
         */
        insert(shiftString: "Down" | "Right"): Excel.Range;
        /**
         *
         * Merge the range cells into one region in the worksheet.
         *
         * 
         *
         * @param across - Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.
         */
        merge(across?: boolean): void;
        /**
         *
         * Moves cell values, formatting, and formulas from current range to the destination range, replacing the old information in those cells.
            The destination range will be expanded automatically if it is smaller than the current range. Any cells in the destination range that are outside of the original range's area are not changed.
         *
         * 
         *
         * @param destinationRange - destinationRange Specifies the range to where the information in this range will be moved.
         */
        moveTo(destinationRange: Range | string): void;
        /**
         *
         * Removes duplicate values from the range specified by the columns.
         *
         * 
         *
         * @param columns - The columns inside the range that may contain duplicates. At least one column needs to be specified. Zero-indexed.
         * @param includesHeader - True if the input data contains header. Default is false.
         * @returns The resulting object that contains the number of rows removed and the number of remaining unique rows.
         */
        removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;
        /**
         *
         * Finds and replaces the given string based on the criteria specified within the current range.
         *
         * 
         *
         * @param text - String to find.
         * @param replacement - String to replace the original with.
         * @param criteria - Additional Replace Criteria.
         * @returns The number of replacements performed.
         */
        replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): ClientResult<number>;
        /**
         *
         * Selects the specified range in the Excel UI.
         *
         * 
         */
        select(): void;
        /**
         *
         * Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.
         *
         * 
         *
         * @param cellPropertiesData - A 2D array that represents which properties to set in each cell.
         */
        setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;
        /**
         *
         * Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.
         *
         * 
         *
         * @param columnPropertiesData - An array that represents which properties to set in each column.
         */
        setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;
        /**
         *
         * Set a range to be recalculated when the next recalculation occurs.
         *
         * 
         */
        setDirty(): void;
        /**
         *
         * Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.
         *
         * 
         *
         * @param rowPropertiesData - An array that represents which properties to set in each row.
         */
        setRowProperties(rowPropertiesData: SettableRowProperties[]): void;
        /**
         *
         * Displays the card for an active cell if it has rich value content.
         *
         * 
         */
        showCard(): void;
        /**
         *
         * Show details of the row or column group.
         *
         * 
         *
         * @param groupOption - Specifies whether to show details of grouped rows or grouped columns.
         */
        showGroupDetails(groupOption: Excel.GroupOption): void;
        /**
         *
         * Show details of the row or column group.
         *
         * 
         *
         * @param groupOptionString - Specifies whether to show details of grouped rows or grouped columns.
         */
        showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;
        /**
         *
         * Ungroups columns and rows for an outline.
         *
         * 
         *
         * @param groupOption - Specifies how the range can be ungrouped by rows or columns.
         */
        ungroup(groupOption: Excel.GroupOption): void;
        /**
         *
         * Ungroups columns and rows for an outline.
         *
         * 
         *
         * @param groupOptionString - Specifies how the range can be ungrouped by rows or columns.
         */
        ungroup(groupOptionString: "ByRows" | "ByColumns"): void;
        /**
         *
         * Unmerge the range cells into separate cells.
         *
         * 
         */
        unmerge(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Range;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for `context.trackedObjects.add(thisObject)`. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        track(): Excel.Range;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for `context.trackedObjects.remove(thisObject)`. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Excel.Range;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a string reference of the form SheetName!A1:B5, or a global or local named range.
     *
     * 
     */
    export interface RangeReference {
        /**
         *
         * Gets or sets the address of the range; for example 'SheetName!A1:B5'.
         *
         * 
         */
        address: string;
    }
    /**
     *
     * Represents the necessary strings to get/set a hyperlink (XHL) object.
     *
     * 
     */
    export interface RangeHyperlink {
        /**
         *
         * Represents the url target for the hyperlink.
         *
         * 
         */
        address?: string;
        /**
         *
         * Represents the document reference target for the hyperlink.
         *
         * 
         */
        documentReference?: string;
        /**
         *
         * Represents the string displayed when hovering over the hyperlink.
         *
         * 
         */
        screenTip?: string;
        /**
         *
         * Represents the string that is displayed in the top left most cell in the range.
         *
         * 
         */
        textToDisplay?: string;
    }
    /**
     *
     * RangeAreas represents a collection of one or more rectangular ranges in the same worksheet.
            To learn how to use discontinguous ranges, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges | Work with multiple ranges simultaneously in Excel add-ins}.
     *
     * 
     */
    export class RangeAreas{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a collection of rectangular ranges that comprise this RangeAreas object.
         *
         * 
         */
        readonly areas: Excel.RangeCollection;
        /**
         *
         * Returns a collection of ConditionalFormats that intersect with any cells in this RangeAreas object. Read-only.
         *
         * 
         */
        readonly conditionalFormats: Excel.ConditionalFormatCollection;
        /**
         *
         * Returns a dataValidation object for all ranges in the RangeAreas.
         *
         * 
         */
        readonly dataValidation: Excel.DataValidation;
        /**
         *
         * Returns a rangeFormat object, encapsulating the the font, fill, borders, alignment, and other properties for all ranges in the RangeAreas object. Read-only.
         *
         * 
         */
        readonly format: Excel.RangeFormat;
        /**
         *
         * Returns the worksheet for the current RangeAreas. Read-only.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Returns the RageAreas reference in A1-style. Address value will contain the worksheet name for each rectangular block of cells (e.g. "Sheet1!A1:B4, Sheet1!D1:D4"). Read-only.
         *
         * 
         */
        readonly address: string;
        /**
         *
         * Returns the RageAreas reference in the user locale. Read-only.
         *
         * 
         */
        readonly addressLocal: string;
        /**
         *
         * Returns the number of rectangular ranges that comprise this RangeAreas object.
         *
         * 
         */
        readonly areaCount: number;
        /**
         *
         * Returns the number of cells in the RangeAreas object, summing up the cell counts of all of the individual rectangular ranges. Returns -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.
         *
         * 
         */
        readonly cellCount: number;
        /**
         *
         * Indicates whether all the ranges on this RangeAreas object represent entire columns (e.g., "A:C, Q:Z"). Read-only.
         *
         * 
         */
        readonly isEntireColumn: boolean;
        /**
         *
         * Indicates whether all the ranges on this RangeAreas object represent entire rows (e.g., "1:3, 5:7"). Read-only.
         *
         * 
         */
        readonly isEntireRow: boolean;
        /**
         *
         * Represents the style for all ranges in this RangeAreas object.
            If the styles of the cells are inconsistent, null will be returned.
            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.
         *
         * 
         */
        style: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeAreas): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeAreas): void;
        /**
         *
         * Calculates all cells in the RangeAreas.
         *
         * 
         */
        calculate(): void;
        /**
         *
         * Clears values, format, fill, border, etc on each of the areas that comprise this RangeAreas object.
         *
         * 
         *
         * @param applyTo - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details. Default is "All".
         */
        clear(applyTo?: Excel.ClearApplyTo): void;
        /**
         *
         * Clears values, format, fill, border, etc on each of the areas that comprise this RangeAreas object.
         *
         * 
         *
         * @param applyToString - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details. Default is "All".
         */
        clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;
        /**
         *
         * Converts all cells in the RangeAreas with datatypes into text.
         *
         * 
         */
        convertDataTypeToText(): void;
        /**
         *
         * Converts all cells in the RangeAreas into linked datatype.
         *
         * 
         *
         * @param serviceID - The Service ID which will be used to query the data.
         * @param languageCulture - Language Culture to query the service for.
         */
        convertToLinkedDataType(serviceID: number, languageCulture: string): void;
        /**
         *
         * Copies cell data or formatting from the source range or RangeAreas to the current RangeAreas.
            The destination rangeAreas can be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is smaller than the source.
         *
         * 
         *
         * @param sourceRange - The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must able to be created by removing full rows or columns from a rectangular range.
         * @param copyType - The type of cell data or formatting to copy over. Default is "All".
         * @param skipBlanks - True if to skip blank cells in the source range or RangeAreas. Default is false.
         * @param transpose - True if to transpose the cells in the destination RangeAreas. Default is false.
         */
        copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;
        /**
         *
         * Copies cell data or formatting from the source range or RangeAreas to the current RangeAreas.
            The destination rangeAreas can be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is smaller than the source.
         *
         * 
         *
         * @param sourceRange - The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must able to be created by removing full rows or columns from a rectangular range.
         * @param copyTypeString - The type of cell data or formatting to copy over. Default is "All".
         * @param skipBlanks - True if to skip blank cells in the source range or RangeAreas. Default is false.
         * @param transpose - True if to transpose the cells in the destination RangeAreas. Default is false.
         */
        copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;
        /**
         *
         * Returns a RangeAreas object that represents the entire columns of the RangeAreas (for example, if the current RangeAreas represents cells "B4:E11, H2", it returns a RangeAreas that represents columns "B:E, H:H").
         *
         * 
         */
        getEntireColumn(): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas object that represents the entire rows of the RangeAreas (for example, if the current RangeAreas represents cells "B4:E11", it returns a RangeAreas that represents rows "4:11").
         *
         * 
         */
        getEntireRow(): Excel.RangeAreas;
        /**
         *
         * Returns the RangeAreas object that represents the intersection of the given ranges or RangeAreas. If no intersection is found, an ItemNotFound error will be thrown.
         *
         * 
         *
         * @param anotherRange - The range, RangeAreas object or range address that will be used to determine the intersection.
         */
        getIntersection(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;
        /**
         *
         * Returns the RangeAreas object that represents the intersection of the given ranges or RangeAreas. If no intersection is found, a null object is returned.
         *
         * 
         *
         * @param anotherRange - The range, RangeAreas, or address that will be used to determine the intersection.
         */
        getIntersectionOrNullObject(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;
        /**
         *
         * Returns an RangeAreas object that is shifted by the specific row and column offset. The dimension of the returned RangeAreas will match the original object. If the resulting RangeAreas is forced outside the bounds of the worksheet grid, an error will be thrown.
         *
         * 
         *
         * @param rowOffset - The number of rows (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values are offset downward, and negative values are offset upward.
         * @param columnOffset - The number of columns (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values are offset to the right, and negative values are offset to the left.
         */
        getOffsetRangeAreas(rowOffset: number, columnOffset: number): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas object that represents all the cells that match the specified type and value. Throws an error if no special cells are found that match the criteria.
         *
         * 
         *
         * @param cellType - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas object that represents all the cells that match the specified type and value. Throws an error if no special cells are found that match the criteria.
         *
         * 
         *
         * @param cellTypeString - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas object that represents all the cells that match the specified type and value. Returns a null object if no special cells are found that match the criteria.
         *
         * 
         *
         * @param cellType - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas object that represents all the cells that match the specified type and value. Returns a null object if no special cells are found that match the criteria.
         *
         * 
         *
         * @param cellTypeString - The type of cells to include.
         * @param cellValueType - If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result. These values can be combined together to return more than one type. The default is to select all constants or formulas, no matter what the type.
         */
        getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;
        /**
         *
         * Returns a scoped collection of tables that overlap with any range in this RangeAreas object.
         *
         * 
         *
         * @param fullyContained - If true, returns only tables that are fully contained within the range bounds. Default is false.
         */
        getTables(fullyContained?: boolean): Excel.TableScopedCollection;
        /**
         *
         * Returns the used RangeAreas that comprises all the used areas of individual rectangular ranges in the RangeAreas object.
            If there are no used cells within the RangeAreas, the ItemNotFound error will be thrown.
         *
         * 
         *
         * @param valuesOnly - Whether to only consider cells with values as used cells. Default is false.
         */
        getUsedRangeAreas(valuesOnly?: boolean): Excel.RangeAreas;
        /**
         *
         * Returns the used RangeAreas that comprises all the used areas of individual rectangular ranges in the RangeAreas object.
            If there are no used cells within the RangeAreas, a null object will be returned.
         *
         * 
         *
         * @param valuesOnly - Whether to only consider cells with values as used cells.
         */
        getUsedRangeAreasOrNullObject(valuesOnly?: boolean): Excel.RangeAreas;
        /**
         *
         * Sets the RangeAreas to be recalculated when the next recalculation occurs.
         *
         * 
         */
        setDirty(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeAreas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeAreas;
        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for `context.trackedObjects.add(thisObject)`. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        track(): Excel.RangeAreas;
        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for `context.trackedObjects.remove(thisObject)`. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
         */
        untrack(): Excel.RangeAreas;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeAreas object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeAreasData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the search criteria to be used.
     *
     * 
     */
    export interface SearchCriteria {
        /**
         *
         * Specifies whether the match needs to be complete or partial.
            A complete match matches the entire contents of the cell. A partial match matches a substring within the content of the cell (e.g., `cat` partially matches `caterpillar` and `scatter`).
            Default is false (partial).
         *
         * 
         */
        completeMatch?: boolean;
        /**
         *
         * Specifies whether the match is case sensitive. Default is false (insensitive).
         *
         * 
         */
        matchCase?: boolean;
        /**
         *
         * Specifies the search direction. Default is forward. See Excel.SearchDirection.
         *
         * 
         */
        searchDirection?: Excel.SearchDirection | "Forward" | "Backwards";
    }
    /**
     *
     * Represents the worksheet search criteria to be used.
     *
     * 
     */
    export interface WorksheetSearchCriteria {
        /**
         *
         * Specifies whether the match needs to be complete or partial.
            A complete match matches the entire contents of the cell. A partial match matches a substring within the content of the cell (e.g., `cat` partially matches `caterpillar` and `scatter`).
            Default is false (partial).
         *
         * 
         */
        completeMatch?: boolean;
        /**
         *
         * Specifies whether the match is case sensitive. Default is false (insensitive).
         *
         * 
         */
        matchCase?: boolean;
    }
    /**
     *
     * Represents the replace criteria to be used.
     *
     * 
     */
    export interface ReplaceCriteria {
        /**
         *
         * Specifies whether the match needs to be complete or partial.
            A complete match matches the entire contents of the cell. A partial match matches a substring within the content of the cell (e.g., `cat` partially matches `caterpillar` and `scatter`).
            Default is false (partial).
         *
         * 
         */
        completeMatch?: boolean;
        /**
         *
         * Specifies whether the match is case sensitive. Default is false (insensitive).
         *
         * 
         */
        matchCase?: boolean;
    }
    /**
     *
     * Specifies which properties to load on the `format.fill` object.
     *
     * 
     */
    export interface CellPropertiesFillLoadOptions {
        /**
         *
         * Specifies whether to load on the `color` property.
         *
         * 
         */
        color?: boolean;
        /**
         *
         * Specifies whether to load on the `pattern` property.
         *
         * 
         */
        pattern?: boolean;
        /**
         *
         * Specifies whether to load on the `patternColor` property.
         *
         * 
         */
        patternColor?: boolean;
        /**
         *
         * Specifies whether to load on the `patternTintAndShade` property.
         *
         * 
         */
        patternTintAndShade?: boolean;
        /**
         *
         * Specifies whether to load on the `tintAndShade` property.
         *
         * 
         */
        tintAndShade?: boolean;
    }
    /**
     *
     * Specifies which properties to load on the `format.font` object.
     *
     * 
     */
    export interface CellPropertiesFontLoadOptions {
        /**
         *
         * Specifies whether to load on the `bold` property.
         *
         * 
         */
        bold?: boolean;
        /**
         *
         * Specifies whether to load on the `color` property.
         *
         * 
         */
        color?: boolean;
        /**
         *
         * Specifies whether to load on the `italic` property.
         *
         * 
         */
        italic?: boolean;
        /**
         *
         * Specifies whether to load on the `name` property.
         *
         * 
         */
        name?: boolean;
        /**
         *
         * Specifies whether to load on the `size` property.
         *
         * 
         */
        size?: boolean;
        /**
         *
         * Specifies whether to load on the `strikethrough` property.
         *
         * 
         */
        strikethrough?: boolean;
        /**
         *
         * Specifies whether to load on the `subscript` property.
         *
         * 
         */
        subscript?: boolean;
        /**
         *
         * Specifies whether to load on the `superscript` property.
         *
         * 
         */
        superscript?: boolean;
        /**
         *
         * Specifies whether to load on the `tintAndShade` property.
         *
         * 
         */
        tintAndShade?: boolean;
        /**
         *
         * Specifies whether to load on the `underline` property.
         *
         * 
         */
        underline?: boolean;
    }
    /**
     *
     * Specifies which properties to load on the `format.borders` object.
     *
     * 
     */
    export interface CellPropertiesBorderLoadOptions {
        /**
         *
         * Specifies whether to load on the `color` property.
         *
         * 
         */
        color?: boolean;
        /**
         *
         * Specifies whether to load on the `style` property.
         *
         * 
         */
        style?: boolean;
        /**
         *
         * Specifies whether to load on the `tintAndShade` property.
         *
         * 
         */
        tintAndShade?: boolean;
        /**
         *
         * Specifies whether to load on the `weight` property.
         *
         * 
         */
        weight?: boolean;
    }
    /**
     *
     * Represents the `format.protection` properties of `getCellProperties`, `getRowProperties`, and `getColumnProperties` or the `format.protection` input parameter of `setCellProperties`, `setRowProperties`, and `setColumnProperties`.
     *
     * 
     */
    export interface CellPropertiesProtection {
        /**
         *
         * Represents the `format.protection.formulaHidden` property.
         *
         * 
         */
        formulaHidden?: boolean;
        /**
         *
         * Represents the `format.protection.locked` property.
         *
         * 
         */
        locked?: boolean;
    }
    /**
     *
     * Represents the `format.fill` properties of `getCellProperties`, `getRowProperties`, and `getColumnProperties` or the `format.fill` input parameter of `setCellProperties`, `setRowProperties`, and `setColumnProperties`.
     *
     * 
     */
    export interface CellPropertiesFill {
        /**
         *
         * Represents the `format.fill.color` property.
         *
         * 
         */
        color?: string;
        /**
         *
         * Represents the `format.fill.pattern` property.
         *
         * 
         */
        pattern?: Excel.FillPattern | "None" | "Solid" | "Gray50" | "Gray75" | "Gray25" | "Horizontal" | "Vertical" | "Down" | "Up" | "Checker" | "SemiGray75" | "LightHorizontal" | "LightVertical" | "LightDown" | "LightUp" | "Grid" | "CrissCross" | "Gray16" | "Gray8" | "LinearGradient" | "RectangularGradient";
        /**
         *
         * Represents the `format.fill.patternColor` property.
         *
         * 
         */
        patternColor?: string;
        /**
         *
         * Represents the `format.fill.patternTintAndShade` property.
         *
         * 
         */
        patternTintAndShade?: number;
        /**
         *
         * Represents the `format.fill.tintAndShade` property.
         *
         * 
         */
        tintAndShade?: number;
    }
    /**
     *
     * Represents the `format.font` properties of `getCellProperties`, `getRowProperties`, and `getColumnProperties` or the `format.font` input parameter of `setCellProperties`, `setRowProperties`, and `setColumnProperties`.
     *
     * 
     */
    export interface CellPropertiesFont {
        /**
         *
         * Represents the `format.font.bold` property.
         *
         * 
         */
        bold?: boolean;
        /**
         *
         * Represents the `format.font.color` property.
         *
         * 
         */
        color?: string;
        /**
         *
         * Represents the `format.font.italic` property.
         *
         * 
         */
        italic?: boolean;
        /**
         *
         * Represents the `format.font.name` property.
         *
         * 
         */
        name?: string;
        /**
         *
         * Represents the `format.font.size` property.
         *
         * 
         */
        size?: number;
        /**
         *
         * Represents the `format.font.strikethrough` property.
         *
         * 
         */
        strikethrough?: boolean;
        /**
         *
         * Represents the `format.font.subscript` property.
         *
         * 
         */
        subscript?: boolean;
        /**
         *
         * Represents the `format.font.superscript` property.
         *
         * 
         */
        superscript?: boolean;
        /**
         *
         * Represents the `format.font.tintAndShade` property.
         *
         * 
         */
        tintAndShade?: number;
        /**
         *
         * Represents the `format.font.underline` property.
         *
         * 
         */
        underline?: Excel.RangeUnderlineStyle | "None" | "Single" | "Double" | "SingleAccountant" | "DoubleAccountant";
    }
    /**
     *
     * Represents the `format.borders` properties of `getCellProperties`, `getRowProperties`, and `getColumnProperties` or the `format.borders` input parameter of `setCellProperties`, `setRowProperties`, and `setColumnProperties`.
     *
     * 
     */
    export interface CellBorderCollection {
        /**
         *
         * Represents the `format.borders.bottom` property.
         *
         * 
         */
        bottom?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.diagonalDown` property.
         *
         * 
         */
        diagonalDown?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.diagonalUp` property.
         *
         * 
         */
        diagonalUp?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.horizontal` property.
         *
         * 
         */
        horizontal?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.left` property.
         *
         * 
         */
        left?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.right` property.
         *
         * 
         */
        right?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.top` property.
         *
         * 
         */
        top?: Excel.CellBorder;
        /**
         *
         * Represents the `format.borders.vertical` property.
         *
         * 
         */
        vertical?: Excel.CellBorder;
    }
    /**
     *
     * Represents the properties of a single border returned by `getCellProperties`, `getRowProperties`, and `getColumnProperties` or the border property input parameter of `setCellProperties`, `setRowProperties`, and `setColumnProperties`.
     *
     * 
     */
    export interface CellBorder {
        /**
         *
         * Represents the `color` property of a single border.
         *
         * 
         */
        color?: string;
        /**
         *
         * Represents the `style` property of a single border.
         *
         * 
         */
        style?: Excel.BorderLineStyle | "None" | "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot" | "Double" | "SlantDashDot";
        /**
         *
         * Represents the `tintAndShade` property of a single border.
         *
         * 
         */
        tintAndShade?: number;
        /**
         *
         * Represents the `weight` property of a single border.
         *
         * 
         */
        weight?: Excel.BorderWeight | "Hairline" | "Thin" | "Medium" | "Thick";
    }
    /**
     *
     * RangeView represents a set of visible cells of the parent range.
     *
     * 
     */
    export class RangeView{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents a collection of range views associated with the range. Read-only.
         *
         * 
         */
        readonly rows: Excel.RangeViewCollection;
        /**
         *
         * Represents the cell addresses of the RangeView. Read-only.
         *
         * 
         */
        readonly cellAddresses: any[][];
        /**
         *
         * Returns the number of visible columns. Read-only.
         *
         * 
         */
        readonly columnCount: number;
        /**
         *
         * Represents the formula in A1-style notation.
         *
         * 
         */
        formulas: any[][];
        /**
         *
         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
         *
         * 
         */
        formulasLocal: any[][];
        /**
         *
         * Represents the formula in R1C1-style notation.
         *
         * 
         */
        formulasR1C1: any[][];
        /**
         *
         * Returns a value that represents the index of the RangeView. Read-only.
         *
         * 
         */
        readonly index: number;
        /**
         *
         * Represents Excel's number format code for the given cell.
         *
         * 
         */
        numberFormat: any[][];
        /**
         *
         * Returns the number of visible rows. Read-only.
         *
         * 
         */
        readonly rowCount: number;
        /**
         *
         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.
         *
         * 
         */
        readonly text: string[][];
        /**
         *
         * Represents the type of data of each cell. Read-only.
         *
         * 
         */
        readonly valueTypes: Excel.RangeValueType[][];
        /**
         *
         * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.
         *
         * 
         */
        values: any[][];
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeView): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeView): void;
        /**
         *
         * Gets the parent range associated with the current RangeView.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeView;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeView;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeView object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeViewData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of RangeView objects.
     *
     * 
     */
    export class RangeViewCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.RangeView[];
        /**
         *
         * Gets the number of RangeView objects in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a RangeView Row via its index. Zero-Indexed.
         *
         * 
         *
         * @param index - Index of the visible row.
         */
        getItemAt(index: number): Excel.RangeView;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeViewCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.RangeViewCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeViewCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to per file and add-in (task-pane or content) combination.
     *
     * 
     */
    export class SettingCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Setting[];
        /**
         *
         * Sets or adds the specified setting to the workbook.
         *
         * 
         *
         * @param key - The Key of the new setting.
         * @param value - The Value for the new setting.
         */
        add(key: string, value: string | number | boolean | Date | Array<any> | any): Excel.Setting;
        /**
         *
         * Gets the number of Settings in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a Setting entry via the key.
         *
         * 
         *
         * @param key - Key of the setting.
         */
        getItem(key: string): Excel.Setting;
        /**
         *
         * Gets a Setting entry via the key. If the Setting does not exist, will return a null object.
         *
         * 
         *
         * @param key - The key of the setting.
         */
        getItemOrNullObject(key: string): Excel.Setting;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SettingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.SettingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SettingCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Setting represents a key-value pair of a setting persisted to the document (per file per add-in). These custom key-value pair can be used to store state or lifecycle information needed by the content or task-pane add-in. Note that settings are persisted in the document and hence it is not a place to store any sensitive or protected information such as user information and password.
     *
     * 
     */
    export class Setting{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        private static DateJSONPrefix;
        private static DateJSONSuffix;
        private static replaceStringDateWithDate;
        /**
         *
         * Returns the key that represents the id of the Setting. Read-only.
         *
         * 
         */
        readonly key: string;
        /**
         *
         * Represents the value stored for this setting.
         *
         * 
         */
        value: any;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Setting): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Setting): void;
        /**
         *
         * Deletes the setting.
         *
         * 
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Setting;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Setting;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Setting object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SettingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * A collection of all the NamedItem objects that are part of the workbook or worksheet, depending on how it was reached.
     *
     * 
     */
    export class NamedItemCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.NamedItem[];
        /**
         *
         * Adds a new name to the collection of the given scope.
         *
         * 
         *
         * @param name - The name of the named item.
         * @param reference - The formula or the range that the name will refer to.
         * @param comment - Optional. The comment associated with the named item.
         * @returns
         */
        add(name: string, reference: Range | string, comment?: string): Excel.NamedItem;
        /**
         *
         * Adds a new name to the collection of the given scope using the user's locale for the formula.
         *
         * 
         *
         * @param name - The "name" of the named item.
         * @param formula - The formula in the user's locale that the name will refer to.
         * @param comment - Optional. The comment associated with the named item.
         * @returns
         */
        addFormulaLocal(name: string, formula: string, comment?: string): Excel.NamedItem;
        /**
         *
         * Gets the number of named items in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a NamedItem object using its name.
         *
         * 
         *
         * @param name - Nameditem name.
         */
        getItem(name: string): Excel.NamedItem;
        /**
         *
         * Gets a NamedItem object using its name. If the nameditem object does not exist, will return a null object.
         *
         * 
         *
         * @param name - Nameditem name.
         */
        getItemOrNullObject(name: string): Excel.NamedItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.NamedItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.NamedItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a defined name for a range of cells or value. Names can be primitive named objects (as seen in the type below), range object, or a reference to a range. This object can be used to obtain range object associated with names.
     *
     * 
     */
    export class NamedItem{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns an object containing values and types of the named item. Read-only.
         *
         * 
         */
        readonly arrayValues: Excel.NamedItemArrayValues;
        /**
         *
         * Returns the worksheet on which the named item is scoped to. Throws an error if the item is scoped to the workbook instead.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Returns the worksheet on which the named item is scoped to. Returns a null object if the item is scoped to the workbook instead.
         *
         * 
         */
        readonly worksheetOrNullObject: Excel.Worksheet;
        /**
         *
         * Represents the comment associated with this name.
         *
         * 
         */
        comment: string;
        /**
         *
         * Gets or sets the formula of the named item.  Formula always starts with a '=' sign.
         *
         * 
         */
        formula: any;
        /**
         *
         * The name of the object. Read-only.
         *
         * 
         */
        readonly name: string;
        /**
         *
         * Indicates whether the name is scoped to the workbook or to a specific worksheet. Possible values are: Worksheet, Workbook. Read-only.
         *
         * 
         */
        readonly scope: Excel.NamedItemScope | "Worksheet" | "Workbook";
        /**
         *
         * Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.
         *
         * 
         */
        readonly type: Excel.NamedItemType | "String" | "Integer" | "Double" | "Boolean" | "Range" | "Error" | "Array";
        /**
         *
         * Represents the value computed by the name's formula. For a named range, will return the range address. Read-only.
         *
         * 
         */
        readonly value: any;
        /**
         *
         * Specifies whether the object is visible or not.
         *
         * 
         */
        visible: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.NamedItem): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.NamedItem): void;
        /**
         *
         * Deletes the given name.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Returns the range object that is associated with the name. Throws an error if the named item's type is not a range.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Returns the range object that is associated with the name. Returns a null object if the named item's type is not a range.
         *
         * 
         */
        getRangeOrNullObject(): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.NamedItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.NamedItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.NamedItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an object containing values and types of a named item.
     *
     * 
     */
    export class NamedItemArrayValues{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the types for each item in the named item array
         *
         * 
         */
        readonly types: Excel.RangeValueType[][];
        /**
         *
         * Represents the values of each item in the named item array.
         *
         * 
         */
        readonly values: any[][];
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.NamedItemArrayValues;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.NamedItemArrayValues;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.NamedItemArrayValues object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemArrayValuesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an Office.js binding that is defined in the workbook.
     *
     * 
     */
    export class Binding{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents binding identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Returns the type of the binding. See Excel.BindingType for details. Read-only.
         *
         * 
         */
        readonly type: Excel.BindingType | "Range" | "Table" | "Text";
        /**
         *
         * Deletes the binding.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Returns the range represented by the binding. Will throw an error if binding is not of the correct type.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Returns the table represented by the binding. Will throw an error if binding is not of the correct type.
         *
         * 
         */
        getTable(): Excel.Table;
        /**
         *
         * Returns the text represented by the binding. Will throw an error if binding is not of the correct type.
         *
         * 
         */
        getText(): ClientResult<string>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Binding;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Binding;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the collection of all the binding objects that are part of the workbook.
     *
     * 
     */
    export class BindingCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Binding[];
        /**
         *
         * Returns the number of bindings in the collection. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Add a new binding to a particular Range.
         *
         * 
         *
         * @param range - Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name
         * @param bindingType - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;
        /**
         *
         * Add a new binding to a particular Range.
         *
         * 
         *
         * @param range - Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name
         * @param bindingTypeString - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;
        /**
         *
         * Add a new binding based on a named item in the workbook.
            If the named item references to multiple areas, the "InvalidReference" error will be returned.
         *
         * 
         *
         * @param name - Name from which to create binding.
         * @param bindingType - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;
        /**
         *
         * Add a new binding based on a named item in the workbook.
            If the named item references to multiple areas, the "InvalidReference" error will be returned.
         *
         * 
         *
         * @param name - Name from which to create binding.
         * @param bindingTypeString - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;
        /**
         *
         * Add a new binding based on the current selection.
            If the selection has multiple areas, the "InvalidReference" error will be returned.
         *
         * 
         *
         * @param bindingType - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;
        /**
         *
         * Add a new binding based on the current selection.
            If the selection has multiple areas, the "InvalidReference" error will be returned.
         *
         * 
         *
         * @param bindingTypeString - Type of binding. See Excel.BindingType.
         * @param id - Name of binding.
         */
        addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;
        /**
         *
         * Gets the number of bindings in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a binding object by ID.
         *
         * 
         *
         * @param id - Id of the binding object to be retrieved.
         */
        getItem(id: string): Excel.Binding;
        /**
         *
         * Gets a binding object based on its position in the items array.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Binding;
        /**
         *
         * Gets a binding object by ID. If the binding object does not exist, will return a null object.
         *
         * 
         *
         * @param id - Id of the binding object to be retrieved.
         */
        getItemOrNullObject(id: string): Excel.Binding;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.BindingCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.BindingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.
     *
     * 
     */
    export class TableCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Table[];
        /**
         *
         * Returns the number of tables in the workbook. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.
         *
         * 
         *
         * @param address - A Range object, or a string address or name of the range representing the data source. If the address does not contain a sheet name, the currently-active sheet is used. 
         * @param hasHeaders - Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.
         */
        add(address: Range | string, hasHeaders: boolean): Excel.Table;
        /**
         *
         * Gets the number of tables in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a table by Name or ID.
         *
         * 
         *
         * @param key - Name or ID of the table to be retrieved.
         */
        getItem(key: string): Excel.Table;
        /**
         *
         * Gets a table based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Table;
        /**
         *
         * Gets a table by Name or ID. If the table does not exist, will return a null object.
         *
         * 
         *
         * @param key - Name or ID of the table to be retrieved.
         */
        getItemOrNullObject(key: string): Excel.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a scoped collection of tables. For each table its top-left corner is considered its anchor location and the tables are sorted top to bottom and then left to right.
     *
     * 
     */
    export class TableScopedCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Table[];
        /**
         *
         * Gets the number of tables in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets the first table in the collection. The tables in the collection are sorted top to bottom and left to right, such that top left table is the first table in the collection.
         *
         * 
         */
        getFirst(): Excel.Table;
        /**
         *
         * Gets a table by Name or ID.
         *
         * 
         *
         * @param key - Name or ID of the table to be retrieved.
         */
        getItem(key: string): Excel.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TableScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableScopedCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents an Excel table.
            To learn more about the table object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables | Work with tables using the Excel JavaScript API}.
     *
     * 
     */
    export class Table{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the AutoFilter object of the table. Read-Only.
         *
         * 
         */
        readonly autoFilter: Excel.AutoFilter;
        /**
         *
         * Represents a collection of all the columns in the table. Read-only.
         *
         * 
         */
        readonly columns: Excel.TableColumnCollection;
        /**
         *
         * Represents a collection of all the rows in the table. Read-only.
         *
         * 
         */
        readonly rows: Excel.TableRowCollection;
        /**
         *
         * Represents the sorting for the table. Read-only.
         *
         * 
         */
        readonly sort: Excel.TableSort;
        /**
         *
         * The worksheet containing the current table. Read-only.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Indicates whether the first column contains special formatting.
         *
         * 
         */
        highlightFirstColumn: boolean;
        /**
         *
         * Indicates whether the last column contains special formatting.
         *
         * 
         */
        highlightLastColumn: boolean;
        /**
         *
         * Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Returns a numeric id.
         *
         * 
         */
        readonly legacyId: string;
        /**
         *
         * The name of the table.
         * When setting the name of the table, you must follow the guidelines specified in the {@link https://support.office.com/article/Rename-an-Excel-table-FBF49A4F-82A3-43EB-8BA2-44D21233B114 | Rename an Excel table} article.
         *
         * 
         */
        name: string;
        /**
         *
         * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
         *
         * 
         */
        showBandedColumns: boolean;
        /**
         *
         * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
         *
         * 
         */
        showBandedRows: boolean;
        /**
         *
         * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
         *
         * 
         */
        showFilterButton: boolean;
        /**
         *
         * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
         *
         * 
         */
        showHeaders: boolean;
        /**
         *
         * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
         *
         * 
         */
        showTotals: boolean;
        /**
         *
         * Constant value that represents the Table style. Possible values are: "TableStyleLight1" through "TableStyleLight21", "TableStyleMedium1" through "TableStyleMedium28", "TableStyleDark1" through "TableStyleDark11". A custom user-defined style present in the workbook can also be specified.
         *
         * 
         */
        style: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Table): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Table): void;
        /**
         *
         * Clears all the filters currently applied on the table.
         *
         * 
         */
        clearFilters(): void;
        /**
         *
         * Converts the table into a normal range of cells. All data is preserved.
         *
         * 
         */
        convertToRange(): Excel.Range;
        /**
         *
         * Deletes the table.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the range object associated with the data body of the table.
         *
         * 
         */
        getDataBodyRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with header row of the table.
         *
         * 
         */
        getHeaderRowRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with the entire table.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with totals row of the table.
         *
         * 
         */
        getTotalRowRange(): Excel.Range;
        /**
         *
         * Reapplies all the filters currently on the table.
         *
         * 
         */
        reapplyFilters(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Table;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Table;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Table object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the columns that are part of the table.
     *
     * 
     */
    export class TableColumnCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.TableColumn[];
        /**
         *
         * Returns the number of columns in the table. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Adds a new column to the table.
         *
         * 
         *
         * @param index - Optional. Specifies the relative position of the new column. If null or -1, the addition happens at the end. Columns with a higher index will be shifted to the side. Zero-indexed.
         * @param values - Optional. A 2-dimensional array of unformatted values of the table column.
         * @param name - Optional. Specifies the name of the new column. If null, the default name will be used.
         */
        add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;
        /**
         *
         * Gets the number of columns in the table.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a column object by Name or ID.
         *
         * 
         *
         * @param key - Column Name or ID.
         */
        getItem(key: number | string): Excel.TableColumn;
        /**
         *
         * Gets a column based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.TableColumn;
        /**
         *
         * Gets a column object by Name or ID. If the column does not exist, will return a null object.
         *
         * 
         *
         * @param key - Column Name or ID.
         */
        getItemOrNullObject(key: number | string): Excel.TableColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableColumnCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TableColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a column in a table.
     *
     * 
     */
    export class TableColumn{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Retrieve the filter applied to the column. Read-only.
         *
         * 
         */
        readonly filter: Excel.Filter;
        /**
         *
         * Returns a unique key that identifies the column within the table. Read-only.
         *
         * 
         */
        readonly id: number;
        /**
         *
         * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.
         *
         * 
         */
        readonly index: number;
        /**
         *
         * Represents the name of the table column.
         *
         * 
         */
        name: string;
        /**
         *
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.
         *
         * 
         */
        values: any[][];
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TableColumn): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TableColumn): void;
        /**
         *
         * Deletes the column from the table.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the range object associated with the data body of the column.
         *
         * 
         */
        getDataBodyRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with the header row of the column.
         *
         * 
         */
        getHeaderRowRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with the entire column.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Gets the range object associated with the totals row of the column.
         *
         * 
         */
        getTotalRowRange(): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableColumn;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TableColumn;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TableColumn object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the rows that are part of the table.
            
             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,
             a TableRow object represent the physical location of the table row, but not the data.
             That is, if the data is sorted or if new rows are added, a table row will continue
             to point at the index for which it was created.
     *
     * 
     */
    export class TableRowCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.TableRow[];
        /**
         *
         * Returns the number of rows in the table. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Adds one or more rows to the table. The return object will be the top of the newly added row(s).
            
             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,
             a TableRow object represent the physical location of the table row, but not the data.
             That is, if the data is sorted or if new rows are added, a table row will continue
             to point at the index for which it was created.
         *
         * 
         *
         * @param index - Optional. Specifies the relative position of the new row. If null or -1, the addition happens at the end. Any rows below the inserted row are shifted downwards. Zero-indexed.
         * @param values - Optional. A 2-dimensional array of unformatted values of the table row.
         */
        add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number): Excel.TableRow;
        /**
         *
         * Gets the number of rows in the table.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a row based on its position in the collection.
            
             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,
             a TableRow object represent the physical location of the table row, but not the data.
             That is, if the data is sorted or if new rows are added, a table row will continue
             to point at the index for which it was created.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.TableRow;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableRowCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TableRowCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a row in a table.
            
             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,
             a TableRow object represent the physical location of the table row, but not the data.
             That is, if the data is sorted or if new rows are added, a table row will continue
             to point at the index for which it was created.
     *
     * 
     */
    export class TableRow{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.
         *
         * 
         */
        readonly index: number;
        /**
         *
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.
         *
         * 
         */
        values: any[][];
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TableRow): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TableRow): void;
        /**
         *
         * Deletes the row from the table.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Returns the range object associated with the entire row.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableRow;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TableRow;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the data validation applied to the current range.
            To learn more about the data validation object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation | Add data validation to Excel ranges}.
     *
     * 
     */
    export class DataValidation{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Error alert when user enters invalid data.
         *
         * 
         */
        errorAlert: Excel.DataValidationErrorAlert;
        /**
         *
         * Ignore blanks: no data validation will be performed on blank cells, it defaults to true.
         *
         * 
         */
        ignoreBlanks: boolean;
        /**
         *
         * Prompt when users select a cell.
         *
         * 
         */
        prompt: Excel.DataValidationPrompt;
        /**
         *
         * Data validation rule that contains different type of data validation criteria.
         *
         * 
         */
        rule: Excel.DataValidationRule;
        /**
         *
         * Type of the data validation, see Excel.DataValidationType for details.
         *
         * 
         */
        readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";
        /**
         *
         * Represents if all cell values are valid according to the data validation rules.
            Returns true if all cell values are valid, or false if all cell values are invalid.
            Returns null if there are both valid and invalid cell values within the range.
         *
         * 
         */
        readonly valid: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.DataValidation): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.DataValidation): void;
        /**
         *
         * Clears the data validation from the current range.
         *
         * 
         */
        clear(): void;
        /**
         *
         * Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values. If all cell values are valid, this function will throw an ItemNotFound error.
         *
         * 
         */
        getInvalidCells(): Excel.RangeAreas;
        /**
         *
         * Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values. If all cell values are valid, this function will return null.
         *
         * 
         */
        getInvalidCellsOrNullObject(): Excel.RangeAreas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.DataValidation;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.DataValidation;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Data validation rule contains different types of data validation. You can only use one of them at a time according the Excel.DataValidationType.
     *
     * 
     */
    export interface DataValidationRule {
        /**
         *
         * Custom data validation criteria.
         *
         * 
         */
        custom?: Excel.CustomDataValidation;
        /**
         *
         * Date data validation criteria.
         *
         * 
         */
        date?: Excel.DateTimeDataValidation;
        /**
         *
         * Decimal data validation criteria.
         *
         * 
         */
        decimal?: Excel.BasicDataValidation;
        /**
         *
         * List data validation criteria.
         *
         * 
         */
        list?: Excel.ListDataValidation;
        /**
         *
         * TextLength data validation criteria.
         *
         * 
         */
        textLength?: Excel.BasicDataValidation;
        /**
         *
         * Time data validation criteria.
         *
         * 
         */
        time?: Excel.DateTimeDataValidation;
        /**
         *
         * WholeNumber data validation criteria.
         *
         * 
         */
        wholeNumber?: Excel.BasicDataValidation;
    }
    /**
     *
     * Represents the results from the removeDuplicates method on range
     *
     * 
     */
    export class RemoveDuplicatesResult{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Number of duplicated rows removed by the operation.
         *
         * 
         */
        readonly removed: number;
        /**
         *
         * Number of remaining unique rows present in the resulting range.
         *
         * 
         */
        readonly uniqueRemaining: number;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RemoveDuplicatesResult;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RemoveDuplicatesResult;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RemoveDuplicatesResult object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RemoveDuplicatesResultData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the Basic Type data validation criteria.
     *
     * 
     */
    export interface BasicDataValidation {
        /**
         *
         * Specifies the right-hand operand when the operator property is set to a binary operator such as GreaterThan (the left-hand operand is the value the user tries to enter in the cell). With the ternary operators Between and NotBetween, specifies the lower bound operand.
            For example, setting formula1 to 10 and operator to GreaterThan means that valid data for the range must be greater than 10.
            When setting the value, it can be passed in as a number, a range object, or a string formula (where the string is either a stringified number, a cell reference like "=A1", or a formula like "=MIN(A1, B1)").
            When retrieving the value, it will always be returned as a string formula, for example: "=10", "=A1", "=SUM(A1:B5)", etc.
         *
         * 
         */
        formula1: string | number | Range;
        /**
         *
         * With the ternary operators Between and NotBetween, specifies the upper bound operand. Is not used with the binary operators, such as GreaterThan.
            When setting the value, it can be passed in as a number, a range object, or a string formula (where the string is either a stringified number, a cell reference like "=A1", or a formula like "=MIN(A1, B1)").
            When retrieving the value, it will always be returned as a string formula, for example: "=10", "=A1", "=SUM(A1:B5)", etc.
         *
         * 
         */
        formula2?: string | number | Range;
        /**
         *
         * The operator to use for validating the data.
         *
         * 
         */
        operator: Excel.DataValidationOperator | "Between" | "NotBetween" | "EqualTo" | "NotEqualTo" | "GreaterThan" | "LessThan" | "GreaterThanOrEqualTo" | "LessThanOrEqualTo";
    }
    /**
     *
     * Represents the Date data validation criteria.
     *
     * 
     */
    export interface DateTimeDataValidation {
        /**
         *
         * Specifies the right-hand operand when the operator property is set to a binary operator such as GreaterThan (the left-hand operand is the value the user tries to enter in the cell). With the ternary operators Between and NotBetween, specifies the lower bound operand.
            When setting the value, it can be passed in as a Date, a Range object, or a string formula (where the string is either a stringified date/time in ISO8601 format, a cell reference like "=A1", or a formula like "=MIN(A1, B1)").
            When retrieving the value, it will always be returned as a string formula, for example: "=10", "=A1", "=SUM(A1:B5)", etc.
         *
         * 
         */
        formula1: string | Date | Range;
        /**
         *
         * With the ternary operators Between and NotBetween, specifies the upper bound operand. Is not used with the binary operators, such as GreaterThan.
            When setting the value, it can be passed in as a Date, a Range object, or a string (where the string is either a stringified date/time in ISO8601 format, a cell reference like "=A1", or a formula like "=MIN(A1, B1)").
            When retrieving the value, it will always be returned as a string formula, for example: "=10", "=A1", "=SUM(A1:B5)", etc.
         *
         * 
         */
        formula2?: string | Date | Range;
        /**
         *
         * The operator to use for validating the data.
         *
         * 
         */
        operator: Excel.DataValidationOperator | "Between" | "NotBetween" | "EqualTo" | "NotEqualTo" | "GreaterThan" | "LessThan" | "GreaterThanOrEqualTo" | "LessThanOrEqualTo";
    }
    /**
     *
     * Represents the List data validation criteria.
     *
     * 
     */
    export interface ListDataValidation {
        /**
         *
         * Displays the list in cell drop down or not, it defaults to true.
         *
         * 
         */
        inCellDropDown: boolean;
        /**
         *
         * Source of the list for data validation
            When setting the value, it can be passed in as a Excel Range object, or a string that contains comma separated number, boolean or date.
         *
         * 
         */
        source: string | Range;
    }
    /**
     *
     * Represents the Custom data validation criteria.
     *
     * 
     */
    export interface CustomDataValidation {
        /**
         *
         * A custom data validation formula. This creates special input rules, such as preventing duplicates, or limiting the total in a range of cells.
         *
         * 
         */
        formula: string;
    }
    /**
     *
     * Represents the error alert properties for the data validation.
     *
     * 
     */
    export interface DataValidationErrorAlert {
        /**
         *
         * Represents error alert message.
         *
         * 
         */
        message: string;
        /**
         *
         * Determines whether to show an error alert dialog or not when a user enters invalid data. The default is true.
         *
         * 
         */
        showAlert: boolean;
        /**
         *
         * Represents data validation alert type, please see Excel.DataValidationAlertStyle for details.
         *
         * 
         */
        style: Excel.DataValidationAlertStyle | "Stop" | "Warning" | "Information";
        /**
         *
         * Represents error alert dialog title.
         *
         * 
         */
        title: string;
    }
    /**
     *
     * Represents the user prompt properties for the data validation.
     *
     * 
     */
    export interface DataValidationPrompt {
        /**
         *
         * Represents the message of the prompt.
         *
         * 
         */
        message: string;
        /**
         *
         * Determines whether or not to show the prompt when user selects a cell with data validation.
         *
         * 
         */
        showPrompt: boolean;
        /**
         *
         * Represents the title for the prompt.
         *
         * 
         */
        title: string;
    }
    /**
     *
     * A format object encapsulating the range's font, fill, borders, alignment, and other properties.
     *
     * 
     */
    export class RangeFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Collection of border objects that apply to the overall range. Read-only.
         *
         * 
         */
        readonly borders: Excel.RangeBorderCollection;
        /**
         *
         * Returns the fill object defined on the overall range. Read-only.
         *
         * 
         */
        readonly fill: Excel.RangeFill;
        /**
         *
         * Returns the font object defined on the overall range. Read-only.
         *
         * 
         */
        readonly font: Excel.RangeFont;
        /**
         *
         * Returns the format protection object for a range. Read-only.
         *
         * 
         */
        readonly protection: Excel.FormatProtection;
        /**
         *
         * Indicates if text is automatically indented when text alignment is set to equal distribution.
         *
         * 
         */
        autoIndent: boolean;
        /**
         *
         * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.
         *
         * 
         */
        columnWidth: number;
        /**
         *
         * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.
         *
         * 
         */
        horizontalAlignment: Excel.HorizontalAlignment | "General" | "Left" | "Center" | "Right" | "Fill" | "Justify" | "CenterAcrossSelection" | "Distributed";
        /**
         *
         * An integer from 0 to 250 that indicates the indent level.
         *
         * 
         */
        indentLevel: number;
        /**
         *
         * The reading order for the range.
         *
         * 
         */
        readingOrder: Excel.ReadingOrder | "Context" | "LeftToRight" | "RightToLeft";
        /**
         *
         * Gets or sets the height of all rows in the range. If the row heights are not uniform, null will be returned.
         *
         * 
         */
        rowHeight: number;
        /**
         *
         * Indicates if text automatically shrinks to fit in the available column width.
         *
         * 
         */
        shrinkToFit: boolean;
        /**
         *
         * Gets or sets the text orientation of all the cells within the range.
            The text orientation should be an integer either from -90 to 90, or 180 for vertically-oriented text.
            If the orientation within a range are not uniform, then null will be returned.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Determines if the row height of the Range object equals the standard height of the sheet.
            Returns True if the row height of the Range object equals the standard height of the sheet.
            Returns Null if the range contains more than one row and the rows aren't all the same height.
            Returns False otherwise.
         *
         * 
         */
        useStandardHeight: boolean;
        /**
         *
         * Indicates whether the column width of the Range object equals the standard width of the sheet.
            Returns True if the column width of the Range object equals the standard width of the sheet.
            Returns Null if the range contains more than one column and the columns aren't all the same height.
            Returns False otherwise.
         *
         * 
         */
        useStandardWidth: boolean;
        /**
         *
         * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.
         *
         * 
         */
        verticalAlignment: Excel.VerticalAlignment | "Top" | "Center" | "Bottom" | "Justify" | "Distributed";
        /**
         *
         * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting
         *
         * 
         */
        wrapText: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeFormat): void;
        /**
         *
         * Adjusts the indentation of the range formatting. The indent value ranges from 0 to 250 and is measured in characters..
         *
         * 
         *
         * @param amount - The number of character spaces by which the current indent is adjusted. This value should be between -250 and 250.
            **Note**: If the amount would raise the indent level above 250, the indent level stays with 250.
            Similarly, if the amount would lower the indent level below 0, the indent level stays 0.
         */
        adjustIndent(amount: number): void;
        /**
         *
         * Changes the width of the columns of the current range to achieve the best fit, based on the current data in the columns.
         *
         * 
         */
        autofitColumns(): void;
        /**
         *
         * Changes the height of the rows of the current range to achieve the best fit, based on the current data in the columns.
         *
         * 
         */
        autofitRows(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the format protection of a range object.
     *
     * 
     */
    export class FormatProtection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.
         *
         * 
         */
        formulaHidden: boolean;
        /**
         *
         * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.
         *
         * 
         */
        locked: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.FormatProtection): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.FormatProtection): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.FormatProtection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.FormatProtection;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.FormatProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FormatProtectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the background of a range object.
     *
     * 
     */
    export class RangeFill{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the background, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange")
         *
         * 
         */
        color: string;
        /**
         *
         * Gets or sets the pattern of a Range. See Excel.FillPattern for details. LinearGradient and RectangularGradient are not supported.
            A null value indicates that the entire range doesn't have uniform pattern setting.
         *
         * 
         */
        pattern: Excel.FillPattern | "None" | "Solid" | "Gray50" | "Gray75" | "Gray25" | "Horizontal" | "Vertical" | "Down" | "Up" | "Checker" | "SemiGray75" | "LightHorizontal" | "LightVertical" | "LightDown" | "LightUp" | "Grid" | "CrissCross" | "Gray16" | "Gray8" | "LinearGradient" | "RectangularGradient";
        /**
         *
         * Sets HTML color code representing the color of the Range pattern, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
            Gets HTML color code representing the color of the Range pattern, of the form #RRGGBB (e.g. "FFA500").
         *
         * 
         */
        patternColor: string;
        /**
         *
         * Returns or sets a double that lightens or darkens a pattern color for Range Fill, the value is between -1 (darkest) and 1 (brightest), with 0 for the original color.
            If the pattern tintAndShades are not uniform, null will be returned.
         *
         * 
         */
        patternTintAndShade: number;
        /**
         *
         * Returns or sets a double that lightens or darkens a color for Range Fill, the value is between -1 (darkest) and 1 (brightest), with 0 for the original color.
            If the tintAndShades are not uniform, null will be returned.
         *
         * 
         */
        tintAndShade: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeFill): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeFill): void;
        /**
         *
         * Resets the range background.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeFill;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeFill;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFillData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the border of an object.
     *
     * 
     */
    export class RangeBorder{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        color: string;
        /**
         *
         * Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.
         *
         * 
         */
        readonly sideIndex: Excel.BorderIndex | "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp";
        /**
         *
         * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.
         *
         * 
         */
        style: Excel.BorderLineStyle | "None" | "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot" | "Double" | "SlantDashDot";
        /**
         *
         * Returns or sets a double that lightens or darkens a color for Range Border, the value is between -1 (darkest) and 1 (brightest), with 0 for the original color.
            A null value indicates that the border doesn't have uniform tintAndShade setting.
         *
         * 
         */
        tintAndShade: number;
        /**
         *
         * Specifies the weight of the border around a range. See Excel.BorderWeight for details.
         *
         * 
         */
        weight: Excel.BorderWeight | "Hairline" | "Thin" | "Medium" | "Thick";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeBorder): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeBorder): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeBorder;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeBorderData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the border objects that make up the range border.
     *
     * 
     */
    export class RangeBorderCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.RangeBorder[];
        /**
         *
         * Number of border objects in the collection. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Returns or sets a double that lightens or darkens a color for Range Borders, the value is between -1 (darkest) and 1 (brightest), with 0 for the original color.
            A null value indicates that the entire border collections don't have uniform tintAndShade setting.
         *
         * 
         */
        tintAndShade: number;
        /**
         *
         * Gets a border object using its name.
         *
         * 
         *
         * @param index - Index value of the border object to be retrieved. See Excel.BorderIndex for details.
         */
        getItem(index: Excel.BorderIndex): Excel.RangeBorder;
        /**
         *
         * Gets a border object using its name.
         *
         * 
         *
         * @param indexString - Index value of the border object to be retrieved. See Excel.BorderIndex for details.
         */
        getItem(indexString: "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp"): Excel.RangeBorder;
        /**
         *
         * Gets a border object using its index.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.RangeBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeBorderCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.RangeBorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeBorderCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * This object represents the font attributes (font name, font size, color, etc.) for an object.
     *
     * 
     */
    export class RangeFont{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the bold status of font.
         *
         * 
         */
        bold: boolean;
        /**
         *
         * HTML color code representation of the text color. E.g. #FF0000 represents Red.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the italic status of the font.
         *
         * 
         */
        italic: boolean;
        /**
         *
         * Font name (e.g. "Calibri")
         *
         * 
         */
        name: string;
        /**
         *
         * Font size.
         *
         * 
         */
        size: number;
        /**
         *
         * Represents the strikethrough status of font. A null value indicates that the entire range doesn't have uniform Strikethrough setting.
         *
         * 
         */
        strikethrough: boolean;
        /**
         *
         * Represents the Subscript status of font.
            Returns True if all the fonts of the range are Subscript.
            Returns False if all the fonts of the range are Superscript or normal (neither Superscript, nor Subscript).
            Returns Null otherwise.
         *
         * 
         */
        subscript: boolean;
        /**
         *
         * Represents the Superscript status of font.
            Returns True if all the fonts of the range are Superscript.
            Returns False if all the fonts of the range are Subscript or normal (neither Superscript, nor Subscript).
            Returns Null otherwise.
         *
         * 
         */
        superscript: boolean;
        /**
         *
         * Returns or sets a double that lightens or darkens a color for Range Font, the value is between -1 (darkest) and 1 (brightest), with 0 for the original color.
            A null value indicates that the entire range doesn't have uniform font tintAndShade setting.
         *
         * 
         */
        tintAndShade: number;
        /**
         *
         * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.
         *
         * 
         */
        underline: Excel.RangeUnderlineStyle | "None" | "Single" | "Double" | "SingleAccountant" | "DoubleAccountant";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RangeFont): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RangeFont): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeFont;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RangeFont;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFontData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * A collection of all the chart objects on a worksheet.
     *
     * 
     */
    export class ChartCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Chart[];
        /**
         *
         * Returns the number of charts in the worksheet. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Creates a new chart.
         *
         * 
         *
         * @param type - Represents the type of a chart. See Excel.ChartType for details.
         * @param sourceData - The Range object corresponding to the source data.
         * @param seriesBy - Optional. Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy for details.
         */
        add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;
        /**
         *
         * Creates a new chart.
         *
         * 
         *
         * @param typeString - Represents the type of a chart. See Excel.ChartType for details.
         * @param sourceData - The Range object corresponding to the source data.
         * @param seriesBy - Optional. Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy for details.
         */
        add(typeString: "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel", sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): Excel.Chart;
        /**
         *
         * Returns the number of charts in the worksheet.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.
         *
         * 
         *
         * @param name - Name of the chart to be retrieved.
         */
        getItem(name: string): Excel.Chart;
        /**
         *
         * Gets a chart based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Chart;
        /**
         *
         * Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.
            If the chart does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the chart to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.Chart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ChartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a chart object in a workbook.
            To learn more about the Chart object model, see {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-charts | Work with charts using the Excel JavaScript API}.
     *
     * 
     */
    export class Chart{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents chart axes. Read-only.
         *
         * 
         */
        readonly axes: Excel.ChartAxes;
        /**
         *
         * Represents the datalabels on the chart. Read-only.
         *
         * 
         */
        readonly dataLabels: Excel.ChartDataLabels;
        /**
         *
         * Encapsulates the format properties for the chart area. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartAreaFormat;
        /**
         *
         * Represents the legend for the chart. Read-only.
         *
         * 
         */
        readonly legend: Excel.ChartLegend;
        /**
         *
         * Encapsulates the options for a pivot chart. Read-only.
         *
         * 
         */
        readonly pivotOptions: Excel.ChartPivotOptions;
        /**
         *
         * Represents the plotArea for the chart.
         *
         * 
         */
        readonly plotArea: Excel.ChartPlotArea;
        /**
         *
         * Represents either a single series or collection of series in the chart. Read-only.
         *
         * 
         */
        readonly series: Excel.ChartSeriesCollection;
        /**
         *
         * Represents the title of the specified chart, including the text, visibility, position, and formatting of the title. Read-only.
         *
         * 
         */
        readonly title: Excel.ChartTitle;
        /**
         *
         * The worksheet containing the current chart. Read-only.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Returns or sets a ChartCategoryLabelLevel enumeration constant referring to
            the level of where the category labels are being sourced from. Read/Write.
         *
         * 
         */
        categoryLabelLevel: number;
        /**
         *
         * Represents the type of the chart. See Excel.ChartType for details.
         *
         * 
         */
        chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";
        /**
         *
         * Returns or sets the way that blank cells are plotted on a chart. Read/Write.
         *
         * 
         */
        displayBlanksAs: Excel.ChartDisplayBlanksAs | "NotPlotted" | "Zero" | "Interplotted";
        /**
         *
         * Represents the height, in points, of the chart object.
         *
         * 
         */
        height: number;
        /**
         *
         * The unique id of chart. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * The distance, in points, from the left side of the chart to the worksheet origin.
         *
         * 
         */
        left: number;
        /**
         *
         * Represents the name of a chart object.
         *
         * 
         */
        name: string;
        /**
         *
         * Returns or sets the way columns or rows are used as data series on the chart. Read/Write.
         *
         * 
         */
        plotBy: Excel.ChartPlotBy | "Rows" | "Columns";
        /**
         *
         * True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.
         *
         * 
         */
        plotVisibleOnly: boolean;
        /**
         *
         * Returns or sets a ChartSeriesNameLevel enumeration constant referring to
            the level of where the series names are being sourced from. Read/Write.
         *
         * 
         */
        seriesNameLevel: number;
        /**
         *
         * Represents whether to display all field buttons on a PivotChart.
         *
         * 
         */
        showAllFieldButtons: boolean;
        /**
         *
         * Represents whether to show the data labels when the value is greater than the maximum value on the value axis.
            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.
            This property applies to 2-D charts only.
         *
         * 
         */
        showDataLabelsOverMaximum: boolean;
        /**
         *
         * Returns or sets the chart style for the chart. Read/Write.
         *
         * 
         */
        style: number;
        /**
         *
         * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the width, in points, of the chart object.
         *
         * 
         */
        width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Chart): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Chart): void;
        /**
         *
         * Activates the chart in the Excel UI.
         *
         * 
         */
        activate(): void;
        /**
         *
         * Deletes the chart object.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
            The aspect ratio is preserved as part of the resizing.
         *
         * 
         *
         * @param height - (Optional) The desired height of the resulting image.
         * @param width - (Optional) The desired width of the resulting image.
         * @param fittingMode - (Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set).
         */
        getImage(width?: number, height?: number, fittingMode?: Excel.ImageFittingMode): ClientResult<string>;
        /**
         *
         * Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
            The aspect ratio is preserved as part of the resizing.
         *
         * 
         *
         * @param height - (Optional) The desired height of the resulting image.
         * @param width - (Optional) The desired width of the resulting image.
         * @param fittingModeString - (Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set).
         */
        getImage(width?: number, height?: number, fittingModeString?: "Fit" | "FitAndCenter" | "Fill"): ClientResult<string>;
        /**
         *
         * Resets the source data for the chart.
         *
         * 
         *
         * @param sourceData - The range object corresponding to the source data.
         * @param seriesBy - Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, and Columns. See Excel.ChartSeriesBy for details.
         */
        setData(sourceData: Range, seriesBy?: Excel.ChartSeriesBy): void;
        /**
         *
         * Resets the source data for the chart.
         *
         * 
         *
         * @param sourceData - The range object corresponding to the source data.
         * @param seriesByString - Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, and Columns. See Excel.ChartSeriesBy for details.
         */
        setData(sourceData: Range, seriesByString?: "Auto" | "Columns" | "Rows"): void;
        /**
         *
         * Positions the chart relative to cells on the worksheet.
         *
         * 
         *
         * @param startCell - The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell, depending on the user's right-to-left display settings.
         * @param endCell - (Optional) The end cell. If specified, the chart's width and height will be set to fully cover up this cell/range.
         */
        setPosition(startCell: Range | string, endCell?: Range | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Chart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Chart;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Chart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the options for the pivot chart.
     *
     * 
     */
    export class ChartPivotOptions{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Specifies whether or not to display the axis field buttons on a PivotChart. The ShowAxisFieldButtons property corresponds to the "Show Axis Field Buttons" command on the "Field Buttons" drop-down list of the "Analyze" tab, which is available when a PivotChart is selected.
         *
         * 
         */
        showAxisFieldButtons: boolean;
        /**
         *
         * Specifies whether or not to display the legend field buttons on a PivotChart.
         *
         * 
         */
        showLegendFieldButtons: boolean;
        /**
         *
         * Specifies whether or not to display the report filter field buttons on a PivotChart.
         *
         * 
         */
        showReportFilterFieldButtons: boolean;
        /**
         *
         * Specifies whether or not to display the show value field buttons on a PivotChart.
         *
         * 
         */
        showValueFieldButtons: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartPivotOptions): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartPivotOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPivotOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartPivotOptions;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartPivotOptions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPivotOptionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for the overall chart area.
     *
     * 
     */
    export class ChartAreaFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format of chart area, which includes color, linestyle, and weight. Read-only.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of an object, which includes background formatting information. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /**
         *
         * Returns or sets color scheme of the chart. Read/Write.
         *
         * 
         */
        colorScheme: Excel.ChartColorScheme | "ColorfulPalette1" | "ColorfulPalette2" | "ColorfulPalette3" | "ColorfulPalette4" | "MonochromaticPalette1" | "MonochromaticPalette2" | "MonochromaticPalette3" | "MonochromaticPalette4" | "MonochromaticPalette5" | "MonochromaticPalette6" | "MonochromaticPalette7" | "MonochromaticPalette8" | "MonochromaticPalette9" | "MonochromaticPalette10" | "MonochromaticPalette11" | "MonochromaticPalette12" | "MonochromaticPalette13";
        /**
         *
         * Specifies whether or not chart area of the chart has rounded corners. Read/Write.
         *
         * 
         */
        roundedCorners: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAreaFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAreaFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAreaFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAreaFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAreaFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAreaFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of chart series.
     *
     * 
     */
    export class ChartSeriesCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ChartSeries[];
        /**
         *
         * Returns the number of series in the collection. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Add a new series to the collection. The new added series is not visible until set values/x axis values/bubble sizes for it (depending on chart type).
         *
         * 
         *
         * @param name - Optional. Name of the series.
         * @param index - Optional. Index value of the series to be added. Zero-indexed.
         */
        add(name?: string, index?: number): Excel.ChartSeries;
        /**
         *
         * Returns the number of series in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Retrieves a series based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.ChartSeries;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartSeriesCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ChartSeriesCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a series in a chart.
     *
     * 
     */
    export class ChartSeries{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Encapsulates the bin options for histogram charts and pareto charts. Read-only.
         *
         * 
         */
        readonly binOptions: Excel.ChartBinOptions;
        /**
         *
         * Encapsulates the options for the box and whisker charts. Read-only.
         *
         * 
         */
        readonly boxwhiskerOptions: Excel.ChartBoxwhiskerOptions;
        /**
         *
         * Represents a collection of all dataLabels in the series.
         *
         * 
         */
        readonly dataLabels: Excel.ChartDataLabels;
        /**
         *
         * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartSeriesFormat;
        /**
         *
         * Encapsulates the options for a region map chart. Read-only.
         *
         * 
         */
        readonly mapOptions: Excel.ChartMapOptions;
        /**
         *
         * Represents a collection of all points in the series. Read-only.
         *
         * 
         */
        readonly points: Excel.ChartPointsCollection;
        /**
         *
         * Represents a collection of trendlines in the series. Read-only.
         *
         * 
         */
        readonly trendlines: Excel.ChartTrendlineCollection;
        /**
         *
         * Represents the error bar object of a chart series.
         *
         * 
         */
        readonly xErrorBars: Excel.ChartErrorBars;
        /**
         *
         * Represents the error bar object of a chart series.
         *
         * 
         */
        readonly yErrorBars: Excel.ChartErrorBars;
        /**
         *
         * Returns or sets the group for the specified series. Read/Write
         *
         * 
         */
        axisGroup: Excel.ChartAxisGroup | "Primary" | "Secondary";
        /**
         *
         * This can be an integer value from 0 (zero) to 300, representing the percentage of the default size. This property only applies to bubble charts. Read/Write.
         *
         * 
         */
        bubbleScale: number;
        /**
         *
         * Represents the chart type of a series. See Excel.ChartType for details.
         *
         * 
         */
        chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";
        /**
         *
         * Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.
            Throws an invalid argument exception on invalid charts.
         *
         * 
         */
        doughnutHoleSize: number;
        /**
         *
         * Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.
         *
         * 
         */
        explosion: number;
        /**
         *
         * Boolean value representing if the series is filtered or not. Not applicable for surface charts.
         *
         * 
         */
        filtered: boolean;
        /**
         *
         * Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write
         *
         * 
         */
        firstSliceAngle: number;
        /**
         *
         * Represents the gap width of a chart series.  Only valid on bar and column charts, as well as
            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.
         *
         * 
         */
        gapWidth: number;
        /**
         *
         * Returns or sets the color for maximum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMaximumColor: string;
        /**
         *
         * Returns or sets the type for maximum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMaximumType: Excel.ChartGradientStyleType | "ExtremeValue" | "Number" | "Percent";
        /**
         *
         * Returns or sets the maximum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMaximumValue: number;
        /**
         *
         * Returns or sets the color for midpoint value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMidpointColor: string;
        /**
         *
         * Returns or sets the type for midpoint value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMidpointType: Excel.ChartGradientStyleType | "ExtremeValue" | "Number" | "Percent";
        /**
         *
         * Returns or sets the midpoint value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMidpointValue: number;
        /**
         *
         * Returns or sets the color for minimum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMinimumColor: string;
        /**
         *
         * Returns or sets the type for minimum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMinimumType: Excel.ChartGradientStyleType | "ExtremeValue" | "Number" | "Percent";
        /**
         *
         * Returns or sets the minimum value of a region map chart series. Read/Write.
         *
         * 
         */
        gradientMinimumValue: number;
        /**
         *
         * Returns or sets series gradient style of a region map chart. Read/Write.
         *
         * 
         */
        gradientStyle: Excel.ChartGradientStyle | "TwoPhaseColor" | "ThreePhaseColor";
        /**
         *
         * Boolean value representing if the series has data labels or not.
         *
         * 
         */
        hasDataLabels: boolean;
        /**
         *
         * Returns or sets the fill color for negative data points in a series. Read/Write.
         *
         * 
         */
        invertColor: string;
        /**
         *
         * True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.
         *
         * 
         */
        invertIfNegative: boolean;
        /**
         *
         * Represents markers background color of a chart series.
         *
         * 
         */
        markerBackgroundColor: string;
        /**
         *
         * Represents markers foreground color of a chart series.
         *
         * 
         */
        markerForegroundColor: string;
        /**
         *
         * Represents marker size of a chart series.
         *
         * 
         */
        markerSize: number;
        /**
         *
         * Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.
         *
         * 
         */
        markerStyle: Excel.ChartMarkerStyle | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X" | "Star" | "Dot" | "Dash" | "Circle" | "Plus" | "Picture";
        /**
         *
         * Represents the name of a series in a chart.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.
         *
         * 
         */
        overlap: number;
        /**
         *
         * Returns or sets the series parent label strategy area for a treemap chart. Read/Write.
         *
         * 
         */
        parentLabelStrategy: Excel.ChartParentLabelStrategy | "None" | "Banner" | "Overlapping";
        /**
         *
         * Represents the plot order of a chart series within the chart group.
         *
         * 
         */
        plotOrder: number;
        /**
         *
         * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.
         *
         * 
         */
        secondPlotSize: number;
        /**
         *
         * Specifies whether or not connector lines are shown in waterfall charts. Read/Write.
         *
         * 
         */
        showConnectorLines: boolean;
        /**
         *
         * Specifies whether or not leader lines are displayed for each data label in the series. Read/Write.
         *
         * 
         */
        showLeaderLines: boolean;
        /**
         *
         * Boolean value representing if the series has a shadow or not.
         *
         * 
         */
        showShadow: boolean;
        /**
         *
         * Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.
         *
         * 
         */
        smooth: boolean;
        /**
         *
         * Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.
         *
         * 
         */
        splitType: Excel.ChartSplitType | "SplitByPosition" | "SplitByValue" | "SplitByPercentValue" | "SplitByCustomSplit";
        /**
         *
         * Returns or sets the threshold value that separates two sections of either a pie-of-pie chart or a bar-of-pie chart. Read/Write.
         *
         * 
         */
        splitValue: number;
        /**
         *
         * True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.
         *
         * 
         */
        varyByCategories: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartSeries): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartSeries): void;
        /**
         *
         * Deletes the chart series.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Set bubble sizes for a chart series. Only works for bubble charts.
         *
         * 
         *
         * @param sourceData - The Range object corresponding to the source data.
         */
        setBubbleSizes(sourceData: Range): void;
        /**
         *
         * Set values for a chart series. For scatter chart, it means Y axis values.
         *
         * 
         *
         * @param sourceData - The Range object corresponding to the source data.
         */
        setValues(sourceData: Range): void;
        /**
         *
         * Set values of X axis for a chart series. Only works for scatter charts.
         *
         * 
         *
         * @param sourceData - The Range object corresponding to the source data.
         */
        setXAxisValues(sourceData: Range): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartSeries;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartSeries;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartSeries object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for the chart series
     *
     * 
     */
    export class ChartSeriesFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the fill format of a chart series, which includes background formatting information. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents line formatting. Read-only.
         *
         * 
         */
        readonly line: Excel.ChartLineFormat;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartSeriesFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartSeriesFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartSeriesFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartSeriesFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartSeriesFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * A collection of all the chart points within a series inside a chart.
     *
     * 
     */
    export class ChartPointsCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ChartPoint[];
        /**
         *
         * Returns the number of chart points in the series. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Returns the number of chart points in the series.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Retrieve a point based on its position within the series.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.ChartPoint;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPointsCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ChartPointsCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointsCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a point of a series in a chart.
     *
     * 
     */
    export class ChartPoint{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the data label of a chart point. Read-only.
         *
         * 
         */
        readonly dataLabel: Excel.ChartDataLabel;
        /**
         *
         * Encapsulates the format properties chart point. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartPointFormat;
        /**
         *
         * Represents whether a data point has a data label. Not applicable for surface charts.
         *
         * 
         */
        hasDataLabel: boolean;
        /**
         *
         * HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.
         *
         * 
         */
        markerBackgroundColor: string;
        /**
         *
         * HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.
         *
         * 
         */
        markerForegroundColor: string;
        /**
         *
         * Represents marker size of data point.
         *
         * 
         */
        markerSize: number;
        /**
         *
         * Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.
         *
         * 
         */
        markerStyle: Excel.ChartMarkerStyle | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X" | "Star" | "Dot" | "Dash" | "Circle" | "Plus" | "Picture";
        /**
         *
         * Returns the value of a chart point. Read-only.
         *
         * 
         */
        readonly value: any;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartPoint): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartPoint): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPoint;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartPoint;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartPoint object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents formatting object for chart points.
     *
     * 
     */
    export class ChartPointFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format of a chart data point, which includes color, style, and weight information. Read-only.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of a chart, which includes background formatting information. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartPointFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartPointFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPointFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartPointFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartPointFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the chart axes.
     *
     * 
     */
    export class ChartAxes{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the category axis in a chart. Read-only.
         *
         * 
         */
        readonly categoryAxis: Excel.ChartAxis;
        /**
         *
         * Represents the series axis of a 3-dimensional chart. Read-only.
         *
         * 
         */
        readonly seriesAxis: Excel.ChartAxis;
        /**
         *
         * Represents the value axis in an axis. Read-only.
         *
         * 
         */
        readonly valueAxis: Excel.ChartAxis;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAxes): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAxes): void;
        /**
         *
         * Returns the specific axis identified by type and group.
         *
         * 
         *
         * @param type - Specifies the axis type. See Excel.ChartAxisType for details.
         * @param group - Optional. Specifies the axis group. See Excel.ChartAxisGroup for details.
         */
        getItem(type: Excel.ChartAxisType, group?: Excel.ChartAxisGroup): Excel.ChartAxis;
        /**
         *
         * Returns the specific axis identified by type and group.
         *
         * 
         *
         * @param typeString - Specifies the axis type. See Excel.ChartAxisType for details.
         * @param group - Optional. Specifies the axis group. See Excel.ChartAxisGroup for details.
         */
        getItem(typeString: "Invalid" | "Category" | "Value" | "Series", group?: "Primary" | "Secondary"): Excel.ChartAxis;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAxes;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAxes;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAxes object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a single axis in a chart.
     *
     * 
     */
    export class ChartAxis{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of a chart object, which includes line and font formatting. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartAxisFormat;
        /**
         *
         * Returns a Gridlines object that represents the major gridlines for the specified axis. Read-only.
         *
         * 
         */
        readonly majorGridlines: Excel.ChartGridlines;
        /**
         *
         * Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
         *
         * 
         */
        readonly minorGridlines: Excel.ChartGridlines;
        /**
         *
         * Represents the axis title. Read-only.
         *
         * 
         */
        readonly title: Excel.ChartAxisTitle;
        /**
         *
         * Represents the alignment for the specified axis tick label. See Excel.ChartTextHorizontalAlignment for detail.
         *
         * 
         */
        alignment: Excel.ChartTickLabelAlignment | "Center" | "Left" | "Right";
        /**
         *
         * Represents the group for the specified axis. See Excel.ChartAxisGroup for details. Read-only.
         *
         * 
         */
        readonly axisGroup: Excel.ChartAxisGroup | "Primary" | "Secondary";
        /**
         *
         * Returns or sets the base unit for the specified category axis.
         *
         * 
         */
        baseTimeUnit: Excel.ChartAxisTimeUnit | "Days" | "Months" | "Years";
        /**
         *
         * Returns or sets the category axis type.
         *
         * 
         */
        categoryType: Excel.ChartAxisCategoryType | "Automatic" | "TextAxis" | "DateAxis";
        /**
         *
         * Represents the custom axis display unit value. Read-only. To set this property, please use the SetCustomDisplayUnit(double) method.
         *
         * 
         */
        readonly customDisplayUnit: number;
        /**
         *
         * Represents the axis display unit. See Excel.ChartAxisDisplayUnit for details.
         *
         * 
         */
        displayUnit: Excel.ChartAxisDisplayUnit | "None" | "Hundreds" | "Thousands" | "TenThousands" | "HundredThousands" | "Millions" | "TenMillions" | "HundredMillions" | "Billions" | "Trillions" | "Custom";
        /**
         *
         * Represents the height, in points, of the chart axis. Null if the axis is not visible. Read-only.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents whether value axis crosses the category axis between categories.
         *
         * 
         */
        isBetweenCategories: boolean;
        /**
         *
         * Represents the distance, in points, from the left edge of the axis to the left of chart area. Null if the axis is not visible. Read-only.
         *
         * 
         */
        readonly left: number;
        /**
         *
         * Represents whether or not the number format is linked to the cells. If true, the number format will change in the labels when it changes in the cells.
         *
         * 
         */
        linkNumberFormat: boolean;
        /**
         *
         * Represents the base of the logarithm when using logarithmic scales.
         *
         * 
         */
        logBase: number;
        /**
         *
         * Represents the type of major tick mark for the specified axis. See Excel.ChartAxisTickMark for details.
         *
         * 
         */
        majorTickMark: Excel.ChartAxisTickMark | "None" | "Cross" | "Inside" | "Outside";
        /**
         *
         * Returns or sets the major unit scale value for the category axis when the CategoryType property is set to TimeScale.
         *
         * 
         */
        majorTimeUnitScale: Excel.ChartAxisTimeUnit | "Days" | "Months" | "Years";
        /**
         *
         * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
         *
         * 
         */
        majorUnit: any;
        /**
         *
         * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
         *
         * 
         */
        maximum: any;
        /**
         *
         * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
         *
         * 
         */
        minimum: any;
        /**
         *
         * Represents the type of minor tick mark for the specified axis. See Excel.ChartAxisTickMark for details.
         *
         * 
         */
        minorTickMark: Excel.ChartAxisTickMark | "None" | "Cross" | "Inside" | "Outside";
        /**
         *
         * Returns or sets the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.
         *
         * 
         */
        minorTimeUnitScale: Excel.ChartAxisTimeUnit | "Days" | "Months" | "Years";
        /**
         *
         * Represents the interval between two minor tick marks. Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
         *
         * 
         */
        minorUnit: any;
        /**
         *
         * Represents whether an axis is multilevel or not.
         *
         * 
         */
        multiLevel: boolean;
        /**
         *
         * Represents the format code for the axis tick label.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * Represents the distance between the levels of labels, and the distance between the first level and the axis line. The value should be an integer from 0 to 1000.
         *
         * 
         */
        offset: number;
        /**
         *
         * Represents the specified axis position where the other axis crosses. See Excel.ChartAxisPosition for details.
         *
         * 
         */
        position: Excel.ChartAxisPosition | "Automatic" | "Maximum" | "Minimum" | "Custom";
        /**
         *
         * Represents the specified axis position where the other axis crosses at. You should use the SetPositionAt(double) method to set this property.
         *
         * 
         */
        readonly positionAt: number;
        /**
         *
         * Represents whether Microsoft Excel plots data points from last to first.
         *
         * 
         */
        reversePlotOrder: boolean;
        /**
         *
         * Represents the value axis scale type. See Excel.ChartAxisScaleType for details.
         *
         * 
         */
        scaleType: Excel.ChartAxisScaleType | "Linear" | "Logarithmic";
        /**
         *
         * Represents whether the axis display unit label is visible.
         *
         * 
         */
        showDisplayUnitLabel: boolean;
        /**
         *
         * Represents the text orientation of the axis tick label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.
         *
         * 
         */
        textOrientation: any;
        /**
         *
         * Represents the position of tick-mark labels on the specified axis. See Excel.ChartAxisTickLabelPosition for details.
         *
         * 
         */
        tickLabelPosition: Excel.ChartAxisTickLabelPosition | "NextToAxis" | "High" | "Low" | "None";
        /**
         *
         * Represents the number of categories or series between tick-mark labels. Can be a value from 1 through 31999 or an empty string for automatic setting. The returned value is always a number.
         *
         * 
         */
        tickLabelSpacing: any;
        /**
         *
         * Represents the number of categories or series between tick marks.
         *
         * 
         */
        tickMarkSpacing: number;
        /**
         *
         * Represents the distance, in points, from the top edge of the axis to the top of chart area. Null if the axis is not visible. Read-only.
         *
         * 
         */
        readonly top: number;
        /**
         *
         * Represents the axis type. See Excel.ChartAxisType for details.
         *
         * 
         */
        readonly type: Excel.ChartAxisType | "Invalid" | "Category" | "Value" | "Series";
        /**
         *
         * A boolean value represents the visibility of the axis.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Represents the width, in points, of the chart axis. Null if the axis is not visible. Read-only.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAxis): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAxis): void;
        /**
         *
         * Sets all the category names for the specified axis.
         *
         * 
         *
         * @param sourceData - The Range object corresponding to the source data.
         */
        setCategoryNames(sourceData: Range): void;
        /**
         *
         * Sets the axis display unit to a custom value.
         *
         * 
         *
         * @param value - Custom value of the display unit.
         */
        setCustomDisplayUnit(value: number): void;
        /**
         *
         * Set the specified axis position where the other axis crosses at.
         *
         * 
         *
         * @param value - Custom value of the crosses at
         */
        setPositionAt(value: number): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAxis;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAxis;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAxis object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for the chart axis.
     *
     * 
     */
    export class ChartAxisFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents chart fill formatting. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /**
         *
         * Represents chart line formatting. Read-only.
         *
         * 
         */
        readonly line: Excel.ChartLineFormat;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAxisFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAxisFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAxisFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAxisFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAxisFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the title of a chart axis.
     *
     * 
     */
    export class ChartAxisTitle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of chart axis title. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartAxisTitleFormat;
        /**
         *
         * Represents the axis title.
         *
         * 
         */
        text: string;
        /**
         *
         * A boolean that specifies the visibility of an axis title.
         *
         * 
         */
        visible: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAxisTitle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAxisTitle): void;
        /**
         *
         * A string value that represents the formula of chart axis title using A1-style notation.
         *
         * 
         *
         * @param formula - a string that present the formula to set
         */
        setFormula(formula: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAxisTitle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAxisTitle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAxisTitle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisTitleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the chart axis title formatting.
     *
     * 
     */
    export class ChartAxisTitleFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format, which includes color, linestyle, and weight.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents chart fill formatting.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartAxisTitleFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartAxisTitleFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartAxisTitleFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartAxisTitleFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartAxisTitleFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisTitleFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the data labels on a chart point.
     *
     * 
     */
    export class ChartDataLabels{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the format of chart data labels, which includes fill and font formatting. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartDataLabelFormat;
        /**
         *
         * Represents whether data labels automatically generate appropriate text based on context.
         *
         * 
         */
        autoText: boolean;
        /**
         *
         * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.
            This property is valid only when TextOrientation of data label is 0.
         *
         * 
         */
        horizontalAlignment: Excel.ChartTextHorizontalAlignment | "Center" | "Left" | "Right" | "Justify" | "Distributed";
        /**
         *
         * Represents whether or not the number format is linked to the cells. If true, the number format will change in the labels when it changes in the cells
         *
         * 
         */
        linkNumberFormat: boolean;
        /**
         *
         * Represents the format code for data labels.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.
         *
         * 
         */
        position: Excel.ChartDataLabelPosition | "Invalid" | "None" | "Center" | "InsideEnd" | "InsideBase" | "OutsideEnd" | "Left" | "Right" | "Top" | "Bottom" | "BestFit" | "Callout";
        /**
         *
         * String representing the separator used for the data labels on a chart.
         *
         * 
         */
        separator: string;
        /**
         *
         * Boolean value representing if the data label bubble size is visible or not.
         *
         * 
         */
        showBubbleSize: boolean;
        /**
         *
         * Boolean value representing if the data label category name is visible or not.
         *
         * 
         */
        showCategoryName: boolean;
        /**
         *
         * Boolean value representing if the data label legend key is visible or not.
         *
         * 
         */
        showLegendKey: boolean;
        /**
         *
         * Boolean value representing if the data label percentage is visible or not.
         *
         * 
         */
        showPercentage: boolean;
        /**
         *
         * Boolean value representing if the data label series name is visible or not.
         *
         * 
         */
        showSeriesName: boolean;
        /**
         *
         * Boolean value representing if the data label value is visible or not.
         *
         * 
         */
        showValue: boolean;
        /**
         *
         * Represents the text orientation of data labels. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.
            This property is valid only when TextOrientation of data label is -90, 90, or 180.
         *
         * 
         */
        verticalAlignment: Excel.ChartTextVerticalAlignment | "Center" | "Bottom" | "Top" | "Justify" | "Distributed";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartDataLabels): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartDataLabels): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartDataLabels;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartDataLabels;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartDataLabels object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the data label of a chart point.
     *
     * 
     */
    export class ChartDataLabel{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the format of chart data label.
         *
         * 
         */
        readonly format: Excel.ChartDataLabelFormat;
        /**
         *
         * Boolean value representing if data label automatically generates appropriate text based on context.
         *
         * 
         */
        autoText: boolean;
        /**
         *
         * String value that represents the formula of chart data label using A1-style notation.
         *
         * 
         */
        formula: string;
        /**
         *
         * Returns the height, in points, of the chart data label. Read-only. Null if chart data label is not visible.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.
            This property is valid only when TextOrientation of data label is -90, 90, or 180.
         *
         * 
         */
        horizontalAlignment: Excel.ChartTextHorizontalAlignment | "Center" | "Left" | "Right" | "Justify" | "Distributed";
        /**
         *
         * Represents the distance, in points, from the left edge of chart data label to the left edge of chart area. Null if chart data label is not visible.
         *
         * 
         */
        left: number;
        /**
         *
         * Boolean value representing if the number format is linked to the cells (so that the number format changes in the labels when it changes in the cells).
         *
         * 
         */
        linkNumberFormat: boolean;
        /**
         *
         * String value that represents the format code for data label.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.
         *
         * 
         */
        position: Excel.ChartDataLabelPosition | "Invalid" | "None" | "Center" | "InsideEnd" | "InsideBase" | "OutsideEnd" | "Left" | "Right" | "Top" | "Bottom" | "BestFit" | "Callout";
        /**
         *
         * String representing the separator used for the data label on a chart.
         *
         * 
         */
        separator: string;
        /**
         *
         * Boolean value representing if the data label bubble size is visible or not.
         *
         * 
         */
        showBubbleSize: boolean;
        /**
         *
         * Boolean value representing if the data label category name is visible or not.
         *
         * 
         */
        showCategoryName: boolean;
        /**
         *
         * Boolean value representing if the data label legend key is visible or not.
         *
         * 
         */
        showLegendKey: boolean;
        /**
         *
         * Boolean value representing if the data label percentage is visible or not.
         *
         * 
         */
        showPercentage: boolean;
        /**
         *
         * Boolean value representing if the data label series name is visible or not.
         *
         * 
         */
        showSeriesName: boolean;
        /**
         *
         * Boolean value representing if the data label value is visible or not.
         *
         * 
         */
        showValue: boolean;
        /**
         *
         * String representing the text of the data label on a chart.
         *
         * 
         */
        text: string;
        /**
         *
         * Represents the text orientation of chart data label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Represents the distance, in points, from the top edge of chart data label to the top of chart area. Null if chart data label is not visible.
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.
            This property is valid only when TextOrientation of data label is 0.
         *
         * 
         */
        verticalAlignment: Excel.ChartTextVerticalAlignment | "Center" | "Bottom" | "Top" | "Justify" | "Distributed";
        /**
         *
         * Returns the width, in points, of the chart data label. Read-only. Null if chart data label is not visible.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartDataLabel): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartDataLabel): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartDataLabel;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartDataLabel;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartDataLabel object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for the chart data labels.
     *
     * 
     */
    export class ChartDataLabelFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format, which includes color, linestyle, and weight. Read-only.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of the current chart data label. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartDataLabelFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartDataLabelFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartDataLabelFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartDataLabelFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartDataLabelFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the attributes for a chart's error bars.
     *
     * 
     */
    export class ChartErrorBars{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Specifies the formatting type of the error bars.
         *
         * 
         */
        readonly format: Excel.ChartErrorBarsFormat;
        /**
         *
         * Specifies whether or not the error bars have an end style cap.
         *
         * 
         */
        endStyleCap: boolean;
        /**
         *
         * Specifies which parts of the error bars to include.
         *
         * 
         */
        include: Excel.ChartErrorBarsInclude | "Both" | "MinusValues" | "PlusValues";
        /**
         *
         * The type of range marked by the error bars.
         *
         * 
         */
        type: Excel.ChartErrorBarsType | "FixedValue" | "Percent" | "StDev" | "StError" | "Custom";
        /**
         *
         * Specifies whether or not the error bars are displayed.
         *
         * 
         */
        visible: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartErrorBars): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartErrorBars): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartErrorBars;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartErrorBars;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartErrorBars object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartErrorBarsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for chart error bars.
     *
     * 
     */
    export class ChartErrorBarsFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the chart line formatting.
         *
         * 
         */
        readonly line: Excel.ChartLineFormat;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartErrorBarsFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartErrorBarsFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartErrorBarsFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartErrorBarsFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartErrorBarsFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartErrorBarsFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents major or minor gridlines on a chart axis.
     *
     * 
     */
    export class ChartGridlines{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of chart gridlines. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartGridlinesFormat;
        /**
         *
         * Boolean value representing if the axis gridlines are visible or not.
         *
         * 
         */
        visible: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartGridlines): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartGridlines): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartGridlines;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartGridlines;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartGridlines object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartGridlinesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for chart gridlines.
     *
     * 
     */
    export class ChartGridlinesFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents chart line formatting. Read-only.
         *
         * 
         */
        readonly line: Excel.ChartLineFormat;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartGridlinesFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartGridlinesFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartGridlinesFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartGridlinesFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartGridlinesFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartGridlinesFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the legend in a chart.
     *
     * 
     */
    export class ChartLegend{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartLegendFormat;
        /**
         *
         * Represents a collection of legendEntries in the legend. Read-only.
         *
         * 
         */
        readonly legendEntries: Excel.ChartLegendEntryCollection;
        /**
         *
         * Represents the height, in points, of the legend on the chart. Null if legend is not visible.
         *
         * 
         */
        height: number;
        /**
         *
         * Represents the left, in points, of a chart legend. Null if legend is not visible.
         *
         * 
         */
        left: number;
        /**
         *
         * Boolean value for whether the chart legend should overlap with the main body of the chart.
         *
         * 
         */
        overlay: boolean;
        /**
         *
         * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.
         *
         * 
         */
        position: Excel.ChartLegendPosition | "Invalid" | "Top" | "Bottom" | "Left" | "Right" | "Corner" | "Custom";
        /**
         *
         * Represents if the legend has a shadow on the chart.
         *
         * 
         */
        showShadow: boolean;
        /**
         *
         * Represents the top of a chart legend.
         *
         * 
         */
        top: number;
        /**
         *
         * A boolean value the represents the visibility of a ChartLegend object.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Represents the width, in points, of the legend on the chart. Null if legend is not visible.
         *
         * 
         */
        width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartLegend): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartLegend): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartLegend;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartLegend;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartLegend object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the legendEntry in legendEntryCollection.
     *
     * 
     */
    export class ChartLegendEntry{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the height of the legendEntry on the chart legend.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents the index of the legendEntry in the chart legend.
         *
         * 
         */
        readonly index: number;
        /**
         *
         * Represents the left of a chart legendEntry.
         *
         * 
         */
        readonly left: number;
        /**
         *
         * Represents the top of a chart legendEntry.
         *
         * 
         */
        readonly top: number;
        /**
         *
         * Represents the visible of a chart legend entry.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Represents the width of the legendEntry on the chart Legend.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartLegendEntry): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartLegendEntry): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartLegendEntry;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartLegendEntry;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartLegendEntry object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendEntryData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of legendEntries.
     *
     * 
     */
    export class ChartLegendEntryCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ChartLegendEntry[];
        /**
         *
         * Returns the number of legendEntry in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Returns a legendEntry at the given index.
         *
         * 
         *
         * @param index - Index of the legendEntry to be retrieved.
         */
        getItemAt(index: number): Excel.ChartLegendEntry;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartLegendEntryCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ChartLegendEntryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendEntryCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Encapsulates the format properties of a chart legend.
     *
     * 
     */
    export class ChartLegendFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format, which includes color, linestyle, and weight. Read-only.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of an object, which includes background formatting information. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartLegendFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartLegendFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartLegendFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartLegendFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartLegendFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the properties for a region map chart.
     *
     * 
     */
    export class ChartMapOptions{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns or sets the series map labels strategy of a region map chart. Read/Write.
         *
         * 
         */
        labelStrategy: Excel.ChartMapLabelStrategy | "None" | "BestFit" | "ShowAll";
        /**
         *
         * Returns or sets the series mapping level of a region map chart. Read/Write.
         *
         * 
         */
        level: Excel.ChartMapAreaLevel | "Automatic" | "DataOnly" | "City" | "County" | "State" | "Country" | "Continent" | "World";
        /**
         *
         * Returns or sets the series projection type of a region map chart. Read/Write.
         *
         * 
         */
        projectionType: Excel.ChartMapProjectionType | "Automatic" | "Mercator" | "Miller" | "Robinson" | "Albers";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartMapOptions): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartMapOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartMapOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartMapOptions;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartMapOptions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartMapOptionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a chart title object of a chart.
     *
     * 
     */
    export class ChartTitle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
         *
         * 
         */
        readonly format: Excel.ChartTitleFormat;
        /**
         *
         * Returns the height, in points, of the chart title. Null if chart title is not visible. Read-only.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents the horizontal alignment for chart title.
         *
         * 
         */
        horizontalAlignment: Excel.ChartTextHorizontalAlignment | "Center" | "Left" | "Right" | "Justify" | "Distributed";
        /**
         *
         * Represents the distance, in points, from the left edge of chart title to the left edge of chart area. Null if chart title is not visible.
         *
         * 
         */
        left: number;
        /**
         *
         * Boolean value representing if the chart title will overlay the chart or not.
         *
         * 
         */
        overlay: boolean;
        /**
         *
         * Represents the position of chart title. See Excel.ChartTitlePosition for details.
         *
         * 
         */
        position: Excel.ChartTitlePosition | "Automatic" | "Top" | "Bottom" | "Left" | "Right";
        /**
         *
         * Represents a boolean value that determines if the chart title has a shadow.
         *
         * 
         */
        showShadow: boolean;
        /**
         *
         * Represents the title text of a chart.
         *
         * 
         */
        text: string;
        /**
         *
         * Represents the text orientation of chart title. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Represents the distance, in points, from the top edge of chart title to the top of chart area. Null if chart title is not visible.
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the vertical alignment of chart title. See Excel.ChartTextVerticalAlignment for details.
         *
         * 
         */
        verticalAlignment: Excel.ChartTextVerticalAlignment | "Center" | "Bottom" | "Top" | "Justify" | "Distributed";
        /**
         *
         * A boolean value the represents the visibility of a chart title object.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Returns the width, in points, of the chart title. Null if chart title is not visible. Read-only.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTitle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTitle): void;
        /**
         *
         * Get the substring of a chart title. Line break '\n' also counts one character.
         *
         * 
         *
         * @param start - Start position of substring to be retrieved. Position start with 0.
         * @param length - Length of substring to be retrieved.
         */
        getSubstring(start: number, length: number): Excel.ChartFormatString;
        /**
         *
         * Sets a string value that represents the formula of chart title using A1-style notation.
         *
         * 
         *
         * @param formula - A string that represents the formula to set.
         */
        setFormula(formula: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTitle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTitle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTitle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTitleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the substring in chart related objects that contains text, like ChartTitle object, ChartAxisTitle object, etc.
     *
     * 
     */
    export class ChartFormatString{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the font attributes, such as font name, font size, color, etc. of chart characters object.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartFormatString): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartFormatString): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartFormatString;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartFormatString;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartFormatString object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFormatStringData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Provides access to the office art formatting for chart title.
     *
     * 
     */
    export class ChartTitleFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format of chart title, which includes color, linestyle, and weight. Read-only.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of an object, which includes background formatting information. Read-only.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes (font name, font size, color, etc.) for an object. Read-only.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTitleFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTitleFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTitleFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTitleFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTitleFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTitleFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the fill formatting for a chart element.
     *
     * 
     */
    export class ChartFill{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        
        /**
         *
         * Clear the fill color of a chart element.
         *
         * 
         */
        clear(): void;
        /**
         *
         * Sets the fill formatting of a chart element to a uniform color.
         *
         * 
         *
         * @param color - HTML color code representing the color of the background, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         */
        setSolidColor(color: string): void;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFillData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     *
     * Represents the border formatting of a chart element.
     *
     * 
     */
    export class ChartBorder{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of borders in the chart.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the line style of the border. See Excel.ChartLineStyle for details.
         *
         * 
         */
        lineStyle: Excel.ChartLineStyle | "None" | "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot" | "Grey25" | "Grey50" | "Grey75" | "Automatic" | "RoundDot";
        /**
         *
         * Represents weight of the border, in points.
         *
         * 
         */
        weight: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartBorder): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartBorder): void;
        /**
         *
         * Clear the border format of a chart element.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartBorder;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartBorderData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the bin options for histogram charts and pareto charts.
     *
     * 
     */
    export class ChartBinOptions{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Specifies whether or not the bin overflow is enabled in a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        allowOverflow: boolean;
        /**
         *
         * Specifies whether or not the bin underflow is enabled in a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        allowUnderflow: boolean;
        /**
         *
         * Returns or sets the bin count of a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        count: number;
        /**
         *
         * Returns or sets the bin overflow value of a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        overflowValue: number;
        /**
         *
         * Returns or sets the bin's type for a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        type: Excel.ChartBinType | "Category" | "Auto" | "BinWidth" | "BinCount";
        /**
         *
         * Returns or sets the bin underflow value of a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        underflowValue: number;
        /**
         *
         * Returns or sets the bin width value of a histogram chart or pareto chart. Read/Write.
         *
         * 
         */
        width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartBinOptions): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartBinOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartBinOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartBinOptions;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartBinOptions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartBinOptionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the properties of a box and whisker chart.
     *
     * 
     */
    export class ChartBoxwhiskerOptions{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns or sets the quartile calculation type of a box and whisker chart. Read/Write.
         *
         * 
         */
        quartileCalculation: Excel.ChartBoxQuartileCalculation | "Inclusive" | "Exclusive";
        /**
         *
         * Specifies whether or not the inner points are shown in a box and whisker chart. Read/Write.
         *
         * 
         */
        showInnerPoints: boolean;
        /**
         *
         * Specifies whether or not the mean line is shown in a box and whisker chart. Read/Write.
         *
         * 
         */
        showMeanLine: boolean;
        /**
         *
         * Specifies whether or not the mean marker is shown in a box and whisker chart. Read/Write.
         *
         * 
         */
        showMeanMarker: boolean;
        /**
         *
         * Specifies whether or not outlier points are shown in a box and whisker chart. Read/Write.
         *
         * 
         */
        showOutlierPoints: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartBoxwhiskerOptions): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartBoxwhiskerOptions): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartBoxwhiskerOptions;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartBoxwhiskerOptions;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartBoxwhiskerOptions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartBoxwhiskerOptionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the formatting options for line elements.
     *
     * 
     */
    export class ChartLineFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of lines in the chart.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the line style. See Excel.ChartLineStyle for details.
         *
         * 
         */
        lineStyle: Excel.ChartLineStyle | "None" | "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot" | "Grey25" | "Grey50" | "Grey75" | "Automatic" | "RoundDot";
        /**
         *
         * Represents weight of the line, in points.
         *
         * 
         */
        weight: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartLineFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartLineFormat): void;
        /**
         *
         * Clear the line format of a chart element.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartLineFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartLineFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartLineFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLineFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the font attributes (font name, font size, color, etc.) for a chart object.
     *
     * 
     */
    export class ChartFont{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the bold status of font.
         *
         * 
         */
        bold: boolean;
        /**
         *
         * HTML color code representation of the text color. E.g. #FF0000 represents Red.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the italic status of the font.
         *
         * 
         */
        italic: boolean;
        /**
         *
         * Font name (e.g. "Calibri")
         *
         * 
         */
        name: string;
        /**
         *
         * Size of the font (e.g. 11)
         *
         * 
         */
        size: number;
        /**
         *
         * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.
         *
         * 
         */
        underline: Excel.ChartUnderlineStyle | "None" | "Single";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartFont): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartFont): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartFont;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartFont;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFontData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the attributes for a chart trendline object.
     *
     * 
     */
    export class ChartTrendline{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of a chart trendline.
         *
         * 
         */
        readonly format: Excel.ChartTrendlineFormat;
        /**
         *
         * Represents the label of a chart trendline.
         *
         * 
         */
        readonly label: Excel.ChartTrendlineLabel;
        /**
         *
         * Represents the number of periods that the trendline extends backward.
         *
         * 
         */
        backwardPeriod: number;
        /**
         *
         * Represents the number of periods that the trendline extends forward.
         *
         * 
         */
        forwardPeriod: number;
        /**
         *
         * Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.
         *
         * 
         */
        intercept: any;
        /**
         *
         * Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.
         *
         * 
         */
        movingAveragePeriod: number;
        /**
         *
         * Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string
         *
         * 
         */
        name: string;
        /**
         *
         * Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.
         *
         * 
         */
        polynomialOrder: number;
        /**
         *
         * True if the equation for the trendline is displayed on the chart.
         *
         * 
         */
        showEquation: boolean;
        /**
         *
         * True if the R-squared for the trendline is displayed on the chart.
         *
         * 
         */
        showRSquared: boolean;
        /**
         *
         * Represents the type of a chart trendline.
         *
         * 
         */
        type: Excel.ChartTrendlineType | "Linear" | "Exponential" | "Logarithmic" | "MovingAverage" | "Polynomial" | "Power";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTrendline): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTrendline): void;
        /**
         *
         * Delete the trendline object.
         *
         * 
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTrendline;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTrendline;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTrendline object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of Chart Trendlines.
     *
     * 
     */
    export class ChartTrendlineCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ChartTrendline[];
        /**
         *
         * Adds a new trendline to trendline collection.
         *
         * 
         *
         * @param type - Specifies the trendline type. The default value is "Linear". See Excel.ChartTrendline for details.
         */
        add(type?: Excel.ChartTrendlineType): Excel.ChartTrendline;
        /**
         *
         * Adds a new trendline to trendline collection.
         *
         * 
         *
         * @param typeString - Specifies the trendline type. The default value is "Linear". See Excel.ChartTrendline for details.
         */
        add(typeString?: "Linear" | "Exponential" | "Logarithmic" | "MovingAverage" | "Polynomial" | "Power"): Excel.ChartTrendline;
        /**
         *
         * Returns the number of trendlines in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Get trendline object by index, which is the insertion order in items array.
         *
         * 
         *
         * @param index - Represents the insertion order in items array.
         */
        getItem(index: number): Excel.ChartTrendline;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTrendlineCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ChartTrendlineCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the format properties for chart trendline.
     *
     * 
     */
    export class ChartTrendlineFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents chart line formatting. Read-only.
         *
         * 
         */
        readonly line: Excel.ChartLineFormat;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTrendlineFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTrendlineFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTrendlineFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTrendlineFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTrendlineFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the attributes for a chart trendline lable object.
     *
     * 
     */
    export class ChartTrendlineLabel{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the format of chart trendline label.
         *
         * 
         */
        readonly format: Excel.ChartTrendlineLabelFormat;
        /**
         *
         * Boolean value representing if trendline label automatically generates appropriate text based on context.
         *
         * 
         */
        autoText: boolean;
        /**
         *
         * String value that represents the formula of chart trendline label using A1-style notation.
         *
         * 
         */
        formula: string;
        /**
         *
         * Returns the height, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.
         *
         * 
         */
        readonly height: number;
        /**
         *
         * Represents the horizontal alignment for chart trendline label. See Excel.ChartTextHorizontalAlignment for details.
            This property is valid only when TextOrientation of trendline label is -90, 90, or 180.
         *
         * 
         */
        horizontalAlignment: Excel.ChartTextHorizontalAlignment | "Center" | "Left" | "Right" | "Justify" | "Distributed";
        /**
         *
         * Represents the distance, in points, from the left edge of chart trendline label to the left edge of chart area. Null if chart trendline label is not visible.
         *
         * 
         */
        left: number;
        /**
         *
         * Boolean value representing if the number format is linked to the cells (so that the number format changes in the labels when it changes in the cells).
         *
         * 
         */
        linkNumberFormat: boolean;
        /**
         *
         * String value that represents the format code for trendline label.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * String representing the text of the trendline label on a chart.
         *
         * 
         */
        text: string;
        /**
         *
         * Represents the text orientation of chart trendline label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Represents the distance, in points, from the top edge of chart trendline label to the top of chart area. Null if chart trendline label is not visible.
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the vertical alignment of chart trendline label. See Excel.ChartTextVerticalAlignment for details.
            This property is valid only when TextOrientation of trendline label is 0.
         *
         * 
         */
        verticalAlignment: Excel.ChartTextVerticalAlignment | "Center" | "Bottom" | "Top" | "Justify" | "Distributed";
        /**
         *
         * Returns the width, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.
         *
         * 
         */
        readonly width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTrendlineLabel): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTrendlineLabel): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTrendlineLabel;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTrendlineLabel;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTrendlineLabel object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineLabelData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Encapsulates the format properties for the chart trendline label.
     *
     * 
     */
    export class ChartTrendlineLabelFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border format, which includes color, linestyle, and weight.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of the current chart trendline label.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /**
         *
         * Represents the font attributes (font name, font size, color, etc.) for a chart trendline label.
         *
         * 
         */
        readonly font: Excel.ChartFont;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartTrendlineLabelFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartTrendlineLabelFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartTrendlineLabelFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartTrendlineLabelFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartTrendlineLabelFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineLabelFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the attributes for a chart plotArea object.
     *
     * 
     */
    export class ChartPlotArea{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the formatting of a chart plotArea.
         *
         * 
         */
        readonly format: Excel.ChartPlotAreaFormat;
        /**
         *
         * Represents the height value of plotArea.
         *
         * 
         */
        height: number;
        /**
         *
         * Represents the insideHeight value of plotArea.
         *
         * 
         */
        insideHeight: number;
        /**
         *
         * Represents the insideLeft value of plotArea.
         *
         * 
         */
        insideLeft: number;
        /**
         *
         * Represents the insideTop value of plotArea.
         *
         * 
         */
        insideTop: number;
        /**
         *
         * Represents the insideWidth value of plotArea.
         *
         * 
         */
        insideWidth: number;
        /**
         *
         * Represents the left value of plotArea.
         *
         * 
         */
        left: number;
        /**
         *
         * Represents the position of plotArea.
         *
         * 
         */
        position: Excel.ChartPlotAreaPosition | "Automatic" | "Custom";
        /**
         *
         * Represents the top value of plotArea.
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the width value of plotArea.
         *
         * 
         */
        width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartPlotArea): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartPlotArea): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPlotArea;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartPlotArea;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartPlotArea object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPlotAreaData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the format properties for chart plotArea.
     *
     * 
     */
    export class ChartPlotAreaFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the border attributes of a chart plotArea.
         *
         * 
         */
        readonly border: Excel.ChartBorder;
        /**
         *
         * Represents the fill format of an object, which includes background formatting information.
         *
         * 
         */
        readonly fill: Excel.ChartFill;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ChartPlotAreaFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ChartPlotAreaFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ChartPlotAreaFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ChartPlotAreaFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ChartPlotAreaFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPlotAreaFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Manages sorting operations on Range objects.
     *
     * 
     */
    export class RangeSort{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Perform a sort operation.
         *
         * 
         *
         * @param fields - The list of conditions to sort on.
         * @param matchCase - Optional. Whether to have the casing impact string ordering.
         * @param hasHeaders - Optional. Whether the range has a header.
         * @param orientation - Optional. Whether the operation is sorting rows or columns.
         * @param method - Optional. The ordering method used for Chinese characters.
         */
        apply(fields: Excel.SortField[], matchCase?: boolean, hasHeaders?: boolean, orientation?: Excel.SortOrientation, method?: Excel.SortMethod): void;
        /**
         *
         * Perform a sort operation.
         *
         * 
         *
         * @param fields - The list of conditions to sort on.
         * @param matchCase - Optional. Whether to have the casing impact string ordering.
         * @param hasHeaders - Optional. Whether the range has a header.
         * @param orientationString - Optional. Whether the operation is sorting rows or columns.
         * @param method - Optional. The ordering method used for Chinese characters.
         */
        apply(fields: Excel.SortField[], matchCase?: boolean, hasHeaders?: boolean, orientationString?: "Rows" | "Columns", method?: "PinYin" | "StrokeCount"): void;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RangeSort object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeSortData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     *
     * Manages sorting operations on Table objects.
     *
     * 
     */
    export class TableSort{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the current conditions used to last sort the table. Read-only.
         *
         * 
         */
        readonly fields: Excel.SortField[];
        /**
         *
         * Represents whether the casing impacted the last sort of the table. Read-only.
         *
         * 
         */
        readonly matchCase: boolean;
        /**
         *
         * Represents Chinese character ordering method last used to sort the table. Read-only.
         *
         * 
         */
        readonly method: Excel.SortMethod | "PinYin" | "StrokeCount";
        /**
         *
         * Perform a sort operation.
         *
         * 
         *
         * @param fields - The list of conditions to sort on.
         * @param matchCase - Optional. Whether to have the casing impact string ordering.
         * @param method - Optional. The ordering method used for Chinese characters.
         */
        apply(fields: Excel.SortField[], matchCase?: boolean, method?: Excel.SortMethod): void;
        /**
         *
         * Perform a sort operation.
         *
         * 
         *
         * @param fields - The list of conditions to sort on.
         * @param matchCase - Optional. Whether to have the casing impact string ordering.
         * @param methodString - Optional. The ordering method used for Chinese characters.
         */
        apply(fields: Excel.SortField[], matchCase?: boolean, methodString?: "PinYin" | "StrokeCount"): void;
        /**
         *
         * Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons.
         *
         * 
         */
        clear(): void;
        /**
         *
         * Reapplies the current sorting parameters to the table.
         *
         * 
         */
        reapply(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableSort;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TableSort;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TableSort object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableSortData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a condition in a sorting operation.
     *
     * 
     */
    export interface SortField {
        /**
         *
         * Represents whether the sorting is done in an ascending fashion.
         *
         * 
         */
        ascending?: boolean;
        /**
         *
         * Represents the color that is the target of the condition if the sorting is on font or cell color.
         *
         * 
         */
        color?: string;
        /**
         *
         * Represents additional sorting options for this field.
         *
         * 
         */
        dataOption?: Excel.SortDataOption | "Normal" | "TextAsNumber";
        /**
         *
         * Represents the icon that is the target of the condition if the sorting is on the cell's icon.
         *
         * 
         */
        icon?: Excel.Icon;
        /**
         *
         * Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
         *
         * 
         */
        key: number;
        /**
         *
         * Represents the type of sorting of this condition.
         *
         * 
         */
        sortOn?: Excel.SortOn | "Value" | "CellColor" | "FontColor" | "Icon";
        /**
         *
         * Represents the subfield that is the target property name of a rich value to sort on.
         *
         * 
         */
        subField?: string;
    }
    /**
     *
     * Manages the filtering of a table's column.
     *
     * 
     */
    export class Filter{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The currently applied filter on the given column. Read-only.
         *
         * 
         */
        readonly criteria: Excel.FilterCriteria;
        /**
         *
         * Apply the given filter criteria on the given column.
         *
         * 
         *
         * @param criteria - The criteria to apply.
         */
        apply(criteria: Excel.FilterCriteria): void;
        /**
         *
         * Apply a "Bottom Item" filter to the column for the given number of elements.
         *
         * 
         *
         * @param count - The number of elements from the bottom to show.
         */
        applyBottomItemsFilter(count: number): void;
        /**
         *
         * Apply a "Bottom Percent" filter to the column for the given percentage of elements.
         *
         * 
         *
         * @param percent - The percentage of elements from the bottom to show.
         */
        applyBottomPercentFilter(percent: number): void;
        /**
         *
         * Apply a "Cell Color" filter to the column for the given color.
         *
         * 
         *
         * @param color - The background color of the cells to show.
         */
        applyCellColorFilter(color: string): void;
        /**
         *
         * Apply an "Icon" filter to the column for the given criteria strings.
         *
         * 
         *
         * @param criteria1 - The first criteria string.
         * @param criteria2 - Optional. The second criteria string.
         * @param oper - Optional. The operator that describes how the two criteria are joined.
         */
        applyCustomFilter(criteria1: string, criteria2?: string, oper?: Excel.FilterOperator): void;
        /**
         *
         * Apply an "Icon" filter to the column for the given criteria strings.
         *
         * 
         *
         * @param criteria1 - The first criteria string.
         * @param criteria2 - Optional. The second criteria string.
         * @param operString - Optional. The operator that describes how the two criteria are joined.
         */
        applyCustomFilter(criteria1: string, criteria2?: string, operString?: "And" | "Or"): void;
        /**
         *
         * Apply a "Dynamic" filter to the column.
         *
         * 
         *
         * @param criteria - The dynamic criteria to apply.
         */
        applyDynamicFilter(criteria: Excel.DynamicFilterCriteria): void;
        /**
         *
         * Apply a "Dynamic" filter to the column.
         *
         * 
         *
         * @param criteriaString - The dynamic criteria to apply.
         */
        applyDynamicFilter(criteriaString: "Unknown" | "AboveAverage" | "AllDatesInPeriodApril" | "AllDatesInPeriodAugust" | "AllDatesInPeriodDecember" | "AllDatesInPeriodFebruray" | "AllDatesInPeriodJanuary" | "AllDatesInPeriodJuly" | "AllDatesInPeriodJune" | "AllDatesInPeriodMarch" | "AllDatesInPeriodMay" | "AllDatesInPeriodNovember" | "AllDatesInPeriodOctober" | "AllDatesInPeriodQuarter1" | "AllDatesInPeriodQuarter2" | "AllDatesInPeriodQuarter3" | "AllDatesInPeriodQuarter4" | "AllDatesInPeriodSeptember" | "BelowAverage" | "LastMonth" | "LastQuarter" | "LastWeek" | "LastYear" | "NextMonth" | "NextQuarter" | "NextWeek" | "NextYear" | "ThisMonth" | "ThisQuarter" | "ThisWeek" | "ThisYear" | "Today" | "Tomorrow" | "YearToDate" | "Yesterday"): void;
        /**
         *
         * Apply a "Font Color" filter to the column for the given color.
         *
         * 
         *
         * @param color - The font color of the cells to show.
         */
        applyFontColorFilter(color: string): void;
        /**
         *
         * Apply an "Icon" filter to the column for the given icon.
         *
         * 
         *
         * @param icon - The icons of the cells to show.
         */
        applyIconFilter(icon: Excel.Icon): void;
        /**
         *
         * Apply a "Top Item" filter to the column for the given number of elements.
         *
         * 
         *
         * @param count - The number of elements from the top to show.
         */
        applyTopItemsFilter(count: number): void;
        /**
         *
         * Apply a "Top Percent" filter to the column for the given percentage of elements.
         *
         * 
         *
         * @param percent - The percentage of elements from the top to show.
         */
        applyTopPercentFilter(percent: number): void;
        /**
         *
         * Apply a "Values" filter to the column for the given values.
         *
         * 
         *
         * @param values - The list of values to show. This must be an array of strings or an array of Excel.FilterDateTime objects.
         */
        applyValuesFilter(values: Array<string | FilterDatetime>): void;
        /**
         *
         * Clear the filter on the given column.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Filter;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Filter;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Filter object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the filtering criteria applied to a column.
     *
     * 
     */
    export interface FilterCriteria {
        /**
         *
         * The HTML color string used to filter cells. Used with "cellColor" and "fontColor" filtering.
         *
         * 
         */
        color?: string;
        /**
         *
         * The first criterion used to filter data. Used as an operator in the case of "custom" filtering.
             For example ">50" for number greater than 50 or "=*s" for values ending in "s".
            
             Used as a number in the case of top/bottom items/percents. E.g. "5" for the top 5 items if filterOn is set to "topItems"
         *
         * 
         */
        criterion1?: string;
        /**
         *
         * The second criterion used to filter data. Only used as an operator in the case of "custom" filtering.
         *
         * 
         */
        criterion2?: string;
        /**
         *
         * The dynamic criteria from the Excel.DynamicFilterCriteria set to apply on this column. Used with "dynamic" filtering.
         *
         * 
         */
        dynamicCriteria?: Excel.DynamicFilterCriteria | "Unknown" | "AboveAverage" | "AllDatesInPeriodApril" | "AllDatesInPeriodAugust" | "AllDatesInPeriodDecember" | "AllDatesInPeriodFebruray" | "AllDatesInPeriodJanuary" | "AllDatesInPeriodJuly" | "AllDatesInPeriodJune" | "AllDatesInPeriodMarch" | "AllDatesInPeriodMay" | "AllDatesInPeriodNovember" | "AllDatesInPeriodOctober" | "AllDatesInPeriodQuarter1" | "AllDatesInPeriodQuarter2" | "AllDatesInPeriodQuarter3" | "AllDatesInPeriodQuarter4" | "AllDatesInPeriodSeptember" | "BelowAverage" | "LastMonth" | "LastQuarter" | "LastWeek" | "LastYear" | "NextMonth" | "NextQuarter" | "NextWeek" | "NextYear" | "ThisMonth" | "ThisQuarter" | "ThisWeek" | "ThisYear" | "Today" | "Tomorrow" | "YearToDate" | "Yesterday";
        /**
         *
         * The property used by the filter to determine whether the values should stay visible.
         *
         * 
         */
        filterOn: Excel.FilterOn | "BottomItems" | "BottomPercent" | "CellColor" | "Dynamic" | "FontColor" | "Values" | "TopItems" | "TopPercent" | "Icon" | "Custom";
        /**
         *
         * The icon used to filter cells. Used with "icon" filtering.
         *
         * 
         */
        icon?: Excel.Icon;
        /**
         *
         * The operator used to combine criterion 1 and 2 when using "custom" filtering.
         *
         * 
         */
        operator?: Excel.FilterOperator | "And" | "Or";
        /**
         *
         * The property used by the filter to do rich filter on richvalues.
         *
         * 
         */
        subField?: string;
        /**
         *
         * The set of values to be used as part of "values" filtering.
         *
         * 
         */
        values?: Array<string | FilterDatetime>;
    }
    /**
     *
     * Represents how to filter a date when filtering on values.
     *
     * 
     */
    export interface FilterDatetime {
        /**
         *
         * The date in ISO8601 format used to filter data.
         *
         * 
         */
        date: string;
        /**
         *
         * How specific the date should be used to keep data. For example, if the date is 2005-04-02 and the specifity is set to "month", the filter operation will keep all rows with a date in the month of april 2009.
         *
         * 
         */
        specificity: Excel.FilterDatetimeSpecificity | "Year" | "Month" | "Day" | "Hour" | "Minute" | "Second";
    }
    /**
     *
     * Represents the AutoFilter object.
            AutoFilter turns the values in Excel column into specific filters based on the cell contents.
     *
     * 
     */
    export class AutoFilter{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * An array that holds all the filter criteria in the autofiltered range. Read-Only.
         *
         * 
         */
        readonly criteria: Excel.FilterCriteria[];
        /**
         *
         * Indicates if the AutoFilter is enabled or not. Read-Only.
         *
         * 
         */
        readonly enabled: boolean;
        /**
         *
         * Indicates if the AutoFilter has filter criteria. Read-Only.
         *
         * 
         */
        readonly isDataFiltered: boolean;
        /**
         *
         * Applies the AutoFilter to a range. This filters the column if column index and filter criteria are specified.
         *
         * 
         *
         * @param range - The range over which the AutoFilter will apply on.
         * @param columnIndex - The zero-based column index to which the AutoFilter is applied.
         * @param criteria - The filter criteria.
         */
        apply(range: Range | string, columnIndex?: number, criteria?: Excel.FilterCriteria): void;
        /**
         *
         * Clears the filter criteria of the AutoFilter.
         *
         * 
         */
        clearCriteria(): void;
        /**
         *
         * Returns the Range object that represents the range to which the AutoFilter applies.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Returns the Range object that represents the range to which the AutoFilter applies.
            If there is no Range object associated with the AutoFilter, this method returns a null object.
         *
         * 
         */
        getRangeOrNullObject(): Excel.Range;
        /**
         *
         * Applies the specified Autofilter object currently on the range.
         *
         * 
         */
        reapply(): void;
        /**
         *
         * Removes the AutoFilter for the range.
         *
         * 
         */
        remove(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.AutoFilter;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.AutoFilter;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.AutoFilter object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.AutoFilterData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a cell icon.
     *
     * 
     */
    export interface Icon {
        /**
         *
         * Represents the index of the icon in the given set.
         *
         * 
         */
        index: number;
        /**
         *
         * Represents the set that the icon is part of.
         *
         * 
         */
        set: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes";
    }
    /**
     *
     * A scoped collection of custom XML parts.
            A scoped collection is the result of some operation, e.g. filtering by namespace.
            A scoped collection cannot be scoped any further.
     *
     * 
     */
    export class CustomXmlPartScopedCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.CustomXmlPart[];
        /**
         *
         * Gets the number of CustomXML parts in this collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a custom XML part based on its ID.
         *
         * 
         *
         * @param id - ID of the object to be retrieved.
         */
        getItem(id: string): Excel.CustomXmlPart;
        /**
         *
         * Gets a custom XML part based on its ID.
            If the CustomXmlPart does not exist, the return object's isNull property will be true.
         *
         * 
         *
         * @param id - ID of the object to be retrieved.
         */
        getItemOrNullObject(id: string): Excel.CustomXmlPart;
        /**
         *
         * If the collection contains exactly one item, this method returns it.
            Otherwise, this method produces an error.
         *
         * 
         */
        getOnlyItem(): Excel.CustomXmlPart;
        /**
         *
         * If the collection contains exactly one item, this method returns it.
            Otherwise, this method returns Null.
         *
         * 
         */
        getOnlyItemOrNullObject(): Excel.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * A collection of custom XML parts.
     *
     * 
     */
    export class CustomXmlPartCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.CustomXmlPart[];
        /**
         *
         * Adds a new custom XML part to the workbook.
         *
         * 
         *
         * @param xml - XML content. Must be a valid XML fragment.
         */
        add(xml: string): Excel.CustomXmlPart;
        /**
         *
         * Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.
         *
         * 
         *
         * @param namespaceUri - This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".
         */
        getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;
        /**
         *
         * Gets the number of CustomXml parts in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a custom XML part based on its ID.
         *
         * 
         *
         * @param id - ID of the object to be retrieved.
         */
        getItem(id: string): Excel.CustomXmlPart;
        /**
         *
         * Gets a custom XML part based on its ID.
            If the CustomXmlPart does not exist, the return object's isNull property will be true.
         *
         * 
         *
         * @param id - ID of the object to be retrieved.
         */
        getItemOrNullObject(id: string): Excel.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a custom XML part object in a workbook.
     *
     * 
     */
    export class CustomXmlPart{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The custom XML part's ID. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * The custom XML part's namespace URI. Read-only.
         *
         * 
         */
        readonly namespaceUri: string;
        /**
         *
         * Deletes the custom XML part.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the custom XML part's full XML content.
         *
         * 
         */
        getXml(): ClientResult<string>;
        /**
         *
         * Sets the custom XML part's full XML content.
         *
         * 
         *
         * @param xml - XML content for the part.
         */
        setXml(xml: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomXmlPart;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.CustomXmlPart;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the PivotTables that are part of the workbook or worksheet.
     *
     * 
     */
    export class PivotTableCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PivotTable[];
        /**
         *
         * Add a Pivottable based on the specified source data and insert it at the top left cell of the destination range.
         *
         * 
         *
         * @param name - The name of the new PivotTable.
         * @param source - The source data for the new PivotTable, this can either be a range (or string address including the worksheet name) or a table.
         * @param destination - The cell in the upper-left corner of the PivotTable report's destination range (the range on the worksheet where the resulting report will be placed).
         * @returns Returns the newly inserted PivotTable.
         */
        add(name: string, source: Range | string | Table, destination: Range | string): Excel.PivotTable;
        /**
         *
         * Gets the number of pivot tables in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a PivotTable by name.
         *
         * 
         *
         * @param name - Name of the PivotTable to be retrieved.
         */
        getItem(name: string): Excel.PivotTable;
        /**
         *
         * Gets a PivotTable by name. If the PivotTable does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the PivotTable to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.PivotTable;
        /**
         *
         * Refreshes all the pivot tables in the collection.
         *
         * 
         */
        refreshAll(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotTableCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PivotTableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents an Excel PivotTable.
            To learn more about the PivotTable object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-pivottables | Work with PivotTables using the Excel JavaScript API}.
     *
     * 
     */
    export class PivotTable{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The Column Pivot Hierarchies of the PivotTable.
         *
         * 
         */
        readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;
        /**
         *
         * The Data Pivot Hierarchies of the PivotTable.
         *
         * 
         */
        readonly dataHierarchies: Excel.DataPivotHierarchyCollection;
        /**
         *
         * The Filter Pivot Hierarchies of the PivotTable.
         *
         * 
         */
        readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;
        /**
         *
         * The Pivot Hierarchies of the PivotTable.
         *
         * 
         */
        readonly hierarchies: Excel.PivotHierarchyCollection;
        /**
         *
         * The PivotLayout describing the layout and visual structure of the PivotTable.
         *
         * 
         */
        readonly layout: Excel.PivotLayout;
        /**
         *
         * The Row Pivot Hierarchies of the PivotTable.
         *
         * 
         */
        readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;
        /**
         *
         * The worksheet containing the current PivotTable.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Specifies whether the PivotTable allows values in the data body to be edited by the user.
         *
         * 
         */
        enableDataValueEditing: boolean;
        /**
         *
         * Id of the PivotTable. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the PivotTable.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies whether the PivotTable uses custom lists when sorting.
         *
         * 
         */
        useCustomSortLists: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotTable): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotTable): void;
        /**
         *
         * Deletes the PivotTable.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Refreshes the PivotTable.
         *
         * 
         */
        refresh(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotTable;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotTable;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotTable object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the visual layout of the PivotTable.
     *
     * 
     */
    export class PivotLayout{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Specifies whether formatting will be automatically formatted when it’s refreshed or when fields are moved
         *
         * 
         */
        autoFormat: boolean;
        /**
         *
         * Specifies whether the field list can be shown in the UI.
         *
         * 
         */
        enableFieldList: boolean;
        /**
         *
         * This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this will be null.
         *
         * 
         */
        layoutType: Excel.PivotLayoutType | "Compact" | "Tabular" | "Outline";
        /**
         *
         * Specifies whether formatting is preserved when the report is refreshed or recalculated by operations such as pivoting, sorting, or changing page field items.
         *
         * 
         */
        preserveFormatting: boolean;
        /**
         *
         * Specifies whether the PivotTable report shows grand totals for columns.
         *
         * 
         */
        showColumnGrandTotals: boolean;
        /**
         *
         * Specifies whether the PivotTable report shows grand totals for rows.
         *
         * 
         */
        showRowGrandTotals: boolean;
        /**
         *
         * This property indicates the SubtotalLocationType of all fields on the PivotTable. If fields have different states, this will be null.
         *
         * 
         */
        subtotalLocation: Excel.SubtotalLocationType | "AtTop" | "AtBottom" | "Off";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotLayout): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotLayout): void;
        /**
         *
         * Returns the range where the PivotTable's column labels reside.
         *
         * 
         */
        getColumnLabelRange(): Excel.Range;
        /**
         *
         * Returns the range where the PivotTable's data values reside.
         *
         * 
         */
        getDataBodyRange(): Excel.Range;
        /**
         *
         * Gets the DataHierarchy that is used to calculate the value in a specified range within the PivotTable.
         *
         * 
         *
         * @param cell - A single cell within the PivotTable data body.
         * @returns The DataPivotHierarchy object used to calculate the value in the specified cell.
         */
        getDataHierarchy(cell: Range | string): Excel.DataPivotHierarchy;
        /**
         *
         * Returns the range of the PivotTable's filter area.
         *
         * 
         */
        getFilterAxisRange(): Excel.Range;
        /**
         *
         * Gets the PivotItems from an axis that make up the value in a specified range within the PivotTable.
         *
         * 
         *
         * @param axis - The axis from which to get the PivotItems. Must be either "row" or "column."
         * @param cell - A single cell within the PivotTable's data body.
         * @returns A collection of PivotItems that are used to calculate the values in the specified row.
         */
        getPivotItems(axis: Excel.PivotAxis, cell: Range | string): ClientResult<Excel.PivotItem[]>;
        /**
         *
         * Gets the PivotItems from an axis that make up the value in a specified range within the PivotTable.
         *
         * 
         *
         * @param axisString - The axis from which to get the PivotItems. Must be either "row" or "column."
         * @param cell - A single cell within the PivotTable's data body.
         * @returns A collection of PivotItems that are used to calculate the values in the specified row.
         */
        getPivotItems(axisString: "Unknown" | "Row" | "Column" | "Data" | "Filter", cell: Range | string): ClientResult<Excel.PivotItem[]>;
        /**
         *
         * Returns the range the PivotTable exists on, excluding the filter area.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Returns the range where the PivotTable's row labels reside.
         *
         * 
         */
        getRowLabelRange(): Excel.Range;
        /**
         *
         * Sets the PivotTable to automatically sort using the specified cell to automatically select all necessary criteria and context. This behaves identically to applying an autosort from the UI.
         *
         * 
         *
         * @param cell - A single cell to use get the criteria from for applying the autosort.
         * @param sortBy - The direction of the sort.
         */
        setAutoSortOnCell(cell: Range | string, sortBy: Excel.SortBy): void;
        /**
         *
         * Sets the PivotTable to automatically sort using the specified cell to automatically select all necessary criteria and context. This behaves identically to applying an autosort from the UI.
         *
         * 
         *
         * @param cell - A single cell to use get the criteria from for applying the autosort.
         * @param sortByString - The direction of the sort.
         */
        setAutoSortOnCell(cell: Range | string, sortByString: "Ascending" | "Descending"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotLayout;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotLayout;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotLayout object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotLayoutData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the PivotHierarchies that are part of the PivotTable.
     *
     * 
     */
    export class PivotHierarchyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PivotHierarchy[];
        /**
         *
         * Gets the number of pivot hierarchies in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a PivotHierarchy by its name or id.
         *
         * 
         *
         * @param name - Name of the PivotHierarchy to be retrieved.
         */
        getItem(name: string): Excel.PivotHierarchy;
        /**
         *
         * Gets a PivotHierarchy by name. If the PivotHierarchy does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the PivotHierarchy to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.PivotHierarchy;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotHierarchyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotHierarchyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel PivotHierarchy.
     *
     * 
     */
    export class PivotHierarchy{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the PivotFields associated with the PivotHierarchy.
         *
         * 
         */
        readonly fields: Excel.PivotFieldCollection;
        /**
         *
         * Id of the PivotHierarchy.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the PivotHierarchy.
         *
         * 
         */
        name: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotHierarchy): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotHierarchy): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotHierarchy;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotHierarchy;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of RowColumnPivotHierarchy items associated with the PivotTable.
     *
     * 
     */
    export class RowColumnPivotHierarchyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.RowColumnPivotHierarchy[];
        /**
         *
         * Adds the PivotHierarchy to the current axis. If the hierarchy is present elsewhere on the row, column,
            or filter axis, it will be removed from that location.
         *
         * 
         */
        add(pivotHierarchy: Excel.PivotHierarchy): Excel.RowColumnPivotHierarchy;
        /**
         *
         * Gets the number of pivot hierarchies in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a RowColumnPivotHierarchy by its name or id.
         *
         * 
         *
         * @param name - Name of the RowColumnPivotHierarchy to be retrieved.
         */
        getItem(name: string): Excel.RowColumnPivotHierarchy;
        /**
         *
         * Gets a RowColumnPivotHierarchy by name. If the RowColumnPivotHierarchy does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the RowColumnPivotHierarchy to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.RowColumnPivotHierarchy;
        /**
         *
         * Removes the PivotHierarchy from the current axis.
         *
         * 
         */
        remove(rowColumnPivotHierarchy: Excel.RowColumnPivotHierarchy): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RowColumnPivotHierarchyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.RowColumnPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RowColumnPivotHierarchyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel RowColumnPivotHierarchy.
     *
     * 
     */
    export class RowColumnPivotHierarchy{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the PivotFields associated with the RowColumnPivotHierarchy.
         *
         * 
         */
        readonly fields: Excel.PivotFieldCollection;
        /**
         *
         * Id of the RowColumnPivotHierarchy.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the RowColumnPivotHierarchy.
         *
         * 
         */
        name: string;
        /**
         *
         * Position of the RowColumnPivotHierarchy.
         *
         * 
         */
        position: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.RowColumnPivotHierarchy): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.RowColumnPivotHierarchy): void;
        /**
         *
         * Reset the RowColumnPivotHierarchy back to its default values.
         *
         * 
         */
        setToDefault(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RowColumnPivotHierarchy;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.RowColumnPivotHierarchy;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.RowColumnPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RowColumnPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of FilterPivotHierarchy items associated with the PivotTable.
     *
     * 
     */
    export class FilterPivotHierarchyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.FilterPivotHierarchy[];
        /**
         *
         * Adds the PivotHierarchy to the current axis. If the hierarchy is present elsewhere on the row, column,
            or filter axis, it will be removed from that location.
         *
         * 
         */
        add(pivotHierarchy: Excel.PivotHierarchy): Excel.FilterPivotHierarchy;
        /**
         *
         * Gets the number of pivot hierarchies in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a FilterPivotHierarchy by its name or id.
         *
         * 
         *
         * @param name - Name of the FilterPivotHierarchy to be retrieved.
         */
        getItem(name: string): Excel.FilterPivotHierarchy;
        /**
         *
         * Gets a FilterPivotHierarchy by name. If the FilterPivotHierarchy does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the FilterPivotHierarchy to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.FilterPivotHierarchy;
        /**
         *
         * Removes the PivotHierarchy from the current axis.
         *
         * 
         */
        remove(filterPivotHierarchy: Excel.FilterPivotHierarchy): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.FilterPivotHierarchyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.FilterPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterPivotHierarchyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel FilterPivotHierarchy.
     *
     * 
     */
    export class FilterPivotHierarchy{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the PivotFields associated with the FilterPivotHierarchy.
         *
         * 
         */
        readonly fields: Excel.PivotFieldCollection;
        /**
         *
         * Determines whether to allow multiple filter items.
         *
         * 
         */
        enableMultipleFilterItems: boolean;
        /**
         *
         * Id of the FilterPivotHierarchy.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the FilterPivotHierarchy.
         *
         * 
         */
        name: string;
        /**
         *
         * Position of the FilterPivotHierarchy.
         *
         * 
         */
        position: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.FilterPivotHierarchy): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.FilterPivotHierarchy): void;
        /**
         *
         * Reset the FilterPivotHierarchy back to its default values.
         *
         * 
         */
        setToDefault(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.FilterPivotHierarchy;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.FilterPivotHierarchy;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.FilterPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of DataPivotHierarchy items associated with the PivotTable.
     *
     * 
     */
    export class DataPivotHierarchyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.DataPivotHierarchy[];
        /**
         *
         * Adds the PivotHierarchy to the current axis.
         *
         * 
         */
        add(pivotHierarchy: Excel.PivotHierarchy): Excel.DataPivotHierarchy;
        /**
         *
         * Gets the number of pivot hierarchies in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a DataPivotHierarchy by its name or id.
         *
         * 
         *
         * @param name - Name of the DataPivotHierarchy to be retrieved.
         */
        getItem(name: string): Excel.DataPivotHierarchy;
        /**
         *
         * Gets a DataPivotHierarchy by name. If the DataPivotHierarchy does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the DataPivotHierarchy to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.DataPivotHierarchy;
        /**
         *
         * Removes the PivotHierarchy from the current axis.
         *
         * 
         */
        remove(DataPivotHierarchy: Excel.DataPivotHierarchy): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.DataPivotHierarchyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.DataPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataPivotHierarchyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel DataPivotHierarchy.
     *
     * 
     */
    export class DataPivotHierarchy{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the PivotFields associated with the DataPivotHierarchy.
         *
         * 
         */
        readonly field: Excel.PivotField;
        /**
         *
         * Id of the DataPivotHierarchy.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the DataPivotHierarchy.
         *
         * 
         */
        name: string;
        /**
         *
         * Number format of the DataPivotHierarchy.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * Position of the DataPivotHierarchy.
         *
         * 
         */
        position: number;
        /**
         *
         * Determines whether the data should be shown as a specific summary calculation or not.
         *
         * 
         */
        showAs: Excel.ShowAsRule;
        /**
         *
         * Determines whether to show all items of the DataPivotHierarchy.
         *
         * 
         */
        summarizeBy: Excel.AggregationFunction | "Unknown" | "Automatic" | "Sum" | "Count" | "Average" | "Max" | "Min" | "Product" | "CountNumbers" | "StandardDeviation" | "StandardDeviationP" | "Variance" | "VarianceP";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.DataPivotHierarchy): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.DataPivotHierarchy): void;
        /**
         *
         * Reset the DataPivotHierarchy back to its default values.
         *
         * 
         */
        setToDefault(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.DataPivotHierarchy;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.DataPivotHierarchy;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.DataPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     * 
     */
    export interface ShowAsRule {
        /**
         *
         * The base PivotField to base the ShowAs calculation, if applicable based on the ShowAsCalculation type, else null.
         *
         * 
         */
        baseField?: Excel.PivotField;
        /**
         *
         * The base Item to base the ShowAs calculation on, if applicable based on the ShowAsCalculation type, else null.
         *
         * 
         */
        baseItem?: Excel.PivotItem;
        /**
         *
         * The ShowAs Calculation to use for the Data PivotField. See Excel.ShowAsCalculation for Details.
         *
         * 
         */
        calculation: Excel.ShowAsCalculation | "Unknown" | "None" | "PercentOfGrandTotal" | "PercentOfRowTotal" | "PercentOfColumnTotal" | "PercentOfParentRowTotal" | "PercentOfParentColumnTotal" | "PercentOfParentTotal" | "PercentOf" | "RunningTotal" | "PercentRunningTotal" | "DifferenceFrom" | "PercentDifferenceFrom" | "RankAscending" | "RankDecending" | "Index";
    }
    /**
     *
     * Represents a collection of all the PivotFields that are part of a PivotTable's hierarchy.
     *
     * 
     */
    export class PivotFieldCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PivotField[];
        /**
         *
         * Gets the number of pivot fields in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a PivotField by its name or id.
         *
         * 
         *
         * @param name - Name of the PivotField to be retrieved.
         */
        getItem(name: string): Excel.PivotField;
        /**
         *
         * Gets a PivotField by name. If the PivotField does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the PivotField to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.PivotField;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotFieldCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PivotFieldCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotFieldCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel PivotField.
     *
     * 
     */
    export class PivotField{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the PivotFields associated with the PivotField.
         *
         * 
         */
        readonly items: Excel.PivotItemCollection;
        /**
         *
         * Id of the PivotField.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Name of the PivotField.
         *
         * 
         */
        name: string;
        /**
         *
         * Determines whether to show all items of the PivotField.
         *
         * 
         */
        showAllItems: boolean;
        /**
         *
         * Subtotals of the PivotField.
         *
         * 
         */
        subtotals: Excel.Subtotals;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotField): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotField): void;
        /**
         *
         * Sorts the PivotField. If a DataPivotHierarchy is specified, then sort will be applied based on it, if not sort will be based on the PivotField itself.
         *
         * 
         *
         * @param sortBy - Represents whether the sorting is done in an ascending or descending order.
         */
        sortByLabels(sortBy: SortBy): void;
        /**
         *
         * Sorts the PivotField by specified values in a given scope. The scope defines which specific values will be used to sort when
            there are multiple values from the same DataPivotHierarchy.
         *
         * 
         *
         * @param sortBy - Represents whether the sorting is done in an ascending or descending order.
         * @param valuesHierarchy - Specifies the values hierarchy on the data axis to be used for sorting.
         * @param pivotItemScope - The items that should be used for the scope of the sorting. These will be the
            items that make up the row or column that you want to sort on. If a string is used instead of a PivotItem,
            the string represents the ID of the PivotItem. If there are no items other than data hierarchy on the axis
            you want to sort on, this can be empty.
         */
        sortByValues(sortBy: Excel.SortBy, valuesHierarchy: Excel.DataPivotHierarchy, pivotItemScope?: Array<PivotItem | string>): void;
        /**
         *
         * Sorts the PivotField by specified values in a given scope. The scope defines which specific values will be used to sort when
            there are multiple values from the same DataPivotHierarchy.
         *
         * 
         *
         * @param sortByString - Represents whether the sorting is done in an ascending or descending order.
         * @param valuesHierarchy - Specifies the values hierarchy on the data axis to be used for sorting.
         * @param pivotItemScope - The items that should be used for the scope of the sorting. These will be the
            items that make up the row or column that you want to sort on. If a string is used instead of a PivotItem,
            the string represents the ID of the PivotItem. If there are no items other than data hierarchy on the axis
            you want to sort on, this can be empty.
         */
        sortByValues(sortByString: "Ascending" | "Descending", valuesHierarchy: Excel.DataPivotHierarchy, pivotItemScope?: Array<PivotItem | string>): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotField;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotField;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotField object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotFieldData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the PivotItems related to their parent PivotField.
     *
     * 
     */
    export class PivotItemCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PivotItem[];
        /**
         *
         * Gets the number of PivotItems in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a PivotItem by its name or id.
         *
         * 
         *
         * @param name - Name of the PivotItem to be retrieved.
         */
        getItem(name: string): Excel.PivotItem;
        /**
         *
         * Gets a PivotItem by name. If the PivotItem does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the PivotItem to be retrieved.
         */
        getItemOrNullObject(name: string): Excel.PivotItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PivotItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotItemCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the Excel PivotItem.
     *
     * 
     */
    export class PivotItem{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Id of the PivotItem.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.
         *
         * 
         */
        isExpanded: boolean;
        /**
         *
         * Name of the PivotItem.
         *
         * 
         */
        name: string;
        /**
         *
         * Determines whether the PivotItem is visible or not.
         *
         * 
         */
        visible: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotItem): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotItem): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Subtotals for the Pivot Field.
     *
     * 
     */
    export interface Subtotals {
        /**
         *
         * If Automatic is set to true, then all other values will be ignored when setting the Subtotals.
         *
         * 
         */
        automatic?: boolean;
        average?: boolean;
        count?: boolean;
        countNumbers?: boolean;
        max?: boolean;
        min?: boolean;
        product?: boolean;
        standardDeviation?: boolean;
        standardDeviationP?: boolean;
        sum?: boolean;
        variance?: boolean;
        varianceP?: boolean;
    }
    /**
     *
     * Represents the criteria for the top/bottom values filter.
     *
     * 
     */
    enum PivotFilterTopBottomCriterion {
        invalid = "Invalid",
        topItems = "TopItems",
        topPercent = "TopPercent",
        topSum = "TopSum",
        bottomItems = "BottomItems",
        bottomPercent = "BottomPercent",
        bottomSum = "BottomSum"
    }
    /**
     *
     * Represents the sort direction.
     *
     * 
     */
    enum SortBy {
        /**
         *
         * Ascending sort. Smallest to largest or A to Z.
         *
         */
        ascending = "Ascending",
        /**
         *
         * Descending sort. Largest to smallest or Z to A.
         *
         */
        descending = "Descending"
    }
    /**
     *
     * Aggregation Function for the Data Pivot Field.
     *
     * 
     */
    enum AggregationFunction {
        /**
         *
         * Aggregation function is unknown or unsupported.
         *
         */
        unknown = "Unknown",
        /**
         *
         * Excel will automatically select the aggregation based on the data items.
         *
         */
        automatic = "Automatic",
        /**
         *
         * Aggregate using the sum of the data, equivalent to the SUM function.
         *
         */
        sum = "Sum",
        /**
         *
         * Aggregate using the count of items in the data, equivalent to the COUNTA function.
         *
         */
        count = "Count",
        /**
         *
         * Aggregate using the average of the data, equivalent to the AVERAGE function.
         *
         */
        average = "Average",
        /**
         *
         * Aggregate using the maximum value of the data, equivalent to the MAX function.
         *
         */
        max = "Max",
        /**
         *
         * Aggregate using the minimum value of the data, equivalent to the MIN function.
         *
         */
        min = "Min",
        /**
         *
         * Aggregate using the product of the data, equivalent to the PRODUCT function.
         *
         */
        product = "Product",
        /**
         *
         * Aggregate using the count of numbers in the data, equivalent to the COUNT function.
         *
         */
        countNumbers = "CountNumbers",
        /**
         *
         * Aggregate using the standard deviation of the data, equivalent to the STDEV function.
         *
         */
        standardDeviation = "StandardDeviation",
        /**
         *
         * Aggregate using the standard deviation of the data, equivalent to the STDEVP function.
         *
         */
        standardDeviationP = "StandardDeviationP",
        /**
         *
         * Aggregate using the variance of the data, equivalent to the VAR function.
         *
         */
        variance = "Variance",
        /**
         *
         * Aggregate using the variance of the data, equivalent to the VARP function.
         *
         */
        varianceP = "VarianceP"
    }
    /**
     *
     * The ShowAs Calculation function for the Data Pivot Field.
     *
     * 
     */
    enum ShowAsCalculation {
        /**
         *
         * Calculation is unknown or unsupported.
         *
         */
        unknown = "Unknown",
        /**
         *
         * No calculation is applied.
         *
         */
        none = "None",
        /**
         *
         * Percent of the grand total.
         *
         */
        percentOfGrandTotal = "PercentOfGrandTotal",
        /**
         *
         * Percent of the row total.
         *
         */
        percentOfRowTotal = "PercentOfRowTotal",
        /**
         *
         * Percent of the column total.
         *
         */
        percentOfColumnTotal = "PercentOfColumnTotal",
        /**
         *
         * Percent of the row total for the specified Base Field.
         *
         */
        percentOfParentRowTotal = "PercentOfParentRowTotal",
        /**
         *
         * Percent of the column total for the specified Base Field.
         *
         */
        percentOfParentColumnTotal = "PercentOfParentColumnTotal",
        /**
         *
         * Percent of the grand total for the specified Base Field.
         *
         */
        percentOfParentTotal = "PercentOfParentTotal",
        /**
         *
         * Percent of the specified Base Field and Base Item.
         *
         */
        percentOf = "PercentOf",
        /**
         *
         * Running Total of the specified Base Field.
         *
         */
        runningTotal = "RunningTotal",
        /**
         *
         * Percent Running Total of the specified Base Field.
         *
         */
        percentRunningTotal = "PercentRunningTotal",
        /**
         *
         * Difference from the specified Base Field and Base Item.
         *
         */
        differenceFrom = "DifferenceFrom",
        /**
         *
         * Difference from the specified Base Field and Base Item.
         *
         */
        percentDifferenceFrom = "PercentDifferenceFrom",
        /**
         *
         * Ascending Rank of the specified Base Field.
         *
         */
        rankAscending = "RankAscending",
        /**
         *
         * Descending Rank of the specified Base Field.
         *
         */
        rankDecending = "RankDecending",
        /**
         *
         * Calculates the values as follows:
            ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total))
         *
         */
        index = "Index"
    }
    /**
     *
     * The ShowAs Calculation function for the Data Pivot Field.
     *
     * 
     */
    enum PivotAxis {
        /**
         *
         * The axis or region is unknown or unsupported.
         *
         */
        unknown = "Unknown",
        /**
         *
         * The row axis.
         *
         */
        row = "Row",
        /**
         *
         * The column axis.
         *
         */
        column = "Column",
        /**
         *
         * The data axis.
         *
         */
        data = "Data",
        /**
         *
         * The filter axis.
         *
         */
        filter = "Filter"
    }
    /**
     *
     * Represents workbook properties.
     *
     * 
     */
    export class DocumentProperties{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the collection of custom properties of the workbook. Read only.
         *
         * 
         */
        readonly custom: Excel.CustomPropertyCollection;
        /**
         *
         * Gets or sets the author of the workbook.
         *
         * 
         */
        author: string;
        /**
         *
         * Gets or sets the category of the workbook.
         *
         * 
         */
        category: string;
        /**
         *
         * Gets or sets the comments of the workbook.
         *
         * 
         */
        comments: string;
        /**
         *
         * Gets or sets the company of the workbook.
         *
         * 
         */
        company: string;
        /**
         *
         * Gets the creation date of the workbook. Read only.
         *
         * 
         */
        readonly creationDate: Date;
        /**
         *
         * Gets or sets the keywords of the workbook.
         *
         * 
         */
        keywords: string;
        /**
         *
         * Gets the last author of the workbook. Read only.
         *
         * 
         */
        readonly lastAuthor: string;
        /**
         *
         * Gets or sets the manager of the workbook.
         *
         * 
         */
        manager: string;
        /**
         *
         * Gets the revision number of the workbook. Read only.
         *
         * 
         */
        revisionNumber: number;
        /**
         *
         * Gets or sets the subject of the workbook.
         *
         * 
         */
        subject: string;
        /**
         *
         * Gets or sets the title of the workbook.
         *
         * 
         */
        title: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.DocumentProperties): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.DocumentProperties): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.DocumentProperties;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.DocumentProperties;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.DocumentProperties object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DocumentPropertiesData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a custom property.
     *
     * 
     */
    export class CustomProperty{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the key of the custom property. Read only.
         *
         * 
         */
        readonly key: string;
        /**
         *
         * Gets the value type of the custom property. Read only.
         *
         * 
         */
        readonly type: Excel.DocumentPropertyType | "Number" | "Boolean" | "Date" | "String" | "Float";
        /**
         *
         * Gets or sets the value of the custom property.
         *
         * 
         */
        value: any;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.CustomProperty): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.CustomProperty): void;
        /**
         *
         * Deletes the custom property.
         *
         * 
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomProperty;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.CustomProperty;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.CustomProperty object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomPropertyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Contains the collection of customProperty objects.
     *
     * 
     */
    export class CustomPropertyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.CustomProperty[];
        /**
         *
         * Creates a new or sets an existing custom property.
         *
         * 
         *
         * @param key - Required. The custom property's key, which is case-insensitive.
         * @param value - Required. The custom property's value.
         */
        add(key: string, value: any): Excel.CustomProperty;
        /**
         *
         * Deletes all custom properties in this collection.
         *
         * 
         */
        deleteAll(): void;
        /**
         *
         * Gets the count of custom properties.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a custom property object by its key, which is case-insensitive. Throws if the custom property does not exist.
         *
         * 
         *
         * @param key - The key that identifies the custom property object.
         */
        getItem(key: string): Excel.CustomProperty;
        /**
         *
         * Gets a custom property object by its key, which is case-insensitive. Returns a null object if the custom property does not exist.
         *
         * 
         *
         * @param key - Required. The key that identifies the custom property object.
         */
        getItemOrNullObject(key: string): Excel.CustomProperty;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomPropertyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.CustomPropertyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomPropertyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a collection of all the conditional formats that are overlap the range.
     *
     * 
     */
    export class ConditionalFormatCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ConditionalFormat[];
        /**
         *
         * Adds a new conditional format to the collection at the first/top priority.
         *
         * 
         *
         * @param type - The type of conditional format being added. See Excel.ConditionalFormatType for details.
         */
        add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;
        /**
         *
         * Adds a new conditional format to the collection at the first/top priority.
         *
         * 
         *
         * @param typeString - The type of conditional format being added. See Excel.ConditionalFormatType for details.
         */
        add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;
        /**
         *
         * Clears all conditional formats active on the current specified range.
         *
         * 
         */
        clearAll(): void;
        /**
         *
         * Returns the number of conditional formats in the workbook. Read-only.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Returns a conditional format for the given ID.
         *
         * 
         *
         * @param id - The id of the conditional format.
         * @returns Conditional Format object.
         */
        getItem(id: string): Excel.ConditionalFormat;
        /**
         *
         * Returns a conditional format at the given index.
         *
         * 
         *
         * @param index - Index of the conditional formats to be retrieved.
         */
        getItemAt(index: number): Excel.ConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * An object encapsulating a conditional format's range, format, rule, and other properties.
            To learn more about the conditional formatting object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting | Apply conditional formatting to Excel ranges}.
     *
     * 
     */
    export class ConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the cell value conditional format properties if the current conditional format is a CellValue type.
            For example to format all cells between 5 and 10. Read-only.
         *
         * 
         */
        readonly cellValue: Excel.CellValueConditionalFormat;
        /**
         *
         * Returns the cell value conditional format properties if the current conditional format is a CellValue type.
            For example to format all cells between 5 and 10. Read-only.
         *
         * 
         */
        readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;
        /**
         *
         * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.
         *
         * 
         */
        readonly colorScale: Excel.ColorScaleConditionalFormat;
        /**
         *
         * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.
         *
         * 
         */
        readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;
        /**
         *
         * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.
         *
         * 
         */
        readonly custom: Excel.CustomConditionalFormat;
        /**
         *
         * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.
         *
         * 
         */
        readonly customOrNullObject: Excel.CustomConditionalFormat;
        /**
         *
         * Returns the data bar properties if the current conditional format is a data bar. Read-only.
         *
         * 
         */
        readonly dataBar: Excel.DataBarConditionalFormat;
        /**
         *
         * Returns the data bar properties if the current conditional format is a data bar. Read-only.
         *
         * 
         */
        readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;
        /**
         *
         * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.
         *
         * 
         */
        readonly iconSet: Excel.IconSetConditionalFormat;
        /**
         *
         * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.
         *
         * 
         */
        readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;
        /**
         *
         * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.
         *
         * 
         */
        readonly preset: Excel.PresetCriteriaConditionalFormat;
        /**
         *
         * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.
         *
         * 
         */
        readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;
        /**
         *
         * Returns the specific text conditional format properties if the current conditional format is a text type.
            For example to format cells matching the word "Text". Read-only.
         *
         * 
         */
        readonly textComparison: Excel.TextConditionalFormat;
        /**
         *
         * Returns the specific text conditional format properties if the current conditional format is a text type.
            For example to format cells matching the word "Text". Read-only.
         *
         * 
         */
        readonly textComparisonOrNullObject: Excel.TextConditionalFormat;
        /**
         *
         * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.
            For example to format the top 10% or bottom 10 items. Read-only.
         *
         * 
         */
        readonly topBottom: Excel.TopBottomConditionalFormat;
        /**
         *
         * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.
            For example to format the top 10% or bottom 10 items. Read-only.
         *
         * 
         */
        readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;
        /**
         *
         * The Priority of the Conditional Format within the current ConditionalFormatCollection. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also
            changes other conditional formats' priorities, to allow for a contiguous priority order.
            Use a negative priority to begin from the back.
            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.
            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.
         *
         * 
         */
        priority: number;
        /**
         *
         * If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.
            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these
         *
         * 
         */
        stopIfTrue: boolean;
        /**
         *
         * A type of conditional format. Only one can be set at a time. Read-only.
         *
         * 
         */
        readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalFormat): void;
        /**
         *
         * Deletes this conditional format.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Returns the range the conditonal format is applied to. Throws an error if the conditional format is applied to multiple ranges. Read-only.
         *
         * 
         */
        getRange(): Excel.Range;
        /**
         *
         * Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges. Read-only.
         *
         * 
         */
        getRangeOrNullObject(): Excel.Range;
        /**
         *
         * Returns the RangeAreas, comprising one or more rectangular ranges, the conditonal format is applied to. Read-only.
         *
         * 
         */
        getRanges(): Excel.RangeAreas;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an Excel Conditional Data Bar Type.
     *
     * 
     */
    export class DataBarConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Representation of all values to the left of the axis in an Excel data bar. Read-only.
         *
         * 
         */
        readonly negativeFormat: Excel.ConditionalDataBarNegativeFormat;
        /**
         *
         * Representation of all values to the right of the axis in an Excel data bar. Read-only.
         *
         * 
         */
        readonly positiveFormat: Excel.ConditionalDataBarPositiveFormat;
        /**
         *
         * HTML color code representing the color of the Axis line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
            "" (empty string) if no axis is present or set.
         *
         * 
         */
        axisColor: string;
        /**
         *
         * Representation of how the axis is determined for an Excel data bar.
         *
         * 
         */
        axisFormat: Excel.ConditionalDataBarAxisFormat | "Automatic" | "None" | "CellMidPoint";
        /**
         *
         * Represents the direction that the data bar graphic should be based on.
         *
         * 
         */
        barDirection: Excel.ConditionalDataBarDirection | "Context" | "LeftToRight" | "RightToLeft";
        /**
         *
         * The rule for what consistutes the lower bound (and how to calculate it, if applicable) for a data bar.
            The `ConditionalDataBarRule` object must be set as a JSON object (use `x.lowerBoundRule = {...}` instead of `x.lowerBoundRule.formula = ...`).
         *
         * 
         */
        lowerBoundRule: Excel.ConditionalDataBarRule;
        /**
         *
         * If true, hides the values from the cells where the data bar is applied.
         *
         * 
         */
        showDataBarOnly: boolean;
        /**
         *
         * The rule for what constitutes the upper bound (and how to calculate it, if applicable) for a data bar.
            The `ConditionalDataBarRule` object must be set as a JSON object (use `x.upperBoundRule = {...}` instead of `x.upperBoundRule.formula = ...`).
         *
         * 
         */
        upperBoundRule: Excel.ConditionalDataBarRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.DataBarConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.DataBarConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.DataBarConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.DataBarConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.DataBarConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataBarConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a conditional format DataBar Format for the positive side of the data bar.
     *
     * 
     */
    export class ConditionalDataBarPositiveFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
            "" (empty string) if no border is present or set.
         *
         * 
         */
        borderColor: string;
        /**
         *
         * HTML color code representing the fill color, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        fillColor: string;
        /**
         *
         * Boolean representation of whether or not the DataBar has a gradient.
         *
         * 
         */
        gradientFill: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalDataBarPositiveFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalDataBarPositiveFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalDataBarPositiveFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalDataBarPositiveFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalDataBarPositiveFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalDataBarPositiveFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a conditional format DataBar Format for the negative side of the data bar.
     *
     * 
     */
    export class ConditionalDataBarNegativeFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
            "Empty String" if no border is present or set.
         *
         * 
         */
        borderColor: string;
        /**
         *
         * HTML color code representing the fill color, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        fillColor: string;
        /**
         *
         * Boolean representation of whether or not the negative DataBar has the same border color as the positive DataBar.
         *
         * 
         */
        matchPositiveBorderColor: boolean;
        /**
         *
         * Boolean representation of whether or not the negative DataBar has the same fill color as the positive DataBar.
         *
         * 
         */
        matchPositiveFillColor: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalDataBarNegativeFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalDataBarNegativeFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalDataBarNegativeFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalDataBarNegativeFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalDataBarNegativeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalDataBarNegativeFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a rule-type for a Data Bar.
     *
     * 
     */
    export interface ConditionalDataBarRule {
        /**
         *
         * The formula, if required, to evaluate the databar rule on.
         *
         * 
         */
        formula?: string;
        /**
         *
         * The type of rule for the databar.
         *
         * 
         */
        type: Excel.ConditionalFormatRuleType | "Invalid" | "Automatic" | "LowestValue" | "HighestValue" | "Number" | "Percent" | "Formula" | "Percentile";
    }
    /**
     *
     * Represents a custom conditional format type.
     *
     * 
     */
    export class CustomConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.
         *
         * 
         */
        readonly format: Excel.ConditionalRangeFormat;
        /**
         *
         * Represents the Rule object on this conditional format. Read-only.
         *
         * 
         */
        readonly rule: Excel.ConditionalFormatRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.CustomConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.CustomConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CustomConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.CustomConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.CustomConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a rule, for all traditional rule/format pairings.
     *
     * 
     */
    export class ConditionalFormatRule{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The formula, if required, to evaluate the conditional format rule on.
         *
         * 
         */
        formula: string;
        /**
         *
         * The formula, if required, to evaluate the conditional format rule on in the user's language.
         *
         * 
         */
        formulaLocal: string;
        /**
         *
         * The formula, if required, to evaluate the conditional format rule on in R1C1-style notation.
         *
         * 
         */
        formulaR1C1: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalFormatRule): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalFormatRule): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalFormatRule;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalFormatRule;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalFormatRule object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatRuleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an IconSet criteria for conditional formatting.
     *
     * 
     */
    export class IconSetConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.
         *
         * 
         */
        criteria: Excel.ConditionalIconCriterion[];
        /**
         *
         * If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.
         *
         * 
         */
        reverseIconOrder: boolean;
        /**
         *
         * If true, hides the values and only shows icons.
         *
         * 
         */
        showIconOnly: boolean;
        /**
         *
         * If set, displays the IconSet option for the conditional format.
         *
         * 
         */
        style: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.IconSetConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.IconSetConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.IconSetConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.IconSetConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.IconSetConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IconSetConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an Icon Criterion which contains a type, value, an Operator, and an optional custom icon, if not using an iconset.
     *
     * 
     */
    export interface ConditionalIconCriterion {
        /**
         *
         * The custom icon for the current criterion if different from the default IconSet, else null will be returned.
         *
         * 
         */
        customIcon?: Excel.Icon;
        /**
         *
         * A number or a formula depending on the type.
         *
         * 
         */
        formula: string;
        /**
         *
         * GreaterThan or GreaterThanOrEqual for each of the rule type for the Icon conditional format.
         *
         * 
         */
        operator: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual";
        /**
         *
         * What the icon conditional formula should be based on.
         *
         * 
         */
        type: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile";
    }
    /**
     *
     * Represents an IconSet criteria for conditional formatting.
     *
     * 
     */
    export class ColorScaleConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The criteria of the color scale. Midpoint is optional when using a two point color scale.
         *
         * 
         */
        criteria: Excel.ConditionalColorScaleCriteria;
        /**
         *
         * If true the color scale will have three points (minimum, midpoint, maximum), otherwise it will have two (minimum, maximum).
         *
         * 
         */
        readonly threeColorScale: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ColorScaleConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ColorScaleConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ColorScaleConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ColorScaleConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ColorScaleConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ColorScaleConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the criteria of the color scale.
     *
     * 
     */
    export interface ConditionalColorScaleCriteria {
        /**
         *
         * The maximum point Color Scale Criterion.
         *
         * 
         */
        maximum: Excel.ConditionalColorScaleCriterion;
        /**
         *
         * The midpoint Color Scale Criterion if the color scale is a 3-color scale.
         *
         * 
         */
        midpoint?: Excel.ConditionalColorScaleCriterion;
        /**
         *
         * The minimum point Color Scale Criterion.
         *
         * 
         */
        minimum: Excel.ConditionalColorScaleCriterion;
    }
    /**
     *
     * Represents a Color Scale Criterion which contains a type, value, and a color.
     *
     * 
     */
    export interface ConditionalColorScaleCriterion {
        /**
         *
         * HTML color code representation of the color scale color. E.g. #FF0000 represents Red.
         *
         * 
         */
        color?: string;
        /**
         *
         * A number, a formula, or null (if Type is LowestValue).
         *
         * 
         */
        formula?: string;
        /**
         *
         * What the criterion conditional formula should be based on.
         *
         * 
         */
        type: Excel.ConditionalFormatColorCriterionType | "Invalid" | "LowestValue" | "HighestValue" | "Number" | "Percent" | "Formula" | "Percentile";
    }
    /**
     *
     * Represents a Top/Bottom conditional format.
     *
     * 
     */
    export class TopBottomConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.
         *
         * 
         */
        readonly format: Excel.ConditionalRangeFormat;
        /**
         *
         * The criteria of the Top/Bottom conditional format.
         *
         * 
         */
        rule: Excel.ConditionalTopBottomRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TopBottomConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TopBottomConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TopBottomConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TopBottomConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TopBottomConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TopBottomConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the rule of the top/bottom conditional format.
     *
     * 
     */
    export interface ConditionalTopBottomRule {
        /**
         *
         * The rank between 1 and 1000 for numeric ranks or 1 and 100 for percent ranks.
         *
         * 
         */
        rank: number;
        /**
         *
         * Format values based on the top or bottom rank.
         *
         * 
         */
        type: Excel.ConditionalTopBottomCriterionType | "Invalid" | "TopItems" | "TopPercent" | "BottomItems" | "BottomPercent";
    }
    /**
     *
     * Represents the the preset criteria conditional format such as above average, below average, unique values, contains blank, nonblank, error, and noerror.
     *
     * 
     */
    export class PresetCriteriaConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.
         *
         * 
         */
        readonly format: Excel.ConditionalRangeFormat;
        /**
         *
         * The rule of the conditional format.
         *
         * 
         */
        rule: Excel.ConditionalPresetCriteriaRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PresetCriteriaConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PresetCriteriaConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PresetCriteriaConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PresetCriteriaConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PresetCriteriaConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PresetCriteriaConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the Preset Criteria Conditional Format Rule
     *
     * 
     */
    export interface ConditionalPresetCriteriaRule {
        /**
         *
         * The criterion of the conditional format.
         *
         * 
         */
        criterion: Excel.ConditionalFormatPresetCriterion | "Invalid" | "Blanks" | "NonBlanks" | "Errors" | "NonErrors" | "Yesterday" | "Today" | "Tomorrow" | "LastSevenDays" | "LastWeek" | "ThisWeek" | "NextWeek" | "LastMonth" | "ThisMonth" | "NextMonth" | "AboveAverage" | "BelowAverage" | "EqualOrAboveAverage" | "EqualOrBelowAverage" | "OneStdDevAboveAverage" | "OneStdDevBelowAverage" | "TwoStdDevAboveAverage" | "TwoStdDevBelowAverage" | "ThreeStdDevAboveAverage" | "ThreeStdDevBelowAverage" | "UniqueValues" | "DuplicateValues";
    }
    /**
     *
     * Represents a specific text conditional format.
     *
     * 
     */
    export class TextConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.
         *
         * 
         */
        readonly format: Excel.ConditionalRangeFormat;
        /**
         *
         * The rule of the conditional format.
         *
         * 
         */
        rule: Excel.ConditionalTextComparisonRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TextConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TextConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TextConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TextConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TextConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a Cell Value Conditional Format Rule
     *
     * 
     */
    export interface ConditionalTextComparisonRule {
        /**
         *
         * The operator of the text conditional format.
         *
         * 
         */
        operator: Excel.ConditionalTextOperator | "Invalid" | "Contains" | "NotContains" | "BeginsWith" | "EndsWith";
        /**
         *
         * The Text value of conditional format.
         *
         * 
         */
        text: string;
    }
    /**
     *
     * Represents a cell value conditional format.
     *
     * 
     */
    export class CellValueConditionalFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.
         *
         * 
         */
        readonly format: Excel.ConditionalRangeFormat;
        /**
         *
         * Represents the Rule object on this conditional format.
         *
         * 
         */
        rule: Excel.ConditionalCellValueRule;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.CellValueConditionalFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.CellValueConditionalFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CellValueConditionalFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.CellValueConditionalFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.CellValueConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CellValueConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a cell value conditional format rule.
     *
     * 
     */
    export interface ConditionalCellValueRule {
        /**
         *
         * The formula, if required, to evaluate the conditional format rule on.
         *
         * 
         */
        formula1: string;
        /**
         *
         * The formula, if required, to evaluate the conditional format rule on.
         *
         * 
         */
        formula2?: string;
        /**
         *
         * The operator of the text conditional format.
         *
         * 
         */
        operator: Excel.ConditionalCellValueOperator | "Invalid" | "Between" | "NotBetween" | "EqualTo" | "NotEqualTo" | "GreaterThan" | "LessThan" | "GreaterThanOrEqual" | "LessThanOrEqual";
    }
    /**
     *
     * A format object encapsulating the conditional formats range's font, fill, borders, and other properties.
     *
     * 
     */
    export class ConditionalRangeFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Collection of border objects that apply to the overall conditional format range. Read-only.
         *
         * 
         */
        readonly borders: Excel.ConditionalRangeBorderCollection;
        /**
         *
         * Returns the fill object defined on the overall conditional format range. Read-only.
         *
         * 
         */
        readonly fill: Excel.ConditionalRangeFill;
        /**
         *
         * Returns the font object defined on the overall conditional format range. Read-only.
         *
         * 
         */
        readonly font: Excel.ConditionalRangeFont;
        /**
         *
         * Represents Excel's number format code for the given range. Cleared if null is passed in.
         *
         * 
         */
        numberFormat: any;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalRangeFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalRangeFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalRangeFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalRangeFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalRangeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * This object represents the font attributes (font style, color, etc.) for an object.
     *
     * 
     */
    export class ConditionalRangeFont{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the bold status of font.
         *
         * 
         */
        bold: boolean;
        /**
         *
         * HTML color code representation of the text color. E.g. #FF0000 represents Red.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the italic status of the font.
         *
         * 
         */
        italic: boolean;
        /**
         *
         * Represents the strikethrough status of the font.
         *
         * 
         */
        strikethrough: boolean;
        /**
         *
         * Type of underline applied to the font. See Excel.ConditionalRangeFontUnderlineStyle for details.
         *
         * 
         */
        underline: Excel.ConditionalRangeFontUnderlineStyle | "None" | "Single" | "Double";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalRangeFont): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalRangeFont): void;
        /**
         *
         * Resets the font formats.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalRangeFont;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalRangeFont;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalRangeFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFontData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the background of a conditional range object.
     *
     * 
     */
    export class ConditionalRangeFill{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the fill, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        color: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalRangeFill): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalRangeFill): void;
        /**
         *
         * Resets the fill.
         *
         * 
         */
        clear(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalRangeFill;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalRangeFill;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalRangeFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFillData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the border of an object.
     *
     * 
     */
    export class ConditionalRangeBorder{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        color: string;
        /**
         *
         * Constant value that indicates the specific side of the border. See Excel.ConditionalRangeBorderIndex for details. Read-only.
         *
         * 
         */
        readonly sideIndex: Excel.ConditionalRangeBorderIndex | "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight";
        /**
         *
         * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.
         *
         * 
         */
        style: Excel.ConditionalRangeBorderLineStyle | "None" | "Continuous" | "Dash" | "DashDot" | "DashDotDot" | "Dot";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ConditionalRangeBorder): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ConditionalRangeBorder): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalRangeBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ConditionalRangeBorder;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ConditionalRangeBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeBorderData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the border objects that make up range border.
     *
     * 
     */
    export class ConditionalRangeBorderCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the bottom border. Read-only.
         *
         * 
         */
        readonly bottom: Excel.ConditionalRangeBorder;
        /**
         *
         * Gets the left border. Read-only.
         *
         * 
         */
        readonly left: Excel.ConditionalRangeBorder;
        /**
         *
         * Gets the right border. Read-only.
         *
         * 
         */
        readonly right: Excel.ConditionalRangeBorder;
        /**
         *
         * Gets the top border. Read-only.
         *
         * 
         */
        readonly top: Excel.ConditionalRangeBorder;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.ConditionalRangeBorder[];
        /**
         *
         * Number of border objects in the collection. Read-only.
         *
         * 
         */
        readonly count: number;
        /**
         *
         * Gets a border object using its name.
         *
         * 
         *
         * @param index - Index value of the border object to be retrieved. See Excel.ConditionalRangeBorderIndex for details.
         */
        getItem(index: Excel.ConditionalRangeBorderIndex): Excel.ConditionalRangeBorder;
        /**
         *
         * Gets a border object using its name.
         *
         * 
         *
         * @param indexString - Index value of the border object to be retrieved. See Excel.ConditionalRangeBorderIndex for details.
         */
        getItem(indexString: "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight"): Excel.ConditionalRangeBorder;
        /**
         *
         * Gets a border object using its index.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.ConditionalRangeBorder;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ConditionalRangeBorderCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ConditionalRangeBorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeBorderCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * An object encapsulating a style's format and other properties.
     *
     * 
     */
    export class Style{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * A Border collection of four Border objects that represent the style of the four borders.
         *
         * 
         */
        readonly borders: Excel.RangeBorderCollection;
        /**
         *
         * The Fill of the style.
         *
         * 
         */
        readonly fill: Excel.RangeFill;
        /**
         *
         * A Font object that represents the font of the style.
         *
         * 
         */
        readonly font: Excel.RangeFont;
        /**
         *
         * Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.
         *
         * 
         */
        autoIndent: boolean;
        /**
         *
         * Indicates if the style is a built-in style.
         *
         * 
         */
        readonly builtIn: boolean;
        /**
         *
         * Indicates if the formula will be hidden when the worksheet is protected.
         *
         * 
         */
        formulaHidden: boolean;
        /**
         *
         * Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.
         *
         * 
         */
        horizontalAlignment: Excel.HorizontalAlignment | "General" | "Left" | "Center" | "Right" | "Fill" | "Justify" | "CenterAcrossSelection" | "Distributed";
        /**
         *
         * Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.
         *
         * 
         */
        includeAlignment: boolean;
        /**
         *
         * Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.
         *
         * 
         */
        includeBorder: boolean;
        /**
         *
         * Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.
         *
         * 
         */
        includeFont: boolean;
        /**
         *
         * Indicates if the style includes the NumberFormat property.
         *
         * 
         */
        includeNumber: boolean;
        /**
         *
         * Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.
         *
         * 
         */
        includePatterns: boolean;
        /**
         *
         * Indicates if the style includes the FormulaHidden and Locked protection properties.
         *
         * 
         */
        includeProtection: boolean;
        /**
         *
         * An integer from 0 to 250 that indicates the indent level for the style.
         *
         * 
         */
        indentLevel: number;
        /**
         *
         * Indicates if the object is locked when the worksheet is protected.
         *
         * 
         */
        locked: boolean;
        /**
         *
         * The name of the style.
         *
         * 
         */
        readonly name: string;
        /**
         *
         * The format code of the number format for the style.
         *
         * 
         */
        numberFormat: string;
        /**
         *
         * The localized format code of the number format for the style.
         *
         * 
         */
        numberFormatLocal: string;
        /**
         *
         * The reading order for the style.
         *
         * 
         */
        readingOrder: Excel.ReadingOrder | "Context" | "LeftToRight" | "RightToLeft";
        /**
         *
         * Indicates if text automatically shrinks to fit in the available column width.
         *
         * 
         */
        shrinkToFit: boolean;
        /**
         *
         * The text orientation for the style.
         *
         * 
         */
        textOrientation: number;
        /**
         *
         * Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.
         *
         * 
         */
        verticalAlignment: Excel.VerticalAlignment | "Top" | "Center" | "Bottom" | "Justify" | "Distributed";
        /**
         *
         * Indicates if Microsoft Excel wraps the text in the object.
         *
         * 
         */
        wrapText: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Style): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Style): void;
        /**
         *
         * Deletes this style.
         *
         * 
         */
        delete(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Style;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Style;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Style object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.StyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the styles.
     *
     * 
     */
    export class StyleCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Style[];
        /**
         *
         * Adds a new style to the collection.
         *
         * 
         *
         * @param name - Name of the style to be added.
         */
        add(name: string): void;
        /**
         *
         * Gets the number of styles in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a style by name.
         *
         * 
         *
         * @param name - Name of the style to be retrieved.
         */
        getItem(name: string): Excel.Style;
        /**
         *
         * Gets a style based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the style object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Style;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.StyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.StyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.StyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a collection of TableStyles.
     *
     * 
     */
    export class TableStyleCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.TableStyle[];
        /**
         *
         * Creates a blank TableStyle with the specified name.
         *
         * 
         *
         * @param name - The unique name for the new TableStyle. Will throw an invalid argument exception if the name is already in use.
         * @param makeUniqueName - Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.
         * @returns The newly created TableStyle.
         */
        add(name: string, makeUniqueName?: boolean): Excel.TableStyle;
        /**
         *
         * Gets the number of table styles in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets the default TableStyle for the parent object's scope.
         *
         * 
         * @returns The TableStyle object that is the current default TableStyle.
         */
        getDefault(): Excel.TableStyle;
        /**
         *
         * Gets a TableStyle by name.
         *
         * 
         *
         * @param name - Name of the TableStyle to be retrieved.
         * @returns The TableStyle object whose name matches the input.
         */
        getItem(name: string): Excel.TableStyle;
        /**
         *
         * Gets a TableStyle by name. If the TableStyle does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the TableStyle to be retrieved.
         * @returns The TableStyle object whose name matches the input.
         */
        getItemOrNullObject(name: string): Excel.TableStyle;
        /**
         *
         * Sets the default TableStyle for use in the parent object's scope.
         *
         * 
         *
         * @param newDefaultStyle - The TableStyle object or name of the TableStyle object that should be the new default.
         */
        setDefault(newDefaultStyle: TableStyle | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TableStyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableStyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a TableStyle, which defines the style elements by region of the Table.
     *
     * 
     */
    export class TableStyle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the name of the TableStyle.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies whether this TableStyle object is read-only. Read-only.
         *
         * 
         */
        readonly readOnly: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TableStyle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TableStyle): void;
        /**
         *
         * Deletes the TableStyle.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Creates a duplicate of this TableStyle with copies of all the style elements.
         *
         * 
         * @returns The new TableStyle object that has been duplicated from this TableStyle.
         */
        duplicate(): Excel.TableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TableStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TableStyle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of PivotTable styles.
     *
     * 
     */
    export class PivotTableStyleCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PivotTableStyle[];
        /**
         *
         * Creates a blank PivotTableStyle with the specified name.
         *
         * 
         *
         * @param name - The unique name for the new PivotTableStyle. Will throw an invalid argument exception if the name is already in use.
         * @param makeUniqueName - Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.
         * @returns The newly created PivotTableStyle.
         */
        add(name: string, makeUniqueName?: boolean): Excel.PivotTableStyle;
        /**
         *
         * Gets the number of PivotTable styles in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets the default PivotTableStyle for the parent object's scope.
         *
         * 
         * @returns The PivotTableStyle object that is the current default PivotTableStyle.
         */
        getDefault(): Excel.PivotTableStyle;
        /**
         *
         * Gets a PivotTableStyle by name.
         *
         * 
         *
         * @param name - Name of the PivotTableStyle to be retrieved.
         * @returns The PivotTableStyle object whose name matches the input.
         */
        getItem(name: string): Excel.PivotTableStyle;
        /**
         *
         * Gets a PivotTableStyle by name. If the PivotTableStyle does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the PivotTableStyle to be retrieved.
         * @returns The PivotTableStyle object whose name matches the input.
         */
        getItemOrNullObject(name: string): Excel.PivotTableStyle;
        /**
         *
         * Sets the default PivotTableStyle for use in the parent object's scope.
         *
         * 
         *
         * @param newDefaultStyle - The PivotTableStyle object or name of the PivotTableStyle object that should be the new default.
         */
        setDefault(newDefaultStyle: PivotTableStyle | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotTableStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PivotTableStyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableStyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a PivotTable Style, which defines style elements by PivotTable region.
     *
     * 
     */
    export class PivotTableStyle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the name of the PivotTableStyle.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies whether this PivotTableStyle object is read-only. Read-only.
         *
         * 
         */
        readonly readOnly: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PivotTableStyle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PivotTableStyle): void;
        /**
         *
         * Deletes the PivotTableStyle.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Creates a duplicate of this PivotTableStyle with copies of all the style elements.
         *
         * 
         * @returns The new PivotTableStyle object that has been duplicated from this PivotTableStyle.
         */
        duplicate(): Excel.PivotTableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PivotTableStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PivotTableStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PivotTableStyle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of SlicerStyle objects.
     *
     * 
     */
    export class SlicerStyleCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.SlicerStyle[];
        /**
         *
         * Creates a blank SlicerStyle with the specified name.
         *
         * 
         *
         * @param name - The unique name for the new SlicerStyle. Will throw an invalid argument exception if the name is already in use.
         * @param makeUniqueName - Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.
         * @returns The newly created SlicerStyle.
         */
        add(name: string, makeUniqueName?: boolean): Excel.SlicerStyle;
        /**
         *
         * Gets the number of slicer styles in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets the default SlicerStyle for the parent object's scope.
         *
         * 
         * @returns The SlicerStyle object that is the current default SlicerStyle.
         */
        getDefault(): Excel.SlicerStyle;
        /**
         *
         * Gets a SlicerStyle by name.
         *
         * 
         *
         * @param name - Name of the SlicerStyle to be retrieved.
         * @returns The SlicerStyle object whose name matches the input.
         */
        getItem(name: string): Excel.SlicerStyle;
        /**
         *
         * Gets a SlicerStyle by name. If the SlicerStyle does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the SlicerStyle to be retrieved.
         * @returns The SlicerStyle object whose name matches the input.
         */
        getItemOrNullObject(name: string): Excel.SlicerStyle;
        /**
         *
         * Sets the default SlicerStyle for use in the parent object's scope.
         *
         * 
         *
         * @param newDefaultStyle - The SlicerStyle object or name of the SlicerStyle object that should be the new default.
         */
        setDefault(newDefaultStyle: SlicerStyle | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SlicerStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.SlicerStyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerStyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a Slicer Style, which defines style elements by region of the slicer.
     *
     * 
     */
    export class SlicerStyle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the name of the SlicerStyle.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies whether this SlicerStyle object is read-only. Read-only.
         *
         * 
         */
        readonly readOnly: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.SlicerStyle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.SlicerStyle): void;
        /**
         *
         * Deletes the SlicerStyle.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Creates a duplicate of this SlicerStyle with copies of all the style elements.
         *
         * 
         * @returns The new SlicerStyle object that has been duplicated from this SlicerStyle.
         */
        duplicate(): Excel.SlicerStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SlicerStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.SlicerStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.SlicerStyle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of TimelineStyles.
     *
     * 
     */
    export class TimelineStyleCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.TimelineStyle[];
        /**
         *
         * Creates a blank TimelineStyle with the specified name.
         *
         * 
         *
         * @param name - The unique name for the new TimelineStyle. Will throw an invalid argument exception if the name is already in use.
         * @param makeUniqueName - Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.
         * @returns The newly created TimelineStyle.
         */
        add(name: string, makeUniqueName?: boolean): Excel.TimelineStyle;
        /**
         *
         * Gets the number of timeline styles in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets the default TimelineStyle for the parent object's scope.
         *
         * 
         * @returns The TimelineStyle object that is the current default TimelineStyle.
         */
        getDefault(): Excel.TimelineStyle;
        /**
         *
         * Gets a TimelineStyle by name.
         *
         * 
         *
         * @param name - Name of the TimelineStyle to be retrieved.
         * @returns The TimelineStyle object whose name matches the input.
         */
        getItem(name: string): Excel.TimelineStyle;
        /**
         *
         * Gets a TimelineStyle by name. If the TimelineStyle does not exist, will return a null object.
         *
         * 
         *
         * @param name - Name of the TimelineStyle to be retrieved.
         * @returns The TimelineStyle object whose name matches the input.
         */
        getItemOrNullObject(name: string): Excel.TimelineStyle;
        /**
         *
         * Sets the default TimelineStyle for use in the parent object's scope.
         *
         * 
         *
         * @param newDefaultStyle - The TimelineStyle object or name of the TimelineStyle object that should be the new default.
         */
        setDefault(newDefaultStyle: TimelineStyle | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TimelineStyleCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.TimelineStyleCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TimelineStyleCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a Timeline style, which defines style elements by region in the Timeline.
     *
     * 
     */
    export class TimelineStyle{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the name of the TimelineStyle.
         *
         * 
         */
        name: string;
        /**
         *
         * Specifies whether this TimelineStyle object is read-only. Read-only.
         *
         * 
         */
        readonly readOnly: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TimelineStyle): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TimelineStyle): void;
        /**
         *
         * Deletes the TableStyle.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Creates a duplicate of this TimelineStyle with copies of all the style elements.
         *
         * 
         * @returns The new TimelineStyle object that has been duplicated from this TimelineStyle.
         */
        duplicate(): Excel.TimelineStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TimelineStyle;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TimelineStyle;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TimelineStyle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TimelineStyleData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents layout and print settings that are not dependent any printer-specific implementation. These settings include margins, orientation, page numbering, title rows, and print area.
     *
     * 
     */
    export class PageLayout{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Header and footer configuration for the worksheet.
         *
         * 
         */
        readonly headersFooters: Excel.HeaderFooterGroup;
        /**
         *
         * Gets or sets the worksheet's black and white print option.
         *
         * 
         */
        blackAndWhite: boolean;
        /**
         *
         * Gets or sets the worksheet's bottom page margin to use for printing in points.
         *
         * 
         */
        bottomMargin: number;
        /**
         *
         * Gets or sets the worksheet's center horizontally flag. This flag determines whether the worksheet will be centered horizontally when it's printed.
         *
         * 
         */
        centerHorizontally: boolean;
        /**
         *
         * Gets or sets the worksheet's center vertically flag. This flag determines whether the worksheet will be centered vertically when it's printed.
         *
         * 
         */
        centerVertically: boolean;
        /**
         *
         * Gets or sets the worksheet's draft mode option. If true the sheet will be printed without graphics.
         *
         * 
         */
        draftMode: boolean;
        /**
         *
         * Gets or sets the worksheet's first page number to print. Null value represents "auto" page numbering.
         *
         * 
         */
        firstPageNumber: number | "";
        /**
         *
         * Gets or sets the worksheet's footer margin, in points, for use when printing.
         *
         * 
         */
        footerMargin: number;
        /**
         *
         * Gets or sets the worksheet's header margin, in points, for use when printing.
         *
         * 
         */
        headerMargin: number;
        /**
         *
         * Gets or sets the worksheet's left margin, in points, for use when printing.
         *
         * 
         */
        leftMargin: number;
        /**
         *
         * Gets or sets the worksheet's orientation of the page.
         *
         * 
         */
        orientation: Excel.PageOrientation | "Portrait" | "Landscape";
        /**
         *
         * Gets or sets the worksheet's paper size of the page.
         *
         * 
         */
        paperSize: Excel.PaperType | "Letter" | "LetterSmall" | "Tabloid" | "Ledger" | "Legal" | "Statement" | "Executive" | "A3" | "A4" | "A4Small" | "A5" | "B4" | "B5" | "Folio" | "Quatro" | "Paper10x14" | "Paper11x17" | "Note" | "Envelope9" | "Envelope10" | "Envelope11" | "Envelope12" | "Envelope14" | "Csheet" | "Dsheet" | "Esheet" | "EnvelopeDL" | "EnvelopeC5" | "EnvelopeC3" | "EnvelopeC4" | "EnvelopeC6" | "EnvelopeC65" | "EnvelopeB4" | "EnvelopeB5" | "EnvelopeB6" | "EnvelopeItaly" | "EnvelopeMonarch" | "EnvelopePersonal" | "FanfoldUS" | "FanfoldStdGerman" | "FanfoldLegalGerman";
        /**
         *
         * Gets or sets whether the worksheet's comments should be displayed when printing.
         *
         * 
         */
        printComments: Excel.PrintComments | "NoComments" | "EndSheet" | "InPlace";
        /**
         *
         * Gets or sets the worksheet's print errors option.
         *
         * 
         */
        printErrors: Excel.PrintErrorType | "AsDisplayed" | "Blank" | "Dash" | "NotAvailable";
        /**
         *
         * Gets or sets the worksheet's print gridlines flag. This flag determines whether gridlines will be printed or not.
         *
         * 
         */
        printGridlines: boolean;
        /**
         *
         * Gets or sets the worksheet's print headings flag. This flag determines whether headings will be printed or not.
         *
         * 
         */
        printHeadings: boolean;
        /**
         *
         * Gets or sets the worksheet's page print order option. This specifies the order to use for processing the page number printed.
         *
         * 
         */
        printOrder: Excel.PrintOrder | "DownThenOver" | "OverThenDown";
        /**
         *
         * Gets or sets the worksheet's right margin, in points, for use when printing.
         *
         * 
         */
        rightMargin: number;
        /**
         *
         * Gets or sets the worksheet's top margin, in points, for use when printing.
         *
         * 
         */
        topMargin: number;
        /**
         *
         * Gets or sets the worksheet's print zoom options.
            The `PageLayoutZoomOptions` object must be set as a JSON object (use `x.zoom = {...}` instead of `x.zoom.scale = ...`).
         *
         * 
         */
        zoom: Excel.PageLayoutZoomOptions;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.PageLayout): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.PageLayout): void;
        /**
         *
         * Gets the RangeAreas object, comprising one or more rectangular ranges, that represents the print area for the worksheet. If there is no print area, an ItemNotFound error will be thrown.
         *
         * 
         */
        getPrintArea(): Excel.RangeAreas;
        /**
         *
         * Gets the RangeAreas object, comprising one or more rectangular ranges, that represents the print area for the worksheet. If there is no print area, a null object will be returned.
         *
         * 
         */
        getPrintAreaOrNullObject(): Excel.RangeAreas;
        /**
         *
         * Gets the range object representing the title columns.
         *
         * 
         */
        getPrintTitleColumns(): Excel.Range;
        /**
         *
         * Gets the range object representing the title columns. If not set, this will return a null object.
         *
         * 
         */
        getPrintTitleColumnsOrNullObject(): Excel.Range;
        /**
         *
         * Gets the range object representing the title rows.
         *
         * 
         */
        getPrintTitleRows(): Excel.Range;
        /**
         *
         * Gets the range object representing the title rows. If not set, this will return a null object.
         *
         * 
         */
        getPrintTitleRowsOrNullObject(): Excel.Range;
        /**
         *
         * Sets the worksheet's print area.
         *
         * 
         *
         * @param printArea - The range, or RangeAreas of the content to print.
         */
        setPrintArea(printArea: Range | RangeAreas | string): void;
        /**
         *
         * Sets the worksheet's page margins with units.
         *
         * 
         *
         * @param unit - Measurement unit for the margins provided.
         * @param marginOptions - Margin values to set, margins not provided will remain unchanged.
         */
        setPrintMargins(unit: Excel.PrintMarginUnit, marginOptions: Excel.PageLayoutMarginOptions): void;
        /**
         *
         * Sets the worksheet's page margins with units.
         *
         * 
         *
         * @param unitString - Measurement unit for the margins provided.
         * @param marginOptions - Margin values to set, margins not provided will remain unchanged.
         */
        setPrintMargins(unitString: "Points" | "Inches" | "Centimeters", marginOptions: Excel.PageLayoutMarginOptions): void;
        /**
         *
         * Sets the columns that contain the cells to be repeated at the left of each page of the worksheet for printing.
         *
         * 
         *
         * @param printTitleColumns - The columns to be repeated to the left of each page, range must span the entire column to be valid.
         */
        setPrintTitleColumns(printTitleColumns: Range | string): void;
        /**
         *
         * Sets the rows that contain the cells to be repeated at the top of each page of the worksheet for printing.
         *
         * 
         *
         * @param printTitleRows - The rows to be repeated at the top of each page, range must span the entire row to be valid.
         */
        setPrintTitleRows(printTitleRows: Range | string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PageLayout;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PageLayout;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PageLayout object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PageLayoutData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents page zoom properties.
     *
     * 
     */
    export interface PageLayoutZoomOptions {
        /**
         *
         * Number of pages to fit horizontally. This value can be null if percentage scale is used.
         *
         * 
         */
        horizontalFitToPages?: number;
        /**
         *
         * Print page scale value can be between 10 and 400. This value can be null if fit to page tall or wide is specified.
         *
         * 
         */
        scale?: number;
        /**
         *
         * Number of pages to fit vertically. This value can be null if percentage scale is used.
         *
         * 
         */
        verticalFitToPages?: number;
    }
    /**
     *
     * Represents the options in page layout margins.
     *
     * 
     */
    export interface PageLayoutMarginOptions {
        /**
         *
         * Represents the page layout bottom margin in the unit specified to use for printing.
         *
         * 
         */
        bottom?: number;
        /**
         *
         * Represents the page layout footer margin in the unit specified to use for printing.
         *
         * 
         */
        footer?: number;
        /**
         *
         * Represents the page layout header margin in the unit specified to use for printing.
         *
         * 
         */
        header?: number;
        /**
         *
         * Represents the page layout left margin in the unit specified to use for printing.
         *
         * 
         */
        left?: number;
        /**
         *
         * Represents the page layout right margin in the unit specified to use for printing.
         *
         * 
         */
        right?: number;
        /**
         *
         * Represents the page layout top margin in the unit specified to use for printing.
         *
         * 
         */
        top?: number;
    }
    /**
     * 
     */
    export class HeaderFooter{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets or sets the center footer of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        centerFooter: string;
        /**
         *
         * Gets or sets the center header of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        centerHeader: string;
        /**
         *
         * Gets or sets the left footer of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        leftFooter: string;
        /**
         *
         * Gets or sets the left header of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        leftHeader: string;
        /**
         *
         * Gets or sets the right footer of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        rightFooter: string;
        /**
         *
         * Gets or sets the right header of the worksheet.
            To apply font formatting or insert a variable value, use format codes specified here: https://msdn.microsoft.com/en-us/library/bb225426.aspx.
         *
         * 
         */
        rightHeader: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.HeaderFooter): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.HeaderFooter): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.HeaderFooter;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.HeaderFooter;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.HeaderFooter object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.HeaderFooterData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     * 
     */
    export class HeaderFooterGroup{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * The general header/footer, used for all pages unless even/odd or first page is specified.
         *
         * 
         */
        readonly defaultForAllPages: Excel.HeaderFooter;
        /**
         *
         * The header/footer to use for even pages, odd header/footer needs to be specified for odd pages.
         *
         * 
         */
        readonly evenPages: Excel.HeaderFooter;
        /**
         *
         * The first page header/footer, for all other pages general or even/odd is used.
         *
         * 
         */
        readonly firstPage: Excel.HeaderFooter;
        /**
         *
         * The header/footer to use for odd pages, even header/footer needs to be specified for even pages.
         *
         * 
         */
        readonly oddPages: Excel.HeaderFooter;
        /**
         *
         * Gets or sets the state of which headers/footers are set. See Excel.HeaderFooterState for details.
         *
         * 
         */
        state: Excel.HeaderFooterState | "Default" | "FirstAndDefault" | "OddAndEven" | "FirstOddAndEven";
        /**
         *
         * Gets or sets a flag indicating if headers/footers are aligned with the page margins set in the page layout options for the worksheet.
         *
         * 
         */
        useSheetMargins: boolean;
        /**
         *
         * Gets or sets a flag indicating if headers/footers should be scaled by the page percentage scale set in the page layout options for the worksheet.
         *
         * 
         */
        useSheetScale: boolean;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.HeaderFooterGroup): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.HeaderFooterGroup): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.HeaderFooterGroup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.HeaderFooterGroup;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.HeaderFooterGroup object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.HeaderFooterGroupData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     * 
     */
    export class PageBreak{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the column index for the page break
         *
         * 
         */
        readonly columnIndex: number;
        /**
         *
         * Represents the row index for the page break
         *
         * 
         */
        readonly rowIndex: number;
        /**
         *
         * Deletes a page break object.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the first cell after the page break.
         *
         * 
         */
        getCellAfterBreak(): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PageBreak;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.PageBreak;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.PageBreak object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PageBreakData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     * 
     */
    export class PageBreakCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.PageBreak[];
        /**
         *
         * Adds a page break before the top-left cell of the range specified.
         *
         * 
         *
         * @param pageBreakRange - The range immediately after the page break to be added.
         */
        add(pageBreakRange: Range | string): Excel.PageBreak;
        /**
         *
         * Gets the number of page breaks in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a page break object via the index.
         *
         * 
         *
         * @param index - Index of the page break.
         */
        getItem(index: number): Excel.PageBreak;
        /**
         *
         * Resets all manual page breaks in the collection.
         *
         * 
         */
        removePageBreaks(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.PageBreakCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.PageBreakCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PageBreakCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a collection of all the Data Connections that are part of the workbook or worksheet.
     *
     * 
     */
    export class DataConnectionCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Refreshes all the Data Connections in the collection.
         *
         * 
         */
        refreshAll(): void;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.DataConnectionCollection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataConnectionCollectionData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    /**
     * 
     */
    export class RangeCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Range[];
        /**
         *
         * Returns the number of ranges in the RangeCollection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Returns the range object based on its position in the RangeCollection.
         *
         * 
         *
         * @param index - Index value of the range object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Range;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.RangeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.RangeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents the entity that is mentioned in comments.
     *
     * 
     */
    export interface CommentMention {
        /**
         *
         * Gets or sets the email address of the entity that is mentioned in comment.
         *
         * 
         */
        email: string;
        /**
         *
         * Gets or sets the id of the entity. This matches one of the ids in `CommentRichContent.richContent`.
         *
         * 
         */
        id: number;
        /**
         *
         * Gets or sets the name of the entity that is mentioned in comment.
         *
         * 
         */
        name: string;
    }
    /**
     *
     * Represents the content contained within a comment or comment reply. Rich content incudes the text string and any other objects contained within the comment body, such as mentions.
     *
     * 
     */
    export interface CommentRichContent {
        /**
         *
         * An array containing all the entities (e.g. people) mentioned within the comment.
         *
         * 
         */
        mentions?: Excel.CommentMention[];
        richContent: string;
    }
    /**
     *
     * Represents a collection of comment objects that are part of the workbook.
     *
     * 
     */
    export class CommentCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Comment[];
        /**
         *
         * Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the provided range is larger than one cell.
         *
         * 
         *
         * @param cellAddress - The cell to which the comment is added. This can be a Range object or a string. If it's a string, it must contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided range is larger than one cell.
         * @param content - The comment's content. This can be either a string or CommentRichContent object. Strings are used for plain text. CommentRichContent objects allow for other comment features, such as mentions. 
         * @param contentType - Optional. The type of content contained within the comment. The default value is enum `ContentType.Plain`. 
         */
        add(cellAddress: Range | string, content: CommentRichContent | string, contentType?: Excel.ContentType): Excel.Comment;
        /**
         *
         * Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the provided range is larger than one cell.
         *
         * 
         *
         * @param cellAddress - The cell to which the comment is added. This can be a Range object or a string. If it's a string, it must contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided range is larger than one cell.
         * @param content - The comment's content. This can be either a string or CommentRichContent object. Strings are used for plain text. CommentRichContent objects allow for other comment features, such as mentions. 
         * @param contentTypeString - Optional. The type of content contained within the comment. The default value is enum `ContentType.Plain`. 
         */
        add(cellAddress: Range | string, content: CommentRichContent | string, contentTypeString?: "Plain" | "Mention"): Excel.Comment;
        /**
         *
         * Gets the number of comments in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a comment from the collection based on its ID. Read-only.
         *
         * 
         *
         * @param commentId - The identifier for the comment.
         */
        getItem(commentId: string): Excel.Comment;
        /**
         *
         * Gets a comment from the collection based on its position.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Comment;
        /**
         *
         * Gets the comment from the specified cell.
         *
         * 
         *
         * @param cellAddress - The cell which the comment is on. This can be a Range object or a string. If it's a string, it must contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided range is larger than one cell.
         */
        getItemByCell(cellAddress: Range | string): Excel.Comment;
        /**
         *
         * Gets the comment to which the given reply is connected.
         *
         * 
         *
         * @param replyId - The identifier of comment reply.
         */
        getItemByReplyId(replyId: string): Excel.Comment;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CommentCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.CommentCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CommentCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a comment in the workbook.
     *
     * 
     */
    export class Comment{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents a collection of reply objects associated with the comment. Read-only.
         *
         * 
         */
        readonly replies: Excel.CommentReplyCollection;
        /**
         *
         * Gets the email of the comment's author.
         *
         * 
         */
        readonly authorEmail: string;
        /**
         *
         * Gets the name of the comment's author.
         *
         * 
         */
        readonly authorName: string;
        /**
         *
         * Gets or sets the comment's content. The string is plain text.
         *
         * 
         */
        content: string;
        /**
         *
         * Gets the creation time of the comment. Returns null if the comment was converted from a note, since the comment does not have a creation date.
         *
         * 
         */
        readonly creationDate: Date;
        /**
         *
         * Represents the comment identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Gets the entities (e.g. people) that are mentioned in comments.
         *
         * 
         */
        readonly mentions: Excel.CommentMention[];
        /**
         *
         * Gets the rich comment content (e.g. mentions in comments). This string is not meant to be displayed to end-users. Your add-in should only use this to parse rich comment content.
         *
         * 
         */
        readonly richContent: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Comment): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Comment): void;
        /**
         *
         * Deletes the comment and all the connected replies.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the cell where this comment is located.
         *
         * 
         */
        getLocation(): Excel.Range;
        /**
         *
         * Updates the comment content with a specially formatted string and a list of mentions.
         *
         * 
         *
         * @param contentWithMentions - The content for the comment. This contains a specially formatted string and a list of mentions that will be parsed into the string when displayed by Excel.
         */
        updateMentions(contentWithMentions: Excel.CommentRichContent): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Comment;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Comment;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Comment object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CommentData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of comment reply objects that are part of the comment.
     *
     * 
     */
    export class CommentReplyCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.CommentReply[];
        /**
         *
         * Creates a comment reply for comment.
         *
         * 
         *
         * @param content - The comment's content. This can be either a string or Interface CommentRichContent (e.g. for comments with mentions). 
         * @param contentType - Optional. The type of content contained within the comment. The default value is enum `ContentType.Plain`. 
         */
        add(content: CommentRichContent | string, contentType?: Excel.ContentType): Excel.CommentReply;
        /**
         *
         * Creates a comment reply for comment.
         *
         * 
         *
         * @param content - The comment's content. This can be either a string or Interface CommentRichContent (e.g. for comments with mentions). 
         * @param contentTypeString - Optional. The type of content contained within the comment. The default value is enum `ContentType.Plain`. 
         */
        add(content: CommentRichContent | string, contentTypeString?: "Plain" | "Mention"): Excel.CommentReply;
        /**
         *
         * Gets the number of comment replies in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Returns a comment reply identified by its ID. Read-only.
         *
         * 
         *
         * @param commentReplyId - The identifier for the comment reply.
         */
        getItem(commentReplyId: string): Excel.CommentReply;
        /**
         *
         * Gets a comment reply based on its position in the collection.
         *
         * 
         *
         * @param index - The index value of the comment reply to be retrieved. The collection uses zero-based indexing.
         */
        getItemAt(index: number): Excel.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CommentReplyCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.CommentReplyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CommentReplyCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a comment reply in the workbook.
     *
     * 
     */
    export class CommentReply{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Gets the email of the comment reply's author.
         *
         * 
         */
        readonly authorEmail: string;
        /**
         *
         * Gets the name of the comment reply's author.
         *
         * 
         */
        readonly authorName: string;
        /**
         *
         * Gets or sets the comment reply's content. The string is plain text.
         *
         * 
         */
        content: string;
        /**
         *
         * Gets the creation time of the comment reply.
         *
         * 
         */
        readonly creationDate: Date;
        /**
         *
         * Represents the comment reply identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Gets the entities (e.g. people) that are mentioned in comments.
         *
         * 
         */
        readonly mentions: Excel.CommentMention[];
        /**
         *
         * Gets the rich comment content (e.g. mentions in comments). This string is not meant to be displayed to end-users. Your add-in should only use this to parse rich comment content.
         *
         * 
         */
        readonly richContent: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.CommentReply): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.CommentReply): void;
        /**
         *
         * Deletes the comment reply.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Gets the cell where this comment reply is located.
         *
         * 
         */
        getLocation(): Excel.Range;
        /**
         *
         * Gets the parent comment of this reply.
         *
         * 
         */
        getParentComment(): Excel.Comment;
        /**
         *
         * Updates the comment content with a specially formatted string and a list of mentions.
         *
         * 
         *
         * @param contentWithMentions - The content for the comment. This contains a specially formatted string and a list of mentions that will be parsed into the string when displayed by Excel.
         */
        updateMentions(contentWithMentions: Excel.CommentRichContent): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.CommentReply;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.CommentReply;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.CommentReply object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CommentReplyData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the shapes in the worksheet.
     *
     * 
     */
    export class ShapeCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Shape[];
        /**
         *
         * Adds a geometric shape to the worksheet. Returns a Shape object that represents the new shape.
         *
         * 
         *
         * @param geometricShapeType - Represents the type of the geometric shape. See Excel.GeometricShapeType for details.
         */
        addGeometricShape(geometricShapeType: Excel.GeometricShapeType): Excel.Shape;
        /**
         *
         * Adds a geometric shape to the worksheet. Returns a Shape object that represents the new shape.
         *
         * 
         *
         * @param geometricShapeTypeString - Represents the type of the geometric shape. See Excel.GeometricShapeType for details.
         */
        addGeometricShape(geometricShapeTypeString: "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus"): Excel.Shape;
        /**
         *
         * Groups a subset of shapes in this collection's worksheet. Returns a Shape object that represents the new group of shapes.
         *
         * 
         *
         * @param values - An array of shape ID or shape objects.
         */
        addGroup(values: Array<string | Shape>): Excel.Shape;
        /**
         *
         * Creates an image from a base64-encoded string and adds it to the worksheet. Returns the Shape object that represents the new image.
         *
         * 
         *
         * @param base64ImageString - A base64-encoded string representing an image in either JPEG or PNG format.
         */
        addImage(base64ImageString: string): Excel.Shape;
        /**
         *
         * Adds a line to worksheet. Returns a Shape object that represents the new line.
         *
         * 
         *
         * @param startLeft - The distance, in points, from the start of the line to the left side of the worksheet.
         * @param startTop - The distance, in points, from the start of the line to the top of the worksheet.
         * @param endLeft - The distance, in points, from the end of the line to the left of the worksheet.
         * @param endTop - The distance, in points, from the end of the line to the top of the worksheet.
         * @param connectorType - Represents the connector type. See Excel.ConnectorType for details.
         */
        addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorType?: Excel.ConnectorType): Excel.Shape;
        /**
         *
         * Adds a line to worksheet. Returns a Shape object that represents the new line.
         *
         * 
         *
         * @param startLeft - The distance, in points, from the start of the line to the left side of the worksheet.
         * @param startTop - The distance, in points, from the start of the line to the top of the worksheet.
         * @param endLeft - The distance, in points, from the end of the line to the left of the worksheet.
         * @param endTop - The distance, in points, from the end of the line to the top of the worksheet.
         * @param connectorTypeString - Represents the connector type. See Excel.ConnectorType for details.
         */
        addLine(startLeft: number, startTop: number, endLeft: number, endTop: number, connectorTypeString?: "Straight" | "Elbow" | "Curve"): Excel.Shape;
        /**
         *
         * Adds a text box to the worksheet with the provided text as the content. Returns a Shape object that represents the new text box.
         *
         * 
         *
         * @param text - Represents the text that will be shown in the created text box.
         */
        addTextBox(text?: string): Excel.Shape;
        /**
         *
         * Returns the number of shapes in the worksheet. Read-only.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a shape using its Name or ID.
         *
         * 
         *
         * @param key - Name or ID of the shape to be retrieved.
         */
        getItem(key: string): Excel.Shape;
        /**
         *
         * Gets a shape using its position in the collection.
         *
         * 
         *
         * @param index - The zero-based index of the shape to be retrieved.
         */
        getItemAt(index: number): Excel.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ShapeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.ShapeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a generic shape object in the worksheet. A shape could be a geometric shape, a line, a group of shapes, etc.
            To learn more about the shape object model, read {@link https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-shapes | Work with shapes using the Excel JavaScript API}.
     *
     * 
     */
    export class Shape{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the fill formatting of this shape. Read-only.
         *
         * 
         */
        readonly fill: Excel.ShapeFill;
        /**
         *
         * Returns the geometric shape associated with the shape. An error will be thrown if the shape type is not "GeometricShape".
         *
         * 
         */
        readonly geometricShape: Excel.GeometricShape;
        /**
         *
         * Returns the shape group associated with the shape. An error will be thrown if the shape type is not "GroupShape".
         *
         * 
         */
        readonly group: Excel.ShapeGroup;
        /**
         *
         * Returns the image associated with the shape. An error will be thrown if the shape type is not "Image".
         *
         * 
         */
        readonly image: Excel.Image;
        /**
         *
         * Returns the line associated with the shape. An error will be thrown if the shape type is not "Line".
         *
         * 
         */
        readonly line: Excel.Line;
        /**
         *
         * Returns the line formatting of this shape. Read-only.
         *
         * 
         */
        readonly lineFormat: Excel.ShapeLineFormat;
        /**
         *
         * Represents the parent group of this shape.
         *
         * 
         */
        readonly parentGroup: Excel.Shape;
        /**
         *
         * Returns the text frame object of this shape. Read only.
         *
         * 
         */
        readonly textFrame: Excel.TextFrame;
        /**
         *
         * Returns or sets the alternative description text for a Shape object.
         *
         * 
         */
        altTextDescription: string;
        /**
         *
         * Returns or sets the alternative title text for a Shape object.
         *
         * 
         */
        altTextTitle: string;
        /**
         *
         * Returns the number of connection sites on this shape. Read-only.
         *
         * 
         */
        readonly connectionSiteCount: number;
        /**
         *
         * Represents the geometric shape type of this geometric shape. See Excel.GeometricShapeType for details. Returns null if the shape type is not "GeometricShape".
         *
         * 
         */
        geometricShapeType: Excel.GeometricShapeType | "LineInverse" | "Triangle" | "RightTriangle" | "Rectangle" | "Diamond" | "Parallelogram" | "Trapezoid" | "NonIsoscelesTrapezoid" | "Pentagon" | "Hexagon" | "Heptagon" | "Octagon" | "Decagon" | "Dodecagon" | "Star4" | "Star5" | "Star6" | "Star7" | "Star8" | "Star10" | "Star12" | "Star16" | "Star24" | "Star32" | "RoundRectangle" | "Round1Rectangle" | "Round2SameRectangle" | "Round2DiagonalRectangle" | "SnipRoundRectangle" | "Snip1Rectangle" | "Snip2SameRectangle" | "Snip2DiagonalRectangle" | "Plaque" | "Ellipse" | "Teardrop" | "HomePlate" | "Chevron" | "PieWedge" | "Pie" | "BlockArc" | "Donut" | "NoSmoking" | "RightArrow" | "LeftArrow" | "UpArrow" | "DownArrow" | "StripedRightArrow" | "NotchedRightArrow" | "BentUpArrow" | "LeftRightArrow" | "UpDownArrow" | "LeftUpArrow" | "LeftRightUpArrow" | "QuadArrow" | "LeftArrowCallout" | "RightArrowCallout" | "UpArrowCallout" | "DownArrowCallout" | "LeftRightArrowCallout" | "UpDownArrowCallout" | "QuadArrowCallout" | "BentArrow" | "UturnArrow" | "CircularArrow" | "LeftCircularArrow" | "LeftRightCircularArrow" | "CurvedRightArrow" | "CurvedLeftArrow" | "CurvedUpArrow" | "CurvedDownArrow" | "SwooshArrow" | "Cube" | "Can" | "LightningBolt" | "Heart" | "Sun" | "Moon" | "SmileyFace" | "IrregularSeal1" | "IrregularSeal2" | "FoldedCorner" | "Bevel" | "Frame" | "HalfFrame" | "Corner" | "DiagonalStripe" | "Chord" | "Arc" | "LeftBracket" | "RightBracket" | "LeftBrace" | "RightBrace" | "BracketPair" | "BracePair" | "Callout1" | "Callout2" | "Callout3" | "AccentCallout1" | "AccentCallout2" | "AccentCallout3" | "BorderCallout1" | "BorderCallout2" | "BorderCallout3" | "AccentBorderCallout1" | "AccentBorderCallout2" | "AccentBorderCallout3" | "WedgeRectCallout" | "WedgeRRectCallout" | "WedgeEllipseCallout" | "CloudCallout" | "Cloud" | "Ribbon" | "Ribbon2" | "EllipseRibbon" | "EllipseRibbon2" | "LeftRightRibbon" | "VerticalScroll" | "HorizontalScroll" | "Wave" | "DoubleWave" | "Plus" | "FlowChartProcess" | "FlowChartDecision" | "FlowChartInputOutput" | "FlowChartPredefinedProcess" | "FlowChartInternalStorage" | "FlowChartDocument" | "FlowChartMultidocument" | "FlowChartTerminator" | "FlowChartPreparation" | "FlowChartManualInput" | "FlowChartManualOperation" | "FlowChartConnector" | "FlowChartPunchedCard" | "FlowChartPunchedTape" | "FlowChartSummingJunction" | "FlowChartOr" | "FlowChartCollate" | "FlowChartSort" | "FlowChartExtract" | "FlowChartMerge" | "FlowChartOfflineStorage" | "FlowChartOnlineStorage" | "FlowChartMagneticTape" | "FlowChartMagneticDisk" | "FlowChartMagneticDrum" | "FlowChartDisplay" | "FlowChartDelay" | "FlowChartAlternateProcess" | "FlowChartOffpageConnector" | "ActionButtonBlank" | "ActionButtonHome" | "ActionButtonHelp" | "ActionButtonInformation" | "ActionButtonForwardNext" | "ActionButtonBackPrevious" | "ActionButtonEnd" | "ActionButtonBeginning" | "ActionButtonReturn" | "ActionButtonDocument" | "ActionButtonSound" | "ActionButtonMovie" | "Gear6" | "Gear9" | "Funnel" | "MathPlus" | "MathMinus" | "MathMultiply" | "MathDivide" | "MathEqual" | "MathNotEqual" | "CornerTabs" | "SquareTabs" | "PlaqueTabs" | "ChartX" | "ChartStar" | "ChartPlus";
        /**
         *
         * Represents the height, in points, of the shape.
            Throws an invalid argument exception when set with a negative value or zero as input.
         *
         * 
         */
        height: number;
        /**
         *
         * Represents the shape identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * The distance, in points, from the left side of the shape to the left side of the worksheet.
            Throws an invalid argument exception when set with a negative value as input.
         *
         * 
         */
        left: number;
        /**
         *
         * Represents the level of the specified shape. For example, a level of 0 means that the shape is not part of any groups, a level of 1 means the shape is part of a top-level group, and a level of 2 means the shape is part of a sub-group of the top level.
         *
         * 
         */
        readonly level: number;
        /**
         *
         * Specifies whether or not the aspect ratio of this shape is locked.
         *
         * 
         */
        lockAspectRatio: boolean;
        /**
         *
         * Represents the name of the shape.
         *
         * 
         */
        name: string;
        /**
         *
         * Represents how the object is attached to the cells below it.
         *
         * 
         */
        placement: Excel.Placement | "TwoCell" | "OneCell" | "Absolute";
        /**
         *
         * Represents the rotation, in degrees, of the shape.
         *
         * 
         */
        rotation: number;
        /**
         *
         * The distance, in points, from the top edge of the shape to the top edge of the worksheet.
            Throws an invalid argument exception when set with a negative value as input.
         *
         * 
         */
        top: number;
        /**
         *
         * Returns the type of this shape. See Excel.ShapeType for details. Read-only.
         *
         * 
         */
        readonly type: Excel.ShapeType | "Unsupported" | "Image" | "GeometricShape" | "Group" | "Line";
        /**
         *
         * Represents the visibility of this shape.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Represents the width, in points, of the shape.
            Throws an invalid argument exception when set with a negative value or zero as input.
         *
         * 
         */
        width: number;
        /**
         *
         * Returns the position of the specified shape in the z-order, with 0 representing the bottom of the order stack. Read-only.
         *
         * 
         */
        readonly zOrderPosition: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Shape): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Shape): void;
        /**
         *
         * Copies and pastes a Shape object.
            The pasted shape is copied to the same pixel location as this shape.
         *
         * 
         *
         * @param destinationSheet - The sheet to which the shape object will be pasted. The default value is the copied Shape's worksheet.
         */
        copyTo(destinationSheet?: Worksheet | string): Excel.Shape;
        /**
         *
         * Removes the shape from the worksheet.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Converts the shape to an image and returns the image as a base64-encoded string. The DPI is 96. The only supported formats are `Excel.PictureFormat.BMP`, `Excel.PictureFormat.PNG`, `Excel.PictureFormat.JPEG`, and `Excel.PictureFormat.GIF`.
         *
         * 
         *
         * @param format - Specifies the format of the image.
         */
        getAsImage(format: Excel.PictureFormat): ClientResult<string>;
        /**
         *
         * Converts the shape to an image and returns the image as a base64-encoded string. The DPI is 96. The only supported formats are `Excel.PictureFormat.BMP`, `Excel.PictureFormat.PNG`, `Excel.PictureFormat.JPEG`, and `Excel.PictureFormat.GIF`.
         *
         * 
         *
         * @param formatString - Specifies the format of the image.
         */
        getAsImage(formatString: "UNKNOWN" | "BMP" | "JPEG" | "GIF" | "PNG" | "SVG"): ClientResult<string>;
        /**
         *
         * Moves the shape horizontally by the specified number of points.
         *
         * 
         *
         * @param increment - The increment, in points, the shape will be horizontally moved. A positive value moves the shape to the right and a negative value moves it to the left. If the sheet is right-to-left oriented, this is reversed: positive values will move the shape to the left and negative values will move it to the right.
         */
        incrementLeft(increment: number): void;
        /**
         *
         * Rotates the shape clockwise around the z-axis by the specified number of degrees.
            Use the `rotation` property to set the absolute rotation of the shape.
         *
         * 
         *
         * @param increment - How many degrees the shape will be rotated. A positive value rotates the shape clockwise; a negative value rotates it counterclockwise.
         */
        incrementRotation(increment: number): void;
        /**
         *
         * Moves the shape vertically by the specified number of points.
         *
         * 
         *
         * @param increment - The increment, in points, the shape will be vertically moved. in points. A positive value moves the shape down and a negative value moves it up.
         */
        incrementTop(increment: number): void;
        /**
         *
         * Scales the height of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * 
         *
         * @param scaleFactor - Specifies the ratio between the height of the shape after you resize it and the current or original height.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents the shape's upper left corner retains its position.
         */
        scaleHeight(scaleFactor: number, scaleType: Excel.ShapeScaleType, scaleFrom?: Excel.ShapeScaleFrom): void;
        /**
         *
         * Scales the height of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current height.
         *
         * 
         *
         * @param scaleFactor - Specifies the ratio between the height of the shape after you resize it and the current or original height.
         * @param scaleTypeString - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents the shape's upper left corner retains its position.
         */
        scaleHeight(scaleFactor: number, scaleTypeString: "CurrentSize" | "OriginalSize", scaleFrom?: "ScaleFromTopLeft" | "ScaleFromMiddle" | "ScaleFromBottomRight"): void;
        /**
         *
         * Scales the width of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current width.
         *
         * 
         *
         * @param scaleFactor - Specifies the ratio between the width of the shape after you resize it and the current or original width.
         * @param scaleType - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents the shape's upper left corner retains its position.
         */
        scaleWidth(scaleFactor: number, scaleType: Excel.ShapeScaleType, scaleFrom?: Excel.ShapeScaleFrom): void;
        /**
         *
         * Scales the width of the shape by a specified factor. For images, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures are always scaled relative to their current width.
         *
         * 
         *
         * @param scaleFactor - Specifies the ratio between the width of the shape after you resize it and the current or original width.
         * @param scaleTypeString - Specifies whether the shape is scaled relative to its original or current size. The original size scaling option only works for images.
         * @param scaleFrom - Optional. Specifies which part of the shape retains its position when the shape is scaled. If omitted, it represents the shape's upper left corner retains its position.
         */
        scaleWidth(scaleFactor: number, scaleTypeString: "CurrentSize" | "OriginalSize", scaleFrom?: "ScaleFromTopLeft" | "ScaleFromMiddle" | "ScaleFromBottomRight"): void;
        /**
         *
         * Moves the specified shape up or down the collection's z-order, which shifts it in front of or behind other shapes.
         *
         * 
         *
         * @param position - Where to move the shape in the z-order stack relative to the other shapes. See Excel.ShapeZOrder for details.
         */
        setZOrder(position: Excel.ShapeZOrder): void;
        /**
         *
         * Moves the specified shape up or down the collection's z-order, which shifts it in front of or behind other shapes.
         *
         * 
         *
         * @param positionString - Where to move the shape in the z-order stack relative to the other shapes. See Excel.ShapeZOrder for details.
         */
        setZOrder(positionString: "BringToFront" | "BringForward" | "SendToBack" | "SendBackward"): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Shape;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Shape object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a geometric shape inside a worksheet. A geometric shape can be a rectangle, block arrow, equation symbol, flowchart item, star, banner, callout, or any other basic shape in Excel.
     *
     * 
     */
    export class GeometricShape{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the Shape object for the geometric shape. Read-only.
         *
         * 
         */
        readonly shape: Excel.Shape;
        /**
         *
         * Returns the shape identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.GeometricShape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.GeometricShape;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.GeometricShape object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.GeometricShapeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents an image in the worksheet. To get the corresponding Shape object, use Image.shape.
     *
     * 
     */
    export class Image{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the Shape object associated with the image. Read-only.
         *
         * 
         */
        readonly shape: Excel.Shape;
        /**
         *
         * Represents the shape identifier for the image object. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Returns the format of the image. Read-only.
         *
         * 
         */
        readonly format: Excel.PictureFormat | "UNKNOWN" | "BMP" | "JPEG" | "GIF" | "PNG" | "SVG";
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Image;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Image;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Image object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ImageData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a shape group inside a worksheet. To get the corresponding Shape object, use `ShapeGroup.shape`.
     *
     * 
     */
    export class ShapeGroup{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the Shape object associated with the group. Read-only.
         *
         * 
         */
        readonly shape: Excel.Shape;
        /**
         *
         * Returns the collection of Shape objects. Read-only.
         *
         * 
         */
        readonly shapes: Excel.GroupShapeCollection;
        /**
         *
         * Represents the shape identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Ungroups any grouped shapes in the specified shape group.
         *
         * 
         */
        ungroup(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ShapeGroup;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ShapeGroup;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ShapeGroup object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeGroupData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the shape collection inside a shape group.
     *
     * 
     */
    export class GroupShapeCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Shape[];
        /**
         *
         * Returns the number of shapes in the shape group. Read-only.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a shape using its Name or ID.
         *
         * 
         *
         * @param key - The Name or ID of the shape to be retrieved.
         */
        getItem(key: string): Excel.Shape;
        /**
         *
         * Gets a shape based on its position in the collection.
         *
         * 
         *
         * @param index - The zero-based index value of the object to be retrieved.
         */
        getItemAt(index: number): Excel.Shape;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.GroupShapeCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.GroupShapeCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.GroupShapeCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a line inside a worksheet. To get the corresponding Shape object, use `Line.shape`.
     *
     * 
     */
    export class Line{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the shape to which the beginning of the specified line is attached. Read-only.
         *
         * 
         */
        readonly beginConnectedShape: Excel.Shape;
        /**
         *
         * Represents the shape to which the end of the specified line is attached. Read-only.
         *
         * 
         */
        readonly endConnectedShape: Excel.Shape;
        /**
         *
         * Returns the Shape object associated with the line. Read-only.
         *
         * 
         */
        readonly shape: Excel.Shape;
        /**
         *
         * Represents the length of the arrowhead at the beginning of the specified line.
         *
         * 
         */
        beginArrowheadLength: Excel.ArrowheadLength | "Short" | "Medium" | "Long";
        /**
         *
         * Represents the style of the arrowhead at the beginning of the specified line.
         *
         * 
         */
        beginArrowheadStyle: Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open";
        /**
         *
         * Represents the width of the arrowhead at the beginning of the specified line.
         *
         * 
         */
        beginArrowheadWidth: Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide";
        /**
         *
         * Represents the connection site to which the beginning of a connector is connected. Read-only. Returns null when the beginning of the line is not attached to any shape.
         *
         * 
         */
        readonly beginConnectedSite: number;
        /**
         *
         * Represents the length of the arrowhead at the end of the specified line.
         *
         * 
         */
        endArrowheadLength: Excel.ArrowheadLength | "Short" | "Medium" | "Long";
        /**
         *
         * Represents the style of the arrowhead at the end of the specified line.
         *
         * 
         */
        endArrowheadStyle: Excel.ArrowheadStyle | "None" | "Triangle" | "Stealth" | "Diamond" | "Oval" | "Open";
        /**
         *
         * Represents the width of the arrowhead at the end of the specified line.
         *
         * 
         */
        endArrowheadWidth: Excel.ArrowheadWidth | "Narrow" | "Medium" | "Wide";
        /**
         *
         * Represents the connection site to which the end of a connector is connected. Read-only. Returns null when the end of the line is not attached to any shape.
         *
         * 
         */
        readonly endConnectedSite: number;
        /**
         *
         * Represents the shape identifier. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * Specifies whether or not the beginning of the specified line is connected to a shape. Read-only.
         *
         * 
         */
        readonly isBeginConnected: boolean;
        /**
         *
         * Specifies whether or not the end of the specified line is connected to a shape. Read-only.
         *
         * 
         */
        readonly isEndConnected: boolean;
        /**
         *
         * Represents the connector type for the line.
         *
         * 
         */
        connectorType: Excel.ConnectorType | "Straight" | "Elbow" | "Curve";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Line): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Line): void;
        /**
         *
         * Attaches the beginning of the specified connector to a specified shape.
         *
         * 
         *
         * @param shape - The shape to connect.
         * @param connectionSite - The connection site on the shape to which the beginning of the connector is attached. Must be an integer between 0 (inclusive) and the connection-site count of the specified shape (exclusive).
         */
        connectBeginShape(shape: Excel.Shape, connectionSite: number): void;
        /**
         *
         * Attaches the end of the specified connector to a specified shape.
         *
         * 
         *
         * @param shape - The shape to connect.
         * @param connectionSite - The connection site on the shape to which the end of the connector is attached. Must be an integer between 0 (inclusive) and the connection-site count of the specified shape (exclusive).
         */
        connectEndShape(shape: Excel.Shape, connectionSite: number): void;
        /**
         *
         * Detaches the beginning of the specified connector from a shape.
         *
         * 
         */
        disconnectBeginShape(): void;
        /**
         *
         * Detaches the end of the specified connector from a shape.
         *
         * 
         */
        disconnectEndShape(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Line;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Line;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Line object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.LineData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the fill formatting of a shape object.
     *
     * 
     */
    export class ShapeFill{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the shape fill foreground color in HTML color format, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange")
         *
         * 
         */
        foregroundColor: string;
        /**
         *
         * Returns or sets the transparency percentage of the fill as a value from 0.0 (opaque) through 1.0 (clear). Returns null if the shape type does not support transparency or the shape fill has inconsistent transparency, such as with a gradient fill type.
         *
         * 
         */
        transparency: number;
        /**
         *
         * Returns the fill type of the shape. Read-only. See Excel.ShapeFillType for details.
         *
         * 
         */
        readonly type: Excel.ShapeFillType | "NoFill" | "Solid" | "Gradient" | "Pattern" | "PictureAndTexture" | "Mixed";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ShapeFill): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ShapeFill): void;
        /**
         *
         * Clears the fill formatting of this shape.
         *
         * 
         */
        clear(): void;
        /**
         *
         * Sets the fill formatting of the shape to a uniform color. This changes the fill type to "Solid".
         *
         * 
         *
         * @param color - A string that represents the fill color in HTML color format, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         */
        setSolidColor(color: string): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ShapeFill;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ShapeFill;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ShapeFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeFillData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the line formatting for the shape object. For images and geometric shapes, line formatting represents the border of the shape.
     *
     * 
     */
    export class ShapeLineFormat{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the line color in HTML color format, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the line style of the shape. Returns null when the line is not visible or there are inconsistent dash styles. See Excel.ShapeLineStyle for details.
         *
         * 
         */
        dashStyle: Excel.ShapeLineDashStyle | "Dash" | "DashDot" | "DashDotDot" | "LongDash" | "LongDashDot" | "RoundDot" | "Solid" | "SquareDot" | "LongDashDotDot" | "SystemDash" | "SystemDot" | "SystemDashDot";
        /**
         *
         * Represents the line style of the shape. Returns null when the line is not visible or there are inconsistent styles. See Excel.ShapeLineStyle for details.
         *
         * 
         */
        style: Excel.ShapeLineStyle | "Single" | "ThickBetweenThin" | "ThickThin" | "ThinThick" | "ThinThin";
        /**
         *
         * Represents the degree of transparency of the specified line as a value from 0.0 (opaque) through 1.0 (clear). Returns null when the shape has inconsistent transparencies.
         *
         * 
         */
        transparency: number;
        /**
         *
         * Represents whether or not the line formatting of a shape element is visible. Returns null when the shape has inconsistent visibilities.
         *
         * 
         */
        visible: boolean;
        /**
         *
         * Represents the weight of the line, in points. Returns null when the line is not visible or there are inconsistent line weights.
         *
         * 
         */
        weight: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ShapeLineFormat): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ShapeLineFormat): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ShapeLineFormat;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ShapeLineFormat;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ShapeLineFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeLineFormatData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the text frame of a shape object.
     *
     * 
     */
    export class TextFrame{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the text that is attached to a shape in the text frame, and properties and methods for manipulating the text. See Excel.TextRange for details.
         *
         * 
         */
        readonly textRange: Excel.TextRange;
        /**
         *
         * Gets or sets the automatic sizing settings for the text frame. A text frame can be set to automatically fit the text to the text frame, to automatically fit the text frame to the text, or not perform any automatic sizing.
         *
         * 
         */
        autoSizeSetting: Excel.ShapeAutoSize | "AutoSizeNone" | "AutoSizeTextToFitShape" | "AutoSizeShapeToFitText" | "AutoSizeMixed";
        /**
         *
         * Represents the bottom margin, in points, of the text frame.
         *
         * 
         */
        bottomMargin: number;
        /**
         *
         * Specifies whether the text frame contains text.
         *
         * 
         */
        readonly hasText: boolean;
        /**
         *
         * Represents the horizontal alignment of the text frame. See Excel.ShapeTextHorizontalAlignment for details.
         *
         * 
         */
        horizontalAlignment: Excel.ShapeTextHorizontalAlignment | "Left" | "Center" | "Right" | "Justify" | "JustifyLow" | "Distributed" | "ThaiDistributed";
        /**
         *
         * Represents the horizontal overflow behavior of the text frame. See Excel.ShapeTextHorizontalOverflow for details.
         *
         * 
         */
        horizontalOverflow: Excel.ShapeTextHorizontalOverflow | "Overflow" | "Clip";
        /**
         *
         * Represents the left margin, in points, of the text frame.
         *
         * 
         */
        leftMargin: number;
        /**
         *
         * Represents the text orientation of the text frame. See Excel.ShapeTextOrientation for details.
         *
         * 
         */
        orientation: Excel.ShapeTextOrientation | "Horizontal" | "Vertical" | "Vertical270" | "WordArtVertical" | "EastAsianVertical" | "MongolianVertical" | "WordArtVerticalRTL";
        /**
         *
         * Represents the reading order of the text frame, either left-to-right or right-to-left. See Excel.ShapeTextReadingOrder for details.
         *
         * 
         */
        readingOrder: Excel.ShapeTextReadingOrder | "LeftToRight" | "RightToLeft";
        /**
         *
         * Represents the right margin, in points, of the text frame.
         *
         * 
         */
        rightMargin: number;
        /**
         *
         * Represents the top margin, in points, of the text frame.
         *
         * 
         */
        topMargin: number;
        /**
         *
         * Represents the vertical alignment of the text frame. See Excel.ShapeTextVerticalAlignment for details.
         *
         * 
         */
        verticalAlignment: Excel.ShapeTextVerticalAlignment | "Top" | "Middle" | "Bottom" | "Justified" | "Distributed";
        /**
         *
         * Represents the vertical overflow behavior of the text frame. See Excel.ShapeTextVerticalOverflow for details.
         *
         * 
         */
        verticalOverflow: Excel.ShapeTextVerticalOverflow | "Overflow" | "Ellipsis" | "Clip";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TextFrame): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TextFrame): void;
        /**
         *
         * Deletes all the text in the text frame.
         *
         * 
         */
        deleteText(): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TextFrame;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TextFrame;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TextFrame object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextFrameData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Contains the text that is attached to a shape, in addition to properties and methods for manipulating the text.
     *
     * 
     */
    export class TextRange{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns a ShapeFont object that represents the font attributes for the text range. Read-only.
         *
         * 
         */
        readonly font: Excel.ShapeFont;
        /**
         *
         * Represents the plain text content of the text range.
         *
         * 
         */
        text: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.TextRange): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.TextRange): void;
        /**
         *
         * Returns a TextRange object for the substring in the given range.
         *
         * 
         *
         * @param start - The zero-based index of the first character to get from the text range.
         * @param length - Optional. The number of characters to be returned in the new text range. If length is omitted, all the characters from start to the end of the text range's last paragraph will be returned.
         */
        getSubstring(start: number, length?: number): Excel.TextRange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.TextRange;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.TextRange;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.TextRange object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextRangeData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents the font attributes, such as font name, font size, and color, for a shape's TextRange object.
     *
     * 
     */
    export class ShapeFont{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the bold status of font. Returns null the TextRange includes both bold and non-bold text fragments.
         *
         * 
         */
        bold: boolean;
        /**
         *
         * The HTML color code representation of the text color (e.g. "#FF0000" represents red). Returns null if the TextRange includes text fragments with different colors.
         *
         * 
         */
        color: string;
        /**
         *
         * Represents the italic status of font. Returns null if the TextRange includes both italic and non-italic text fragments.
         *
         * 
         */
        italic: boolean;
        /**
         *
         * Represents font name (e.g. "Calibri"). If the text is Complex Script or East Asian language, this is the corresponding font name; otherwise it is the Latin font name.
         *
         * 
         */
        name: string;
        /**
         *
         * Represents font size in points (e.g. 11). Returns null if the TextRange includes text fragments with different font sizes.
         *
         * 
         */
        size: number;
        /**
         *
         * Type of underline applied to the font. Returns null if the TextRange includes text fragments with different underline styles. See Excel.ShapeFontUnderlineStyle for details.
         *
         * 
         */
        underline: Excel.ShapeFontUnderlineStyle | "None" | "Single" | "Double" | "Heavy" | "Dotted" | "DottedHeavy" | "Dash" | "DashHeavy" | "DashLong" | "DashLongHeavy" | "DotDash" | "DotDashHeavy" | "DotDotDash" | "DotDotDashHeavy" | "Wavy" | "WavyHeavy" | "WavyDouble";
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.ShapeFont): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.ShapeFont): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.ShapeFont;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.ShapeFont;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.ShapeFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ShapeFontData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a slicer object in the workbook.
     *
     * 
     */
    export class Slicer{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Represents the collection of SlicerItems that are part of the slicer. Read-only.
         *
         * 
         */
        readonly slicerItems: Excel.SlicerItemCollection;
        /**
         *
         * Represents the worksheet containing the slicer. Read-only.
         *
         * 
         */
        readonly worksheet: Excel.Worksheet;
        /**
         *
         * Represents the caption of slicer.
         *
         * 
         */
        caption: string;
        /**
         *
         * Represents the height, in points, of the slicer.
            Throws an "The argument is invalid or missing or has an incorrect format." exception when set with negative value or zero as input.
         *
         * 
         */
        height: number;
        /**
         *
         * Represents the unique id of slicer. Read-only.
         *
         * 
         */
        readonly id: string;
        /**
         *
         * True if all filters currently applied on the slicer are cleared.
         *
         * 
         */
        readonly isFilterCleared: boolean;
        /**
         *
         * Represents the distance, in points, from the left side of the slicer to the left of the worksheet.
            Throws an "The argument is invalid or missing or has an incorrect format." exception when set with negative value as input.
         *
         * 
         */
        left: number;
        /**
         *
         * Represents the name of slicer.
         *
         * 
         */
        name: string;
        /**
         *
         * Represents the sort order of the items in the slicer. Possible values are: "DataSourceOrder", "Ascending", "Descending".
         *
         * 
         */
        sortBy: Excel.SlicerSortType | "DataSourceOrder" | "Ascending" | "Descending";
        /**
         *
         * Constant value that represents the Slicer style. Possible values are: "SlicerStyleLight1" through "SlicerStyleLight6", "TableStyleOther1" through "TableStyleOther2", "SlicerStyleDark1" through "SlicerStyleDark6". A custom user-defined style present in the workbook can also be specified.
         *
         * 
         */
        style: string;
        /**
         *
         * Represents the distance, in points, from the top edge of the slicer to the top of the worksheet.
            Throws an "The argument is invalid or missing or has an incorrect format." exception when set with negative value as input.
         *
         * 
         */
        top: number;
        /**
         *
         * Represents the width, in points, of the slicer.
            Throws an "The argument is invalid or missing or has an incorrect format." exception when set with negative value or zero as input.
         *
         * 
         */
        width: number;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.Slicer): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.Slicer): void;
        /**
         *
         * Clears all the filters currently applied on the slicer.
         *
         * 
         */
        clearFilters(): void;
        /**
         *
         * Deletes the slicer.
         *
         * 
         */
        delete(): void;
        /**
         *
         * Returns an array of selected items' keys. Read-only.
         *
         * 
         */
        getSelectedItems(): ClientResult<string[]>;
        /**
         *
         * Selects slicer items based on their keys. The previous selections are cleared.
            All items will be selected by default if the array is empty.
         *
         * 
         *
         * @param items - Optional. The specified slicer item names to be selected.
         */
        selectItems(items?: string[]): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.Slicer;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.Slicer;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Slicer object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the slicer objects on the workbook or a worksheet.
     *
     * 
     */
    export class SlicerCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.Slicer[];
        /**
         *
         * Adds a new slicer to the workbook.
         *
         * 
         *
         * @param slicerSource - The data source that the new slicer will be based on. It can be a PivotTable object, a Table object or a string. When a PivotTable object is passed, the data source is the source of the PivotTable object. When a Table object is passed, the data source is the Table object. When a string is passed, it is interpreted as the name/id of a PivotTable/Table.
         * @param sourceField - The field in the data source to filter by. It can be a PivotField object, a TableColumn object, the id of a PivotField or the id/name of TableColumn.
         * @param slicerDestination - Optional. The worksheet where the new slicer will be created in. It can be a Worksheet object or the name/id of a worksheet. This parameter can be omitted if the slicer collection is retrieved from worksheet.
         * @returns The new slicer.
         */
        add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;
        /**
         *
         * Returns the number of slicers in the collection.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a slicer object using its name or id.
         *
         * 
         *
         * @param key - The name or id of the slicer.
         */
        getItem(key: string): Excel.Slicer;
        /**
         *
         * Gets a slicer based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.Slicer;
        /**
         *
         * Gets a slicer using its name or id. If the slicer does not exist, will return a null object.
         *
         * 
         *
         * @param key - Name or Id of the slicer to be retrieved.
         */
        getItemOrNullObject(key: string): Excel.Slicer;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SlicerCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     *
     * Represents a slicer item in a slicer.
     *
     * 
     */
    export class SlicerItem{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * True if the slicer item has data.
         *
         * 
         */
        readonly hasData: boolean;
        /**
         *
         * True if the slicer item is selected.
            Setting this value will not clear other SlicerItems' selected state.
            By default, if the slicer item is the only one selected, when it is deselected, all items will be selected.
         *
         * 
         */
        isSelected: boolean;
        /**
         *
         * Represents the unique value representing the slicer item.
         *
         * 
         */
        readonly key: string;
        /**
         *
         * Represents the title displayed in the UI.
         *
         * 
         */
        readonly name: string;
        /** Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.
         *
         * @remarks
         *
         * This method has the following additional signature:
         *
         * `set(properties: Excel.SlicerItem): void`
         *
         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.
         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.
         */
        
        /** Sets multiple properties on the object at the same time, based on an existing loaded object. */
        set(properties: Excel.SlicerItem): void;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SlicerItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): Excel.SlicerItem;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.SlicerItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerItemData`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * Represents a collection of all the slicer item objects on the slicer.
     *
     * 
     */
    export class SlicerItemCollection{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /** Gets the loaded child items in this collection. */
        readonly items: Excel.SlicerItem[];
        /**
         *
         * Returns the number of slicer items in the slicer.
         *
         * 
         */
        getCount(): ClientResult<number>;
        /**
         *
         * Gets a slicer item object using its key or name.
         *
         * 
         *
         * @param key - The key or name of the slicer item.
         */
        getItem(key: string): Excel.SlicerItem;
        /**
         *
         * Gets a slicer item based on its position in the collection.
         *
         * 
         *
         * @param index - Index value of the object to be retrieved. Zero-indexed.
         */
        getItemAt(index: number): Excel.SlicerItem;
        /**
         *
         * Gets a slicer item using its key or name. If the slicer item does not exist, will return a null object.
         *
         * 
         *
         * @param key - Key or name of the slicer to be retrieved.
         */
        getItemOrNullObject(key: string): Excel.SlicerItem;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): Excel.SlicerItemCollection;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original `Excel.SlicerItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerItemCollectionData`) that contains an "items" array with shallow copies of any loaded properties from the collection's items.
        */
        
    }
    /**
     * 
     */
    enum ChartAxisType {
        invalid = "Invalid",
        /**
         *
         * Axis displays categories.
         *
         */
        category = "Category",
        /**
         *
         * Axis displays values.
         *
         */
        value = "Value",
        /**
         *
         * Axis displays data series.
         *
         */
        series = "Series"
    }
    /**
     * 
     */
    enum ChartAxisGroup {
        primary = "Primary",
        secondary = "Secondary"
    }
    /**
     * 
     */
    enum ChartAxisScaleType {
        linear = "Linear",
        logarithmic = "Logarithmic"
    }
    /**
     * 
     */
    enum ChartAxisPosition {
        automatic = "Automatic",
        maximum = "Maximum",
        minimum = "Minimum",
        custom = "Custom"
    }
    /**
     * 
     */
    enum ChartAxisTickMark {
        none = "None",
        cross = "Cross",
        inside = "Inside",
        outside = "Outside"
    }
    /**
     *
     * Represents the state of calculation across the entire Excel application.
     *
     * 
     */
    enum CalculationState {
        /**
         *
         * Calculations complete.
         *
         */
        done = "Done",
        /**
         *
         * Calculations in progress.
         *
         */
        calculating = "Calculating",
        /**
         *
         * Changes that trigger calculation have been made, but a recalculation has not yet been performed.
         *
         */
        pending = "Pending"
    }
    /**
     * 
     */
    enum ChartAxisTickLabelPosition {
        nextToAxis = "NextToAxis",
        high = "High",
        low = "Low",
        none = "None"
    }
    /**
     * 
     */
    enum ChartAxisDisplayUnit {
        /**
         *
         * Default option. This will reset display unit to the axis, and set unit label invisible.
         *
         */
        none = "None",
        /**
         *
         * This will set the axis in units of hundreds.
         *
         */
        hundreds = "Hundreds",
        /**
         *
         * This will set the axis in units of thousands.
         *
         */
        thousands = "Thousands",
        /**
         *
         * This will set the axis in units of tens of thousands.
         *
         */
        tenThousands = "TenThousands",
        /**
         *
         * This will set the axis in units of hundreds of thousands.
         *
         */
        hundredThousands = "HundredThousands",
        /**
         *
         * This will set the axis in units of millions.
         *
         */
        millions = "Millions",
        /**
         *
         * This will set the axis in units of tens of millions.
         *
         */
        tenMillions = "TenMillions",
        /**
         *
         * This will set the axis in units of hundreds of millions.
         *
         */
        hundredMillions = "HundredMillions",
        /**
         *
         * This will set the axis in units of billions.
         *
         */
        billions = "Billions",
        /**
         *
         * This will set the axis in units of trillions.
         *
         */
        trillions = "Trillions",
        /**
         *
         * This will set the axis in units of custom value.
         *
         */
        custom = "Custom"
    }
    /**
     *
     * Specifies the unit of time for chart axes and data series.
     *
     * 
     */
    enum ChartAxisTimeUnit {
        days = "Days",
        months = "Months",
        years = "Years"
    }
    /**
     *
     * Represents the quartile calculation type of chart series layout. Only applies to a box and whisker chart.
     *
     * 
     */
    enum ChartBoxQuartileCalculation {
        inclusive = "Inclusive",
        exclusive = "Exclusive"
    }
    /**
     *
     * Specifies the type of the category axis.
     *
     * 
     */
    enum ChartAxisCategoryType {
        /**
         *
         * Excel controls the axis type.
         *
         */
        automatic = "Automatic",
        /**
         *
         * Axis groups data by an arbitrary set of categories.
         *
         */
        textAxis = "TextAxis",
        /**
         *
         * Axis groups data on a time scale.
         *
         */
        dateAxis = "DateAxis"
    }
    /**
     *
     * Specifies the bin's type of a histogram chart or pareto chart series.
     *
     * 
     */
    enum ChartBinType {
        category = "Category",
        auto = "Auto",
        binWidth = "BinWidth",
        binCount = "BinCount"
    }
    /**
     * 
     */
    enum ChartLineStyle {
        none = "None",
        continuous = "Continuous",
        dash = "Dash",
        dashDot = "DashDot",
        dashDotDot = "DashDotDot",
        dot = "Dot",
        grey25 = "Grey25",
        grey50 = "Grey50",
        grey75 = "Grey75",
        automatic = "Automatic",
        roundDot = "RoundDot"
    }
    /**
     * 
     */
    enum ChartDataLabelPosition {
        invalid = "Invalid",
        none = "None",
        center = "Center",
        insideEnd = "InsideEnd",
        insideBase = "InsideBase",
        outsideEnd = "OutsideEnd",
        left = "Left",
        right = "Right",
        top = "Top",
        bottom = "Bottom",
        bestFit = "BestFit",
        callout = "Callout"
    }
    /**
     *
     * Represents which parts of the error bar to include.
     *
     * 
     */
    enum ChartErrorBarsInclude {
        both = "Both",
        minusValues = "MinusValues",
        plusValues = "PlusValues"
    }
    /**
     *
     * Represents the range type for error bars.
     *
     * 
     */
    enum ChartErrorBarsType {
        fixedValue = "FixedValue",
        percent = "Percent",
        stDev = "StDev",
        stError = "StError",
        custom = "Custom"
    }
    /**
     *
     * Represents the mapping level of a chart series. This only applies to region map charts.
     *
     * 
     */
    enum ChartMapAreaLevel {
        automatic = "Automatic",
        dataOnly = "DataOnly",
        city = "City",
        county = "County",
        state = "State",
        country = "Country",
        continent = "Continent",
        world = "World"
    }
    /**
     *
     * Represents the gradient style of a chart series. This is only applicable for region map charts.
     *
     * 
     */
    enum ChartGradientStyle {
        twoPhaseColor = "TwoPhaseColor",
        threePhaseColor = "ThreePhaseColor"
    }
    /**
     *
     * Represents the gradient style type of a chart series. This is only applicable for region map charts.
     *
     * 
     */
    enum ChartGradientStyleType {
        extremeValue = "ExtremeValue",
        number = "Number",
        percent = "Percent"
    }
    /**
     *
     * Represents the position of chart title.
     *
     * 
     */
    enum ChartTitlePosition {
        automatic = "Automatic",
        top = "Top",
        bottom = "Bottom",
        left = "Left",
        right = "Right"
    }
    /**
     * 
     */
    enum ChartLegendPosition {
        invalid = "Invalid",
        top = "Top",
        bottom = "Bottom",
        left = "Left",
        right = "Right",
        corner = "Corner",
        custom = "Custom"
    }
    /**
     * 
     */
    enum ChartMarkerStyle {
        invalid = "Invalid",
        automatic = "Automatic",
        none = "None",
        square = "Square",
        diamond = "Diamond",
        triangle = "Triangle",
        x = "X",
        star = "Star",
        dot = "Dot",
        dash = "Dash",
        circle = "Circle",
        plus = "Plus",
        picture = "Picture"
    }
    /**
     * 
     */
    enum ChartPlotAreaPosition {
        automatic = "Automatic",
        custom = "Custom"
    }
    /**
     *
     * Represents the region level of a chart series layout. This only applies to region map charts.
     *
     * 
     */
    enum ChartMapLabelStrategy {
        none = "None",
        bestFit = "BestFit",
        showAll = "ShowAll"
    }
    /**
     *
     * Represents the region projection type of a chart series layout. This only applies to region map charts.
     *
     * 
     */
    enum ChartMapProjectionType {
        automatic = "Automatic",
        mercator = "Mercator",
        miller = "Miller",
        robinson = "Robinson",
        albers = "Albers"
    }
    /**
     *
     * Represents the parent label strategy of the chart series layout. This only applies to treemap charts
     *
     * 
     */
    enum ChartParentLabelStrategy {
        none = "None",
        banner = "Banner",
        overlapping = "Overlapping"
    }
    /**
     *
     * Specifies whether the series are by rows or by columns. On Desktop, the "auto" option will inspect the source data shape to automatically guess whether the data is by rows or columns; in Excel on the web, "auto" will simply default to "columns".
     *
     * 
     */
    enum ChartSeriesBy {
        /**
         *
         * On Desktop, the "auto" option will inspect the source data shape to automatically guess whether the data is by rows or columns; in Excel on the web, "auto" will simply default to "columns".
         *
         */
        auto = "Auto",
        columns = "Columns",
        rows = "Rows"
    }
    /**
     *
     * Represents the horizontal alignment for the specified object.
     *
     * 
     */
    enum ChartTextHorizontalAlignment {
        center = "Center",
        left = "Left",
        right = "Right",
        justify = "Justify",
        distributed = "Distributed"
    }
    /**
     *
     * Represents the vertical alignment for the specified object.
     *
     * 
     */
    enum ChartTextVerticalAlignment {
        center = "Center",
        bottom = "Bottom",
        top = "Top",
        justify = "Justify",
        distributed = "Distributed"
    }
    /**
     * 
     */
    enum ChartTickLabelAlignment {
        center = "Center",
        left = "Left",
        right = "Right"
    }
    /**
     * 
     */
    enum ChartType {
        invalid = "Invalid",
        columnClustered = "ColumnClustered",
        columnStacked = "ColumnStacked",
        columnStacked100 = "ColumnStacked100",
        _3DColumnClustered = "3DColumnClustered",
        _3DColumnStacked = "3DColumnStacked",
        _3DColumnStacked100 = "3DColumnStacked100",
        barClustered = "BarClustered",
        barStacked = "BarStacked",
        barStacked100 = "BarStacked100",
        _3DBarClustered = "3DBarClustered",
        _3DBarStacked = "3DBarStacked",
        _3DBarStacked100 = "3DBarStacked100",
        lineStacked = "LineStacked",
        lineStacked100 = "LineStacked100",
        lineMarkers = "LineMarkers",
        lineMarkersStacked = "LineMarkersStacked",
        lineMarkersStacked100 = "LineMarkersStacked100",
        pieOfPie = "PieOfPie",
        pieExploded = "PieExploded",
        _3DPieExploded = "3DPieExploded",
        barOfPie = "BarOfPie",
        xyscatterSmooth = "XYScatterSmooth",
        xyscatterSmoothNoMarkers = "XYScatterSmoothNoMarkers",
        xyscatterLines = "XYScatterLines",
        xyscatterLinesNoMarkers = "XYScatterLinesNoMarkers",
        areaStacked = "AreaStacked",
        areaStacked100 = "AreaStacked100",
        _3DAreaStacked = "3DAreaStacked",
        _3DAreaStacked100 = "3DAreaStacked100",
        doughnutExploded = "DoughnutExploded",
        radarMarkers = "RadarMarkers",
        radarFilled = "RadarFilled",
        surface = "Surface",
        surfaceWireframe = "SurfaceWireframe",
        surfaceTopView = "SurfaceTopView",
        surfaceTopViewWireframe = "SurfaceTopViewWireframe",
        bubble = "Bubble",
        bubble3DEffect = "Bubble3DEffect",
        stockHLC = "StockHLC",
        stockOHLC = "StockOHLC",
        stockVHLC = "StockVHLC",
        stockVOHLC = "StockVOHLC",
        cylinderColClustered = "CylinderColClustered",
        cylinderColStacked = "CylinderColStacked",
        cylinderColStacked100 = "CylinderColStacked100",
        cylinderBarClustered = "CylinderBarClustered",
        cylinderBarStacked = "CylinderBarStacked",
        cylinderBarStacked100 = "CylinderBarStacked100",
        cylinderCol = "CylinderCol",
        coneColClustered = "ConeColClustered",
        coneColStacked = "ConeColStacked",
        coneColStacked100 = "ConeColStacked100",
        coneBarClustered = "ConeBarClustered",
        coneBarStacked = "ConeBarStacked",
        coneBarStacked100 = "ConeBarStacked100",
        coneCol = "ConeCol",
        pyramidColClustered = "PyramidColClustered",
        pyramidColStacked = "PyramidColStacked",
        pyramidColStacked100 = "PyramidColStacked100",
        pyramidBarClustered = "PyramidBarClustered",
        pyramidBarStacked = "PyramidBarStacked",
        pyramidBarStacked100 = "PyramidBarStacked100",
        pyramidCol = "PyramidCol",
        _3DColumn = "3DColumn",
        line = "Line",
        _3DLine = "3DLine",
        _3DPie = "3DPie",
        pie = "Pie",
        xyscatter = "XYScatter",
        _3DArea = "3DArea",
        area = "Area",
        doughnut = "Doughnut",
        radar = "Radar",
        histogram = "Histogram",
        boxwhisker = "Boxwhisker",
        pareto = "Pareto",
        regionMap = "RegionMap",
        treemap = "Treemap",
        waterfall = "Waterfall",
        sunburst = "Sunburst",
        funnel = "Funnel"
    }
    /**
     * 
     */
    enum ChartUnderlineStyle {
        none = "None",
        single = "Single"
    }
    /**
     * 
     */
    enum ChartDisplayBlanksAs {
        notPlotted = "NotPlotted",
        zero = "Zero",
        interplotted = "Interplotted"
    }
    /**
     * 
     */
    enum ChartPlotBy {
        rows = "Rows",
        columns = "Columns"
    }
    /**
     * 
     */
    enum ChartSplitType {
        splitByPosition = "SplitByPosition",
        splitByValue = "SplitByValue",
        splitByPercentValue = "SplitByPercentValue",
        splitByCustomSplit = "SplitByCustomSplit"
    }
    /**
     * 
     */
    enum ChartColorScheme {
        colorfulPalette1 = "ColorfulPalette1",
        colorfulPalette2 = "ColorfulPalette2",
        colorfulPalette3 = "ColorfulPalette3",
        colorfulPalette4 = "ColorfulPalette4",
        monochromaticPalette1 = "MonochromaticPalette1",
        monochromaticPalette2 = "MonochromaticPalette2",
        monochromaticPalette3 = "MonochromaticPalette3",
        monochromaticPalette4 = "MonochromaticPalette4",
        monochromaticPalette5 = "MonochromaticPalette5",
        monochromaticPalette6 = "MonochromaticPalette6",
        monochromaticPalette7 = "MonochromaticPalette7",
        monochromaticPalette8 = "MonochromaticPalette8",
        monochromaticPalette9 = "MonochromaticPalette9",
        monochromaticPalette10 = "MonochromaticPalette10",
        monochromaticPalette11 = "MonochromaticPalette11",
        monochromaticPalette12 = "MonochromaticPalette12",
        monochromaticPalette13 = "MonochromaticPalette13"
    }
    /**
     * 
     */
    enum ChartTrendlineType {
        linear = "Linear",
        exponential = "Exponential",
        logarithmic = "Logarithmic",
        movingAverage = "MovingAverage",
        polynomial = "Polynomial",
        power = "Power"
    }
    /**
     *
     * Specifies where in the z-order a shape should be moved relative to other shapes.
     *
     * 
     */
    enum ShapeZOrder {
        bringToFront = "BringToFront",
        bringForward = "BringForward",
        sendToBack = "SendToBack",
        sendBackward = "SendBackward"
    }
    /**
     *
     * Specifies the type of a shape.
     *
     * 
     */
    enum ShapeType {
        unsupported = "Unsupported",
        image = "Image",
        geometricShape = "GeometricShape",
        group = "Group",
        line = "Line"
    }
    /**
     *
     * Specifies whether the shape is scaled relative to its original or current size.
     *
     * 
     */
    enum ShapeScaleType {
        currentSize = "CurrentSize",
        originalSize = "OriginalSize"
    }
    /**
     *
     * Specifies which part of the shape retains its position when the shape is scaled.
     *
     * 
     */
    enum ShapeScaleFrom {
        scaleFromTopLeft = "ScaleFromTopLeft",
        scaleFromMiddle = "ScaleFromMiddle",
        scaleFromBottomRight = "ScaleFromBottomRight"
    }
    /**
     *
     * Specifies a shape's fill type.
     *
     * 
     */
    enum ShapeFillType {
        /**
         *
         * No fill.
         *
         */
        noFill = "NoFill",
        /**
         *
         * Solid fill.
         *
         */
        solid = "Solid",
        /**
         *
         * Gradient fill.
         *
         */
        gradient = "Gradient",
        /**
         *
         * Pattern fill.
         *
         */
        pattern = "Pattern",
        /**
         *
         * Picture and texture fill.
         *
         */
        pictureAndTexture = "PictureAndTexture",
        /**
         *
         * Mixed fill.
         *
         */
        mixed = "Mixed"
    }
    /**
     *
     * The type of underline applied to a font.
     *
     * 
     */
    enum ShapeFontUnderlineStyle {
        none = "None",
        single = "Single",
        double = "Double",
        heavy = "Heavy",
        dotted = "Dotted",
        dottedHeavy = "DottedHeavy",
        dash = "Dash",
        dashHeavy = "DashHeavy",
        dashLong = "DashLong",
        dashLongHeavy = "DashLongHeavy",
        dotDash = "DotDash",
        dotDashHeavy = "DotDashHeavy",
        dotDotDash = "DotDotDash",
        dotDotDashHeavy = "DotDotDashHeavy",
        wavy = "Wavy",
        wavyHeavy = "WavyHeavy",
        wavyDouble = "WavyDouble"
    }
    /**
     *
     * The format of the image.
     *
     * 
     */
    enum PictureFormat {
        unknown = "UNKNOWN",
        /**
         *
         * Bitmap image.
         *
         */
        bmp = "BMP",
        /**
         *
         * Joint Photographic Experts Group.
         *
         */
        jpeg = "JPEG",
        /**
         *
         * Graphics Interchange Format.
         *
         */
        gif = "GIF",
        /**
         *
         * Portable Network Graphics.
         *
         */
        png = "PNG",
        /**
         *
         * Scalable Vector Graphic.
         *
         */
        svg = "SVG"
    }
    /**
     *
     * The style for a line.
     *
     * 
     */
    enum ShapeLineStyle {
        /**
         *
         * Single line.
         *
         */
        single = "Single",
        /**
         *
         * Thick line with a thin line on each side.
         *
         */
        thickBetweenThin = "ThickBetweenThin",
        /**
         *
         * Thick line next to thin line. For horizontal lines, the thick line is above the thin line. For vertical lines, the thick line is to the left of the thin line.
         *
         */
        thickThin = "ThickThin",
        /**
         *
         * Thick line next to thin line. For horizontal lines, the thick line is below the thin line. For vertical lines, the thick line is to the right of the thin line.
         *
         */
        thinThick = "ThinThick",
        /**
         *
         * Two thin lines.
         *
         */
        thinThin = "ThinThin"
    }
    /**
     *
     * The dash style for a line.
     *
     * 
     */
    enum ShapeLineDashStyle {
        dash = "Dash",
        dashDot = "DashDot",
        dashDotDot = "DashDotDot",
        longDash = "LongDash",
        longDashDot = "LongDashDot",
        roundDot = "RoundDot",
        solid = "Solid",
        squareDot = "SquareDot",
        longDashDotDot = "LongDashDotDot",
        systemDash = "SystemDash",
        systemDot = "SystemDot",
        systemDashDot = "SystemDashDot"
    }
    /**
     * 
     */
    enum ArrowheadLength {
        short = "Short",
        medium = "Medium",
        long = "Long"
    }
    /**
     * 
     */
    enum ArrowheadStyle {
        none = "None",
        triangle = "Triangle",
        stealth = "Stealth",
        diamond = "Diamond",
        oval = "Oval",
        open = "Open"
    }
    /**
     * 
     */
    enum ArrowheadWidth {
        narrow = "Narrow",
        medium = "Medium",
        wide = "Wide"
    }
    /**
     * 
     */
    enum BindingType {
        range = "Range",
        table = "Table",
        text = "Text"
    }
    /**
     * 
     */
    enum BorderIndex {
        edgeTop = "EdgeTop",
        edgeBottom = "EdgeBottom",
        edgeLeft = "EdgeLeft",
        edgeRight = "EdgeRight",
        insideVertical = "InsideVertical",
        insideHorizontal = "InsideHorizontal",
        diagonalDown = "DiagonalDown",
        diagonalUp = "DiagonalUp"
    }
    /**
     * 
     */
    enum BorderLineStyle {
        none = "None",
        continuous = "Continuous",
        dash = "Dash",
        dashDot = "DashDot",
        dashDotDot = "DashDotDot",
        dot = "Dot",
        double = "Double",
        slantDashDot = "SlantDashDot"
    }
    /**
     * 
     */
    enum BorderWeight {
        hairline = "Hairline",
        thin = "Thin",
        medium = "Medium",
        thick = "Thick"
    }
    /**
     * 
     */
    enum CalculationMode {
        /**
         *
         * The default recalculation behavior where Excel calculates new formula results every time the relevant data is changed.
         *
         */
        automatic = "Automatic",
        /**
         *
         * Calculates new formula results every time the relevant data is changed, unless the formula is in a data table.
         *
         */
        automaticExceptTables = "AutomaticExceptTables",
        /**
         *
         * Calculations only occur when the user or add-in requests them.
         *
         */
        manual = "Manual"
    }
    /**
     * 
     */
    enum CalculationType {
        /**
         *
         * Recalculates all cells that Excel has marked as dirty, that is, dependents of volatile or changed data, and cells programmatically marked as dirty.
         *
         */
        recalculate = "Recalculate",
        /**
         *
         * This will mark all cells as dirty and then recalculate them.
         *
         */
        full = "Full",
        /**
         *
         * This will rebuild the full dependency chain, mark all cells as dirty and then recalculate them.
         *
         */
        fullRebuild = "FullRebuild"
    }
    /**
     * 
     */
    enum ClearApplyTo {
        all = "All",
        /**
         *
         * Clears all formatting for the range.
         *
         */
        formats = "Formats",
        /**
         *
         * Clears the contents of the range.
         *
         */
        contents = "Contents",
        /**
         *
         * Clears all hyperlinks, but leaves all content and formatting intact.
         *
         */
        hyperlinks = "Hyperlinks",
        /**
         *
         * Removes hyperlinks and formatting for the cell but leaves content, conditional formats, and data validation intact.
         *
         */
        removeHyperlinks = "RemoveHyperlinks"
    }
    /**
     *
     * Represents the format options for a Data Bar Axis.
     *
     * 
     */
    enum ConditionalDataBarAxisFormat {
        automatic = "Automatic",
        none = "None",
        cellMidPoint = "CellMidPoint"
    }
    /**
     *
     * Represents the Data Bar direction within a cell.
     *
     * 
     */
    enum ConditionalDataBarDirection {
        context = "Context",
        leftToRight = "LeftToRight",
        rightToLeft = "RightToLeft"
    }
    /**
     *
     * Represents the direction for a selection.
     *
     * 
     */
    enum ConditionalFormatDirection {
        top = "Top",
        bottom = "Bottom"
    }
    /**
     * 
     */
    enum ConditionalFormatType {
        custom = "Custom",
        dataBar = "DataBar",
        colorScale = "ColorScale",
        iconSet = "IconSet",
        topBottom = "TopBottom",
        presetCriteria = "PresetCriteria",
        containsText = "ContainsText",
        cellValue = "CellValue"
    }
    /**
     *
     * Represents the types of conditional format values.
     *
     * 
     */
    enum ConditionalFormatRuleType {
        invalid = "Invalid",
        automatic = "Automatic",
        lowestValue = "LowestValue",
        highestValue = "HighestValue",
        number = "Number",
        percent = "Percent",
        formula = "Formula",
        percentile = "Percentile"
    }
    /**
     *
     * Represents the types of conditional format values.
     *
     * 
     */
    enum ConditionalFormatIconRuleType {
        invalid = "Invalid",
        number = "Number",
        percent = "Percent",
        formula = "Formula",
        percentile = "Percentile"
    }
    /**
     *
     * Represents the types of conditional format values.
     *
     * 
     */
    enum ConditionalFormatColorCriterionType {
        invalid = "Invalid",
        lowestValue = "LowestValue",
        highestValue = "HighestValue",
        number = "Number",
        percent = "Percent",
        formula = "Formula",
        percentile = "Percentile"
    }
    /**
     *
     * Represents the criteria for the above/below average conditional format type.
     *
     * 
     */
    enum ConditionalTopBottomCriterionType {
        invalid = "Invalid",
        topItems = "TopItems",
        topPercent = "TopPercent",
        bottomItems = "BottomItems",
        bottomPercent = "BottomPercent"
    }
    /**
     *
     * Represents the criteria for the Preset Criteria conditional format type.
     *
     * 
     */
    enum ConditionalFormatPresetCriterion {
        invalid = "Invalid",
        blanks = "Blanks",
        nonBlanks = "NonBlanks",
        errors = "Errors",
        nonErrors = "NonErrors",
        yesterday = "Yesterday",
        today = "Today",
        tomorrow = "Tomorrow",
        lastSevenDays = "LastSevenDays",
        lastWeek = "LastWeek",
        thisWeek = "ThisWeek",
        nextWeek = "NextWeek",
        lastMonth = "LastMonth",
        thisMonth = "ThisMonth",
        nextMonth = "NextMonth",
        aboveAverage = "AboveAverage",
        belowAverage = "BelowAverage",
        equalOrAboveAverage = "EqualOrAboveAverage",
        equalOrBelowAverage = "EqualOrBelowAverage",
        oneStdDevAboveAverage = "OneStdDevAboveAverage",
        oneStdDevBelowAverage = "OneStdDevBelowAverage",
        twoStdDevAboveAverage = "TwoStdDevAboveAverage",
        twoStdDevBelowAverage = "TwoStdDevBelowAverage",
        threeStdDevAboveAverage = "ThreeStdDevAboveAverage",
        threeStdDevBelowAverage = "ThreeStdDevBelowAverage",
        uniqueValues = "UniqueValues",
        duplicateValues = "DuplicateValues"
    }
    /**
     *
     * Represents the operator of the text conditional format type.
     *
     * 
     */
    enum ConditionalTextOperator {
        invalid = "Invalid",
        contains = "Contains",
        notContains = "NotContains",
        beginsWith = "BeginsWith",
        endsWith = "EndsWith"
    }
    /**
     *
     * Represents the operator of the text conditional format type.
     *
     * 
     */
    enum ConditionalCellValueOperator {
        invalid = "Invalid",
        between = "Between",
        notBetween = "NotBetween",
        equalTo = "EqualTo",
        notEqualTo = "NotEqualTo",
        greaterThan = "GreaterThan",
        lessThan = "LessThan",
        greaterThanOrEqual = "GreaterThanOrEqual",
        lessThanOrEqual = "LessThanOrEqual"
    }
    /**
     *
     * Represents the operator for each icon criteria.
     *
     * 
     */
    enum ConditionalIconCriterionOperator {
        invalid = "Invalid",
        greaterThan = "GreaterThan",
        greaterThanOrEqual = "GreaterThanOrEqual"
    }
    /**
     * 
     */
    enum ConditionalRangeBorderIndex {
        edgeTop = "EdgeTop",
        edgeBottom = "EdgeBottom",
        edgeLeft = "EdgeLeft",
        edgeRight = "EdgeRight"
    }
    /**
     * 
     */
    enum ConditionalRangeBorderLineStyle {
        none = "None",
        continuous = "Continuous",
        dash = "Dash",
        dashDot = "DashDot",
        dashDotDot = "DashDotDot",
        dot = "Dot"
    }
    /**
     * 
     */
    enum ConditionalRangeFontUnderlineStyle {
        none = "None",
        single = "Single",
        double = "Double"
    }
    /**
     *
     * Represents Data validation type enum.
     *
     * 
     */
    enum DataValidationType {
        /**
         *
         * None means allow any value and so there is no data validation in the range.
         *
         */
        none = "None",
        /**
         *
         * Whole number data validation type
         *
         */
        wholeNumber = "WholeNumber",
        /**
         *
         * Decimal data validation type
         *
         */
        decimal = "Decimal",
        /**
         *
         * List data validation type
         *
         */
        list = "List",
        /**
         *
         * Date data validation type
         *
         */
        date = "Date",
        /**
         *
         * Time data validation type
         *
         */
        time = "Time",
        /**
         *
         * Text length data validation type
         *
         */
        textLength = "TextLength",
        /**
         *
         * Custom data validation type
         *
         */
        custom = "Custom",
        /**
         *
         * Inconsistent means that the range has inconsistent data validation (there are different rules on different cells)
         *
         */
        inconsistent = "Inconsistent",
        /**
         *
         * MixedCriteria means that the range has data validation present on some but not all cells
         *
         */
        mixedCriteria = "MixedCriteria"
    }
    /**
     *
     * Represents Data validation operator enum.
     *
     * 
     */
    enum DataValidationOperator {
        between = "Between",
        notBetween = "NotBetween",
        equalTo = "EqualTo",
        notEqualTo = "NotEqualTo",
        greaterThan = "GreaterThan",
        lessThan = "LessThan",
        greaterThanOrEqualTo = "GreaterThanOrEqualTo",
        lessThanOrEqualTo = "LessThanOrEqualTo"
    }
    /**
     *
     * Represents Data validation error alert style. The default is "Stop".
     *
     * 
     */
    enum DataValidationAlertStyle {
        stop = "Stop",
        warning = "Warning",
        information = "Information"
    }
    /**
     * 
     */
    enum DeleteShiftDirection {
        up = "Up",
        left = "Left"
    }
    /**
     * 
     */
    enum DynamicFilterCriteria {
        unknown = "Unknown",
        aboveAverage = "AboveAverage",
        allDatesInPeriodApril = "AllDatesInPeriodApril",
        allDatesInPeriodAugust = "AllDatesInPeriodAugust",
        allDatesInPeriodDecember = "AllDatesInPeriodDecember",
        allDatesInPeriodFebruray = "AllDatesInPeriodFebruray",
        allDatesInPeriodJanuary = "AllDatesInPeriodJanuary",
        allDatesInPeriodJuly = "AllDatesInPeriodJuly",
        allDatesInPeriodJune = "AllDatesInPeriodJune",
        allDatesInPeriodMarch = "AllDatesInPeriodMarch",
        allDatesInPeriodMay = "AllDatesInPeriodMay",
        allDatesInPeriodNovember = "AllDatesInPeriodNovember",
        allDatesInPeriodOctober = "AllDatesInPeriodOctober",
        allDatesInPeriodQuarter1 = "AllDatesInPeriodQuarter1",
        allDatesInPeriodQuarter2 = "AllDatesInPeriodQuarter2",
        allDatesInPeriodQuarter3 = "AllDatesInPeriodQuarter3",
        allDatesInPeriodQuarter4 = "AllDatesInPeriodQuarter4",
        allDatesInPeriodSeptember = "AllDatesInPeriodSeptember",
        belowAverage = "BelowAverage",
        lastMonth = "LastMonth",
        lastQuarter = "LastQuarter",
        lastWeek = "LastWeek",
        lastYear = "LastYear",
        nextMonth = "NextMonth",
        nextQuarter = "NextQuarter",
        nextWeek = "NextWeek",
        nextYear = "NextYear",
        thisMonth = "ThisMonth",
        thisQuarter = "ThisQuarter",
        thisWeek = "ThisWeek",
        thisYear = "ThisYear",
        today = "Today",
        tomorrow = "Tomorrow",
        yearToDate = "YearToDate",
        yesterday = "Yesterday"
    }
    /**
     * 
     */
    enum FilterDatetimeSpecificity {
        year = "Year",
        month = "Month",
        day = "Day",
        hour = "Hour",
        minute = "Minute",
        second = "Second"
    }
    /**
     * 
     */
    enum FilterOn {
        bottomItems = "BottomItems",
        bottomPercent = "BottomPercent",
        cellColor = "CellColor",
        dynamic = "Dynamic",
        fontColor = "FontColor",
        values = "Values",
        topItems = "TopItems",
        topPercent = "TopPercent",
        icon = "Icon",
        custom = "Custom"
    }
    /**
     * 
     */
    enum FilterOperator {
        and = "And",
        or = "Or"
    }
    /**
     * 
     */
    enum HorizontalAlignment {
        general = "General",
        left = "Left",
        center = "Center",
        right = "Right",
        fill = "Fill",
        justify = "Justify",
        centerAcrossSelection = "CenterAcrossSelection",
        distributed = "Distributed"
    }
    /**
     * 
     */
    enum IconSet {
        invalid = "Invalid",
        threeArrows = "ThreeArrows",
        threeArrowsGray = "ThreeArrowsGray",
        threeFlags = "ThreeFlags",
        threeTrafficLights1 = "ThreeTrafficLights1",
        threeTrafficLights2 = "ThreeTrafficLights2",
        threeSigns = "ThreeSigns",
        threeSymbols = "ThreeSymbols",
        threeSymbols2 = "ThreeSymbols2",
        fourArrows = "FourArrows",
        fourArrowsGray = "FourArrowsGray",
        fourRedToBlack = "FourRedToBlack",
        fourRating = "FourRating",
        fourTrafficLights = "FourTrafficLights",
        fiveArrows = "FiveArrows",
        fiveArrowsGray = "FiveArrowsGray",
        fiveRating = "FiveRating",
        fiveQuarters = "FiveQuarters",
        threeStars = "ThreeStars",
        threeTriangles = "ThreeTriangles",
        fiveBoxes = "FiveBoxes"
    }
    /**
     * 
     */
    enum ImageFittingMode {
        fit = "Fit",
        fitAndCenter = "FitAndCenter",
        fill = "Fill"
    }
    /**
     * 
     */
    enum InsertShiftDirection {
        down = "Down",
        right = "Right"
    }
    /**
     * 
     */
    enum NamedItemScope {
        worksheet = "Worksheet",
        workbook = "Workbook"
    }
    /**
     * 
     */
    enum NamedItemType {
        string = "String",
        integer = "Integer",
        double = "Double",
        boolean = "Boolean",
        range = "Range",
        error = "Error",
        array = "Array"
    }
    /**
     * 
     */
    enum RangeUnderlineStyle {
        none = "None",
        single = "Single",
        double = "Double",
        singleAccountant = "SingleAccountant",
        doubleAccountant = "DoubleAccountant"
    }
    /**
     * 
     */
    enum SheetVisibility {
        visible = "Visible",
        hidden = "Hidden",
        veryHidden = "VeryHidden"
    }
    /**
     * 
     */
    enum RangeValueType {
        unknown = "Unknown",
        empty = "Empty",
        string = "String",
        integer = "Integer",
        double = "Double",
        boolean = "Boolean",
        error = "Error",
        richValue = "RichValue"
    }
    /**
     *
     * Specifies the search direction.
     *
     * 
     */
    enum SearchDirection {
        /**
         *
         * Search in forward order.
         *
         */
        forward = "Forward",
        /**
         *
         * Search in reverse order.
         *
         */
        backwards = "Backwards"
    }
    /**
     * 
     */
    enum SortOrientation {
        rows = "Rows",
        columns = "Columns"
    }
    /**
     * 
     */
    enum SortOn {
        value = "Value",
        cellColor = "CellColor",
        fontColor = "FontColor",
        icon = "Icon"
    }
    /**
     * 
     */
    enum SortDataOption {
        normal = "Normal",
        textAsNumber = "TextAsNumber"
    }
    /**
     * 
     */
    enum SortMethod {
        pinYin = "PinYin",
        strokeCount = "StrokeCount"
    }
    /**
     * 
     */
    enum VerticalAlignment {
        top = "Top",
        center = "Center",
        bottom = "Bottom",
        justify = "Justify",
        distributed = "Distributed"
    }
    /**
     * 
     */
    enum DocumentPropertyType {
        number = "Number",
        boolean = "Boolean",
        date = "Date",
        string = "String",
        float = "Float"
    }
    /**
     * 
     */
    enum EventSource {
        /**
         *
         * Local means event comes from local user session.
         *
         */
        local = "Local",
        /**
         *
         * Remote means event comes from remote user session.
         *
         */
        remote = "Remote"
    }
    /**
     * 
     */
    enum DataChangeType {
        /**
         *
         * Unknown represents the type of data change is not the listed types.
         *
         */
        unknown = "Unknown",
        /**
         *
         * RangeEdited represents the data change event is triggered by range being edited.
         *
         */
        rangeEdited = "RangeEdited",
        /**
         *
         * RowInserted represents the data change event is triggered by inserting new rows.
         *
         */
        rowInserted = "RowInserted",
        /**
         *
         * RowDeleted represents the data change event is triggered by deleting rows.
         *
         */
        rowDeleted = "RowDeleted",
        /**
         *
         * ColumnInserted represents the data change event is triggered by inserting new columns.
         *
         */
        columnInserted = "ColumnInserted",
        /**
         *
         * ColumnDeleted represents the data change event is triggered by deleting columns.
         *
         */
        columnDeleted = "ColumnDeleted",
        /**
         *
         * CellInserted represents the data change event is triggered by inserting new cells.
         *
         */
        cellInserted = "CellInserted",
        /**
         *
         * CellDeleted represents the data change event is triggered by deleting cells.
         *
         */
        cellDeleted = "CellDeleted"
    }
    /**
     * 
     */
    enum EventType {
        /**
         *
         * WorksheetChanged represents the type of event registered on Worksheet or WorksheetCollection, and occurs when data changes.
         *
         */
        worksheetChanged = "WorksheetChanged",
        /**
         *
         * WorksheetSelectionChanged represents the type of event registered on Worksheet, and occurs when selection changes.
         *
         */
        worksheetSelectionChanged = "WorksheetSelectionChanged",
        /**
         *
         * WorksheetAdded represents the type of event registered on WorksheetCollection, and occurs when a new worksheet is added to the workbook.
         *
         */
        worksheetAdded = "WorksheetAdded",
        /**
         *
         * WorksheetActivated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when worksheet activates.
         *
         */
        worksheetActivated = "WorksheetActivated",
        /**
         *
         * WorksheetDeactivated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when worksheet deactivates.
         *
         */
        worksheetDeactivated = "WorksheetDeactivated",
        /**
         *
         * TableChanged represents the type of event registered on Table, and occurs when data changes.
         *
         */
        tableChanged = "TableChanged",
        /**
         *
         * TableSelectionChanged represents the type of event registered on Table, and occurs when selection changes.
         *
         */
        tableSelectionChanged = "TableSelectionChanged",
        /**
         *
         * WorksheetDeleted represents the type of event registered on WorksheetCollection, and occurs when a worksheet is deleted from the workbook.
         *
         */
        worksheetDeleted = "WorksheetDeleted",
        /**
         *
         * ChartAdded represents the type of event registered on ChartCollection, and occurs when a new chart is added to the worksheet.
         *
         */
        chartAdded = "ChartAdded",
        /**
         *
         * ChartActivated represents the type of event registered on Chart or ChartCollection, and occurs when chart activates.
         *
         */
        chartActivated = "ChartActivated",
        /**
         *
         * ChartDeactivated represents the type of event registered on Chart or ChartCollection, and occurs when chart deactivates.
         *
         */
        chartDeactivated = "ChartDeactivated",
        /**
         *
         * ChartDeleted represents the type of event registered on ChartCollection, and occurs when a chart is deleted from the worksheet.
         *
         */
        chartDeleted = "ChartDeleted",
        /**
         *
         * WorksheetCalculated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when a worksheet is calculated.
         *
         */
        worksheetCalculated = "WorksheetCalculated",
        /**
         *
         * VisualSelectionChanged represents the type of event registered on VisualCollection, and occurs when visual selection changes.
         *
         */
        visualSelectionChanged = "VisualSelectionChanged",
        /**
         *
         * AgaveVisualUpdate represents the type of an event that is associated with an agave visual, and carries a new data view following a data change
         *
         */
        agaveVisualUpdate = "AgaveVisualUpdate",
        /**
         *
         * TableAdded represents the type of event registered on TableCollection, and occurs when a table is added.
         *
         */
        tableAdded = "TableAdded",
        /**
         *
         * TableDeleted represents the type of event that is registered on TableCollection, and occurs when a table is deleted.
         *
         */
        tableDeleted = "TableDeleted",
        /**
         *
         * TableFiltered represents the type of event registered on table or TableCollection, and occurs when data of table is filtered.
         *
         */
        tableFiltered = "TableFiltered",
        /**
         *
         * WorksheetFiltered represents the type of event registered on worksheet or WorksheetCollection, and occurs when data of autofilter in the worksheet is filtered.
         *
         */
        worksheetFiltered = "WorksheetFiltered",
        /**
         *
         * ShapeActivated represents the type of event that is registered on Shape, and occurs when shape activates.
         *
         */
        shapeActivated = "ShapeActivated",
        /**
         *
         * ShapeDeactivated represents the type of event that is registered on Shape, and occurs when shape deactivates.
         *
         */
        shapeDeactivated = "ShapeDeactivated",
        /**
         *
         * VisualChange represents the type of event registered on Visual, and occurs when there is a visual change.
         *
         */
        visualChange = "VisualChange",
        /**
         *
         * WorkbookAutoSaveSettingChanged represents the type of event registered on workbook, and occurs when there is an auto save setting change.
         *
         */
        workbookAutoSaveSettingChanged = "WorkbookAutoSaveSettingChanged",
        /**
         *
         * WorksheetFormatChanged represents the type of event registered on worksheet, and occurs when there is a format changed.
         *
         */
        worksheetFormatChanged = "WorksheetFormatChanged",
        wacoperationEvent = "WACOperationEvent",
        /**
         *
         * RibbonCommandExecuted represents the type of event registered on ribbon, and occurs when user click on ribbon
         *
         */
        ribbonCommandExecuted = "RibbonCommandExecuted",
        /**
         *
         * WorksheetRowSorted represents the type of event registered on worksheet, and occurs when there is a sorting on rows happened.
         *
         */
        worksheetRowSorted = "WorksheetRowSorted",
        /**
         *
         * WorksheetColumnSorted represents the type of event registered on worksheet, and occurs when there is a sorting on columns happened.
         *
         */
        worksheetColumnSorted = "WorksheetColumnSorted",
        /**
         *
         * WorksheetSingleClicked represents the type of event registered on worksheet, and occurs when cell is left-clicked/tapped.
         *
         */
        worksheetSingleClicked = "WorksheetSingleClicked",
        /**
         *
         * WorksheetRowHiddenChanged represents the type of event registered on worksheet, and occurs when a row's hidden state is changed.
         *
         */
        worksheetRowHiddenChanged = "WorksheetRowHiddenChanged"
    }
    /**
     * 
     */
    enum DocumentPropertyItem {
        title = "Title",
        subject = "Subject",
        author = "Author",
        keywords = "Keywords",
        comments = "Comments",
        template = "Template",
        lastAuth = "LastAuth",
        revision = "Revision",
        appName = "AppName",
        lastPrint = "LastPrint",
        creation = "Creation",
        lastSave = "LastSave",
        category = "Category",
        format = "Format",
        manager = "Manager",
        company = "Company"
    }
    /**
     * 
     */
    enum SubtotalLocationType {
        /**
         *
         * Subtotals are at the top.
         *
         */
        atTop = "AtTop",
        /**
         *
         * Subtotals are at the bottom.
         *
         */
        atBottom = "AtBottom",
        /**
         *
         * Subtotals are off.
         *
         */
        off = "Off"
    }
    /**
     * 
     */
    enum PivotLayoutType {
        /**
         *
         * A horizontally compressed form with labels from the next field in the same column.
         *
         */
        compact = "Compact",
        /**
         *
         * Inner fields' items are always on a new line relative to the outer fields' items.
         *
         */
        tabular = "Tabular",
        /**
         *
         * Inner fields' items are on same row as outer fields' items and subtotals are always on the bottom.
         *
         */
        outline = "Outline"
    }
    /**
     * 
     */
    enum ProtectionSelectionMode {
        /**
         *
         * Selection is allowed for all cells.
         *
         */
        normal = "Normal",
        /**
         *
         * Selection is allowed only for cells that are not locked.
         *
         */
        unlocked = "Unlocked",
        /**
         *
         * Selection is not allowed for all cells.
         *
         */
        none = "None"
    }
    /**
     * 
     */
    enum PageOrientation {
        portrait = "Portrait",
        landscape = "Landscape"
    }
    /**
     * 
     */
    enum PaperType {
        letter = "Letter",
        letterSmall = "LetterSmall",
        tabloid = "Tabloid",
        ledger = "Ledger",
        legal = "Legal",
        statement = "Statement",
        executive = "Executive",
        a3 = "A3",
        a4 = "A4",
        a4Small = "A4Small",
        a5 = "A5",
        b4 = "B4",
        b5 = "B5",
        folio = "Folio",
        quatro = "Quatro",
        paper10x14 = "Paper10x14",
        paper11x17 = "Paper11x17",
        note = "Note",
        envelope9 = "Envelope9",
        envelope10 = "Envelope10",
        envelope11 = "Envelope11",
        envelope12 = "Envelope12",
        envelope14 = "Envelope14",
        csheet = "Csheet",
        dsheet = "Dsheet",
        esheet = "Esheet",
        envelopeDL = "EnvelopeDL",
        envelopeC5 = "EnvelopeC5",
        envelopeC3 = "EnvelopeC3",
        envelopeC4 = "EnvelopeC4",
        envelopeC6 = "EnvelopeC6",
        envelopeC65 = "EnvelopeC65",
        envelopeB4 = "EnvelopeB4",
        envelopeB5 = "EnvelopeB5",
        envelopeB6 = "EnvelopeB6",
        envelopeItaly = "EnvelopeItaly",
        envelopeMonarch = "EnvelopeMonarch",
        envelopePersonal = "EnvelopePersonal",
        fanfoldUS = "FanfoldUS",
        fanfoldStdGerman = "FanfoldStdGerman",
        fanfoldLegalGerman = "FanfoldLegalGerman"
    }
    /**
     * 
     */
    enum ReadingOrder {
        /**
         *
         * Reading order is determined by the language of the first character entered.
            If a right-to-left language character is entered first, reading order is right to left.
            If a left-to-right language character is entered first, reading order is left to right.
         *
         */
        context = "Context",
        /**
         *
         * Left to right reading order
         *
         */
        leftToRight = "LeftToRight",
        /**
         *
         * Right to left reading order
         *
         */
        rightToLeft = "RightToLeft"
    }
    /**
     * 
     */
    enum BuiltInStyle {
        normal = "Normal",
        comma = "Comma",
        currency = "Currency",
        percent = "Percent",
        wholeComma = "WholeComma",
        wholeDollar = "WholeDollar",
        hlink = "Hlink",
        hlinkTrav = "HlinkTrav",
        note = "Note",
        warningText = "WarningText",
        emphasis1 = "Emphasis1",
        emphasis2 = "Emphasis2",
        emphasis3 = "Emphasis3",
        sheetTitle = "SheetTitle",
        heading1 = "Heading1",
        heading2 = "Heading2",
        heading3 = "Heading3",
        heading4 = "Heading4",
        input = "Input",
        output = "Output",
        calculation = "Calculation",
        checkCell = "CheckCell",
        linkedCell = "LinkedCell",
        total = "Total",
        good = "Good",
        bad = "Bad",
        neutral = "Neutral",
        accent1 = "Accent1",
        accent1_20 = "Accent1_20",
        accent1_40 = "Accent1_40",
        accent1_60 = "Accent1_60",
        accent2 = "Accent2",
        accent2_20 = "Accent2_20",
        accent2_40 = "Accent2_40",
        accent2_60 = "Accent2_60",
        accent3 = "Accent3",
        accent3_20 = "Accent3_20",
        accent3_40 = "Accent3_40",
        accent3_60 = "Accent3_60",
        accent4 = "Accent4",
        accent4_20 = "Accent4_20",
        accent4_40 = "Accent4_40",
        accent4_60 = "Accent4_60",
        accent5 = "Accent5",
        accent5_20 = "Accent5_20",
        accent5_40 = "Accent5_40",
        accent5_60 = "Accent5_60",
        accent6 = "Accent6",
        accent6_20 = "Accent6_20",
        accent6_40 = "Accent6_40",
        accent6_60 = "Accent6_60",
        explanatoryText = "ExplanatoryText"
    }
    /**
     * 
     */
    enum PrintErrorType {
        asDisplayed = "AsDisplayed",
        blank = "Blank",
        dash = "Dash",
        notAvailable = "NotAvailable"
    }
    /**
     * 
     */
    enum WorksheetPositionType {
        none = "None",
        before = "Before",
        after = "After",
        beginning = "Beginning",
        end = "End"
    }
    /**
     * 
     */
    enum PrintComments {
        /**
         *
         * Comments will not be printed.
         *
         */
        noComments = "NoComments",
        /**
         *
         * Comments will be printed as end notes at the end of the worksheet.
         *
         */
        endSheet = "EndSheet",
        /**
         *
         * Comments will be printed where they were inserted in the worksheet.
         *
         */
        inPlace = "InPlace"
    }
    /**
     * 
     */
    enum PrintOrder {
        /**
         *
         * Process down the rows before processing across pages or page fields to the right.
         *
         */
        downThenOver = "DownThenOver",
        /**
         *
         * Process across pages or page fields to the right before moving down the rows.
         *
         */
        overThenDown = "OverThenDown"
    }
    /**
     * 
     */
    enum PrintMarginUnit {
        /**
         *
         * Assign the page margins in points. A point is 1/72 of an inch.
         *
         */
        points = "Points",
        /**
         *
         * Assign the page margins in inches.
         *
         */
        inches = "Inches",
        /**
         *
         * Assign the page margins in centimeters.
         *
         */
        centimeters = "Centimeters"
    }
    /**
     * 
     */
    enum HeaderFooterState {
        /**
         *
         * Only one general header/footer is used for all pages printed.
         *
         */
        default = "Default",
        /**
         *
         * There is a separate first page header/footer, and a general header/footer used for all other pages.
         *
         */
        firstAndDefault = "FirstAndDefault",
        /**
         *
         * There is a different header/footer for odd and even pages.
         *
         */
        oddAndEven = "OddAndEven",
        /**
         *
         * There is a separate first page header/footer, then there is a separate header/footer for odd and even pages.
         *
         */
        firstOddAndEven = "FirstOddAndEven"
    }
    /**
     * 
     */
    enum AutoFillType {
        fillDefault = "FillDefault",
        fillCopy = "FillCopy",
        fillSeries = "FillSeries",
        fillFormats = "FillFormats",
        fillValues = "FillValues",
        fillDays = "FillDays",
        fillWeekdays = "FillWeekdays",
        fillMonths = "FillMonths",
        fillYears = "FillYears",
        linearTrend = "LinearTrend",
        growthTrend = "GrowthTrend",
        flashFill = "FlashFill"
    }
    /**
     * 
     */
    enum GroupOption {
        /**
         *
         * Group by rows.
         *
         */
        byRows = "ByRows",
        /**
         *
         * Group by columns.
         *
         */
        byColumns = "ByColumns"
    }
    /**
     * 
     */
    enum RangeCopyType {
        all = "All",
        formulas = "Formulas",
        values = "Values",
        formats = "Formats"
    }
    /**
     * 
     */
    enum LinkedDataTypeState {
        none = "None",
        validLinkedData = "ValidLinkedData",
        disambiguationNeeded = "DisambiguationNeeded",
        brokenLinkedData = "BrokenLinkedData",
        fetchingData = "FetchingData"
    }
    /**
     *
     * Specifies the shape type for a GeometricShape object.
     *
     * 
     */
    enum GeometricShapeType {
        lineInverse = "LineInverse",
        triangle = "Triangle",
        rightTriangle = "RightTriangle",
        rectangle = "Rectangle",
        diamond = "Diamond",
        parallelogram = "Parallelogram",
        trapezoid = "Trapezoid",
        nonIsoscelesTrapezoid = "NonIsoscelesTrapezoid",
        pentagon = "Pentagon",
        hexagon = "Hexagon",
        heptagon = "Heptagon",
        octagon = "Octagon",
        decagon = "Decagon",
        dodecagon = "Dodecagon",
        star4 = "Star4",
        star5 = "Star5",
        star6 = "Star6",
        star7 = "Star7",
        star8 = "Star8",
        star10 = "Star10",
        star12 = "Star12",
        star16 = "Star16",
        star24 = "Star24",
        star32 = "Star32",
        roundRectangle = "RoundRectangle",
        round1Rectangle = "Round1Rectangle",
        round2SameRectangle = "Round2SameRectangle",
        round2DiagonalRectangle = "Round2DiagonalRectangle",
        snipRoundRectangle = "SnipRoundRectangle",
        snip1Rectangle = "Snip1Rectangle",
        snip2SameRectangle = "Snip2SameRectangle",
        snip2DiagonalRectangle = "Snip2DiagonalRectangle",
        plaque = "Plaque",
        ellipse = "Ellipse",
        teardrop = "Teardrop",
        homePlate = "HomePlate",
        chevron = "Chevron",
        pieWedge = "PieWedge",
        pie = "Pie",
        blockArc = "BlockArc",
        donut = "Donut",
        noSmoking = "NoSmoking",
        rightArrow = "RightArrow",
        leftArrow = "LeftArrow",
        upArrow = "UpArrow",
        downArrow = "DownArrow",
        stripedRightArrow = "StripedRightArrow",
        notchedRightArrow = "NotchedRightArrow",
        bentUpArrow = "BentUpArrow",
        leftRightArrow = "LeftRightArrow",
        upDownArrow = "UpDownArrow",
        leftUpArrow = "LeftUpArrow",
        leftRightUpArrow = "LeftRightUpArrow",
        quadArrow = "QuadArrow",
        leftArrowCallout = "LeftArrowCallout",
        rightArrowCallout = "RightArrowCallout",
        upArrowCallout = "UpArrowCallout",
        downArrowCallout = "DownArrowCallout",
        leftRightArrowCallout = "LeftRightArrowCallout",
        upDownArrowCallout = "UpDownArrowCallout",
        quadArrowCallout = "QuadArrowCallout",
        bentArrow = "BentArrow",
        uturnArrow = "UturnArrow",
        circularArrow = "CircularArrow",
        leftCircularArrow = "LeftCircularArrow",
        leftRightCircularArrow = "LeftRightCircularArrow",
        curvedRightArrow = "CurvedRightArrow",
        curvedLeftArrow = "CurvedLeftArrow",
        curvedUpArrow = "CurvedUpArrow",
        curvedDownArrow = "CurvedDownArrow",
        swooshArrow = "SwooshArrow",
        cube = "Cube",
        can = "Can",
        lightningBolt = "LightningBolt",
        heart = "Heart",
        sun = "Sun",
        moon = "Moon",
        smileyFace = "SmileyFace",
        irregularSeal1 = "IrregularSeal1",
        irregularSeal2 = "IrregularSeal2",
        foldedCorner = "FoldedCorner",
        bevel = "Bevel",
        frame = "Frame",
        halfFrame = "HalfFrame",
        corner = "Corner",
        diagonalStripe = "DiagonalStripe",
        chord = "Chord",
        arc = "Arc",
        leftBracket = "LeftBracket",
        rightBracket = "RightBracket",
        leftBrace = "LeftBrace",
        rightBrace = "RightBrace",
        bracketPair = "BracketPair",
        bracePair = "BracePair",
        callout1 = "Callout1",
        callout2 = "Callout2",
        callout3 = "Callout3",
        accentCallout1 = "AccentCallout1",
        accentCallout2 = "AccentCallout2",
        accentCallout3 = "AccentCallout3",
        borderCallout1 = "BorderCallout1",
        borderCallout2 = "BorderCallout2",
        borderCallout3 = "BorderCallout3",
        accentBorderCallout1 = "AccentBorderCallout1",
        accentBorderCallout2 = "AccentBorderCallout2",
        accentBorderCallout3 = "AccentBorderCallout3",
        wedgeRectCallout = "WedgeRectCallout",
        wedgeRRectCallout = "WedgeRRectCallout",
        wedgeEllipseCallout = "WedgeEllipseCallout",
        cloudCallout = "CloudCallout",
        cloud = "Cloud",
        ribbon = "Ribbon",
        ribbon2 = "Ribbon2",
        ellipseRibbon = "EllipseRibbon",
        ellipseRibbon2 = "EllipseRibbon2",
        leftRightRibbon = "LeftRightRibbon",
        verticalScroll = "VerticalScroll",
        horizontalScroll = "HorizontalScroll",
        wave = "Wave",
        doubleWave = "DoubleWave",
        plus = "Plus",
        flowChartProcess = "FlowChartProcess",
        flowChartDecision = "FlowChartDecision",
        flowChartInputOutput = "FlowChartInputOutput",
        flowChartPredefinedProcess = "FlowChartPredefinedProcess",
        flowChartInternalStorage = "FlowChartInternalStorage",
        flowChartDocument = "FlowChartDocument",
        flowChartMultidocument = "FlowChartMultidocument",
        flowChartTerminator = "FlowChartTerminator",
        flowChartPreparation = "FlowChartPreparation",
        flowChartManualInput = "FlowChartManualInput",
        flowChartManualOperation = "FlowChartManualOperation",
        flowChartConnector = "FlowChartConnector",
        flowChartPunchedCard = "FlowChartPunchedCard",
        flowChartPunchedTape = "FlowChartPunchedTape",
        flowChartSummingJunction = "FlowChartSummingJunction",
        flowChartOr = "FlowChartOr",
        flowChartCollate = "FlowChartCollate",
        flowChartSort = "FlowChartSort",
        flowChartExtract = "FlowChartExtract",
        flowChartMerge = "FlowChartMerge",
        flowChartOfflineStorage = "FlowChartOfflineStorage",
        flowChartOnlineStorage = "FlowChartOnlineStorage",
        flowChartMagneticTape = "FlowChartMagneticTape",
        flowChartMagneticDisk = "FlowChartMagneticDisk",
        flowChartMagneticDrum = "FlowChartMagneticDrum",
        flowChartDisplay = "FlowChartDisplay",
        flowChartDelay = "FlowChartDelay",
        flowChartAlternateProcess = "FlowChartAlternateProcess",
        flowChartOffpageConnector = "FlowChartOffpageConnector",
        actionButtonBlank = "ActionButtonBlank",
        actionButtonHome = "ActionButtonHome",
        actionButtonHelp = "ActionButtonHelp",
        actionButtonInformation = "ActionButtonInformation",
        actionButtonForwardNext = "ActionButtonForwardNext",
        actionButtonBackPrevious = "ActionButtonBackPrevious",
        actionButtonEnd = "ActionButtonEnd",
        actionButtonBeginning = "ActionButtonBeginning",
        actionButtonReturn = "ActionButtonReturn",
        actionButtonDocument = "ActionButtonDocument",
        actionButtonSound = "ActionButtonSound",
        actionButtonMovie = "ActionButtonMovie",
        gear6 = "Gear6",
        gear9 = "Gear9",
        funnel = "Funnel",
        mathPlus = "MathPlus",
        mathMinus = "MathMinus",
        mathMultiply = "MathMultiply",
        mathDivide = "MathDivide",
        mathEqual = "MathEqual",
        mathNotEqual = "MathNotEqual",
        cornerTabs = "CornerTabs",
        squareTabs = "SquareTabs",
        plaqueTabs = "PlaqueTabs",
        chartX = "ChartX",
        chartStar = "ChartStar",
        chartPlus = "ChartPlus"
    }
    /**
     * 
     */
    enum ConnectorType {
        straight = "Straight",
        elbow = "Elbow",
        curve = "Curve"
    }
    /**
     * 
     */
    enum ContentType {
        /**
         *
         * Indicates plain format type of the comment content.
         *
         */
        plain = "Plain",
        /**
         *
         * Comment content containing mentions.
         *
         */
        mention = "Mention"
    }
    /**
     * 
     */
    enum SpecialCellType {
        /**
         *
         * All cells with conditional formats
         *
         */
        conditionalFormats = "ConditionalFormats",
        /**
         *
         * Cells having validation criteria.
         *
         */
        dataValidations = "DataValidations",
        /**
         *
         * Cells with no content.
         *
         */
        blanks = "Blanks",
        /**
         *
         * Cells containing constants.
         *
         */
        constants = "Constants",
        /**
         *
         * Cells containing formulas.
         *
         */
        formulas = "Formulas",
        /**
         *
         * Cells having the same conditional format as the first cell in the range.
         *
         */
        sameConditionalFormat = "SameConditionalFormat",
        /**
         *
         * Cells having the same data validation criteria as the first cell in the range.
         *
         */
        sameDataValidation = "SameDataValidation",
        /**
         *
         * Cells that are visible.
         *
         */
        visible = "Visible"
    }
    /**
     * 
     */
    enum SpecialCellValueType {
        /**
         *
         * Cells that have errors, true/false, numeric, or a string value.
         *
         */
        all = "All",
        /**
         *
         * Cells that have errors.
         *
         */
        errors = "Errors",
        /**
         *
         * Cells that have errors, or a true/false value.
         *
         */
        errorsLogical = "ErrorsLogical",
        /**
         *
         * Cells that have errors, or a numeric value.
         *
         */
        errorsNumbers = "ErrorsNumbers",
        /**
         *
         * Cells that have errors, or a string value.
         *
         */
        errorsText = "ErrorsText",
        /**
         *
         * Cells that have errors, true/false, or a numeric value.
         *
         */
        errorsLogicalNumber = "ErrorsLogicalNumber",
        /**
         *
         * Cells that have errors, true/false, or a string value.
         *
         */
        errorsLogicalText = "ErrorsLogicalText",
        /**
         *
         * Cells that have errors, numeric, or a string value.
         *
         */
        errorsNumberText = "ErrorsNumberText",
        /**
         *
         * Cells that have a true/false value.
         *
         */
        logical = "Logical",
        /**
         *
         * Cells that have a true/false, or a numeric value.
         *
         */
        logicalNumbers = "LogicalNumbers",
        /**
         *
         * Cells that have a true/false, or a string value.
         *
         */
        logicalText = "LogicalText",
        /**
         *
         * Cells that have a true/false, numeric, or a string value.
         *
         */
        logicalNumbersText = "LogicalNumbersText",
        /**
         *
         * Cells that have a numeric value.
         *
         */
        numbers = "Numbers",
        /**
         *
         * Cells that have a numeric, or a string value.
         *
         */
        numbersText = "NumbersText",
        /**
         *
         * Cells that have a string value.
         *
         */
        text = "Text"
    }
    /**
     *
     * Specifies the way that an object is attached to its underlying cells.
     *
     * 
     */
    enum Placement {
        /**
         *
         * The object is moved with the cells.
         *
         */
        twoCell = "TwoCell",
        /**
         *
         * The object is moved and sized with the cells.
         *
         */
        oneCell = "OneCell",
        /**
         *
         * The object is free floating.
         *
         */
        absolute = "Absolute"
    }
    /**
     * 
     */
    enum FillPattern {
        none = "None",
        solid = "Solid",
        gray50 = "Gray50",
        gray75 = "Gray75",
        gray25 = "Gray25",
        horizontal = "Horizontal",
        vertical = "Vertical",
        down = "Down",
        up = "Up",
        checker = "Checker",
        semiGray75 = "SemiGray75",
        lightHorizontal = "LightHorizontal",
        lightVertical = "LightVertical",
        lightDown = "LightDown",
        lightUp = "LightUp",
        grid = "Grid",
        crissCross = "CrissCross",
        gray16 = "Gray16",
        gray8 = "Gray8",
        linearGradient = "LinearGradient",
        rectangularGradient = "RectangularGradient"
    }
    /**
     *
     * Specifies the horizontal alignment for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextHorizontalAlignment {
        left = "Left",
        center = "Center",
        right = "Right",
        justify = "Justify",
        justifyLow = "JustifyLow",
        distributed = "Distributed",
        thaiDistributed = "ThaiDistributed"
    }
    /**
     *
     * Specifies the vertical alignment for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextVerticalAlignment {
        top = "Top",
        middle = "Middle",
        bottom = "Bottom",
        justified = "Justified",
        distributed = "Distributed"
    }
    /**
     *
     * Specifies the vertical overflow for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextVerticalOverflow {
        /**
         *
         * Allow text to overflow the text frame vertically (can be from the top, bottom, or both depending on the text alignment).
         *
         */
        overflow = "Overflow",
        /**
         *
         * Hide text that does not fit vertically within the text frame, and add an ellipsis (...) at the end of the visible text.
         *
         */
        ellipsis = "Ellipsis",
        /**
         *
         * Hide text that does not fit vertically within the text frame.
         *
         */
        clip = "Clip"
    }
    /**
     *
     * Specifies the horizontal overflow for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextHorizontalOverflow {
        overflow = "Overflow",
        clip = "Clip"
    }
    /**
     *
     * Specifies the reading order for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextReadingOrder {
        leftToRight = "LeftToRight",
        rightToLeft = "RightToLeft"
    }
    /**
     *
     * Specifies the orientation for the text frame in a shape.
     *
     * 
     */
    enum ShapeTextOrientation {
        horizontal = "Horizontal",
        vertical = "Vertical",
        vertical270 = "Vertical270",
        wordArtVertical = "WordArtVertical",
        eastAsianVertical = "EastAsianVertical",
        mongolianVertical = "MongolianVertical",
        wordArtVerticalRTL = "WordArtVerticalRTL"
    }
    /**
     *
     * Determines the type of automatic sizing allowed.
     *
     * 
     */
    enum ShapeAutoSize {
        /**
         *
         * No autosizing.
         *
         */
        autoSizeNone = "AutoSizeNone",
        /**
         *
         * The text is adjusted to fit the shape.
         *
         */
        autoSizeTextToFitShape = "AutoSizeTextToFitShape",
        /**
         *
         * The shape is adjusted to fit the text.
         *
         */
        autoSizeShapeToFitText = "AutoSizeShapeToFitText",
        /**
         *
         * A combination of automatic sizing schemes are used.
         *
         */
        autoSizeMixed = "AutoSizeMixed"
    }
    /**
     *
     * Specifies the close behavior for Workbook.close API.
     *
     * 
     */
    enum CloseBehavior {
        /**
         *
         * Save the possible changes before closing the workbook.
         *
         */
        save = "Save",
        /**
         *
         * Discard the possible changes when closing the workbook.
         *
         */
        skipSave = "SkipSave"
    }
    /**
     *
     * Specifies the save behavior for Workbook.save API.
     *
     * 
     */
    enum SaveBehavior {
        /**
         *
         * Save the workbook without prompting the user. If file is not saved,
            it will save it with default name under default location.
         *
         */
        save = "Save",
        /**
         *
         * Prompts the saveas experience to the user if the workbook has not been saved,
            Ignored if the workbook was previously saved.
         *
         */
        prompt = "Prompt"
    }
    /**
     *
     * Specifies the slicer sort behavior for Slicer.sortBy API.
     *
     * 
     */
    enum SlicerSortType {
        /**
         *
         * Sort slicer items in the order provided by the data source.
         *
         */
        dataSourceOrder = "DataSourceOrder",
        /**
         *
         * Sort slicer items in ascending order by item captions.
         *
         */
        ascending = "Ascending",
        /**
         *
         * Sort slicer items in descending order by item captions.
         *
         */
        descending = "Descending"
    }
    /**
     * 
     */
    enum RibbonTab {
        others = "Others",
        home = "Home",
        insert = "Insert",
        draw = "Draw",
        pageLayout = "PageLayout",
        formulas = "Formulas",
        data = "Data",
        review = "Review",
        view = "View",
        developer = "Developer",
        addIns = "AddIns",
        help = "Help"
    }
    /**
     *
     * An object containing the result of a function-evaluation operation
     *
     * 
     */
    export class FunctionResult<T>{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Error value (such as "#DIV/0") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.
         *
         * 
         */
        readonly error: string;
        /**
         *
         * The value of function evaluation. The value field will be populated only if no error has occurred (i.e., the Error property is not set).
         *
         * 
         */
        readonly value: T;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param options - Provides options for which properties of the object to load.
         */
        
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.
         */
        load(propertyNames?: string | string[]): FunctionResult<T>;
        /**
         * Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.
         *
         * @param propertyNamesAndPaths - `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
         */
        load(propertyNamesAndPaths?: {
            select?: string;
            expand?: string;
        }): FunctionResult<T>;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original FunctionResult<T> object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Interfaces.FunctionResultData<T>`) that contains shallow copies of any loaded child properties from the original object.
        */
        
    }
    /**
     *
     * An object for evaluating Excel functions.
     *
     * 
     */
    export class Functions{
        /** The request context associated with the object. This connects the add-in's process to the Office host application's process. */
        context: RequestContext;
        /**
         *
         * Returns the absolute value of a number, a number without its sign.
         *
         * 
         *
         * @param number - Is the real number for which you want the absolute value.
         */
        abs(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the accrued interest for a security that pays periodic interest.
         *
         * 
         *
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param firstInterest - Is the security's first interest date, expressed as a serial date number.
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param rate - Is the security's annual coupon rate.
         * @param par - Is the security's par value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         * @param calcMethod - Is a logical value: to accrued interest from issue date = TRUE or omitted; to calculate from last coupon payment date = FALSE.
         */
        accrInt(issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, firstInterest: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, par: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, calcMethod?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the accrued interest for a security that pays interest at maturity.
         *
         * 
         *
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param settlement - Is the security's maturity date, expressed as a serial date number.
         * @param rate - Is the security's annual coupon rate.
         * @param par - Is the security's par value.
         * @param basis - Is the type of day count basis to use.
         */
        accrIntM(issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, par: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the arccosine of a number, in radians in the range 0 to Pi. The arccosine is the angle whose cosine is Number.
         *
         * 
         *
         * @param number - Is the cosine of the angle you want and must be from -1 to 1.
         */
        acos(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse hyperbolic cosine of a number.
         *
         * 
         *
         * @param number - Is any real number equal to or greater than 1.
         */
        acosh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the arccotangent of a number, in radians in the range 0 to Pi.
         *
         * 
         *
         * @param number - Is the cotangent of the angle you want.
         */
        acot(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse hyperbolic cotangent of a number.
         *
         * 
         *
         * @param number - Is the hyperbolic cotangent of the angle that you want.
         */
        acoth(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the prorated linear depreciation of an asset for each accounting period.
         *
         * 
         *
         * @param cost - Is the cost of the asset.
         * @param datePurchased - Is the date the asset is purchased.
         * @param firstPeriod - Is the date of the end of the first period.
         * @param salvage - Is the salvage value at the end of life of the asset.
         * @param period - Is the period.
         * @param rate - Is the rate of depreciation.
         * @param basis - Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.
         */
        amorDegrc(cost: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, datePurchased: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, firstPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, period: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the prorated linear depreciation of an asset for each accounting period.
         *
         * 
         *
         * @param cost - Is the cost of the asset.
         * @param datePurchased - Is the date the asset is purchased.
         * @param firstPeriod - Is the date of the end of the first period.
         * @param salvage - Is the salvage value at the end of life of the asset.
         * @param period - Is the period.
         * @param rate - Is the rate of depreciation.
         * @param basis - Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.
         */
        amorLinc(cost: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, datePurchased: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, firstPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, period: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.
         */
        and(...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<boolean>;
        /**
         *
         * Converts a Roman numeral to Arabic.
         *
         * 
         *
         * @param text - Is the Roman numeral you want to convert.
         */
        arabic(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of areas in a reference. An area is a range of contiguous cells or a single cell.
         *
         * 
         *
         * @param reference - Is a reference to a cell or range of cells and can refer to multiple areas.
         */
        areas(reference: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Changes full-width (double-byte) characters to half-width (single-byte) characters. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is a text, or a reference to a cell containing a text.
         */
        asc(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the arcsine of a number in radians, in the range -Pi/2 to Pi/2.
         *
         * 
         *
         * @param number - Is the sine of the angle you want and must be from -1 to 1.
         */
        asin(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse hyperbolic sine of a number.
         *
         * 
         *
         * @param number - Is any real number equal to or greater than 1.
         */
        asinh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the arctangent of a number in radians, in the range -Pi/2 to Pi/2.
         *
         * 
         *
         * @param number - Is the tangent of the angle you want.
         */
        atan(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the arctangent of the specified x- and y- coordinates, in radians between -Pi and Pi, excluding -Pi.
         *
         * 
         *
         * @param xNum - Is the x-coordinate of the point.
         * @param yNum - Is the y-coordinate of the point.
         */
        atan2(xNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse hyperbolic tangent of a number.
         *
         * 
         *
         * @param number - Is any real number between -1 and 1 excluding -1 and 1.
         */
        atanh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the average of the absolute deviations of data points from their mean. Arguments can be numbers or names, arrays, or references that contain numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 arguments for which you want the average of the absolute deviations.
         */
        aveDev(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the average (arithmetic mean) of its arguments, which can be numbers or names, arrays, or references that contain numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments for which you want the average.
         */
        average(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the average (arithmetic mean) of its arguments, evaluating text and FALSE in arguments as 0; TRUE evaluates as 1. Arguments can be numbers, names, arrays, or references.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 arguments for which you want the average.
         */
        averageA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Finds average(arithmetic mean) for the cells specified by a given condition or criteria.
         *
         * 
         *
         * @param range - Is the range of cells you want evaluated.
         * @param criteria - Is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.
         * @param averageRange - Are the actual cells to be used to find the average. If omitted, the cells in range are used.
         */
        averageIf(range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, averageRange?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Finds average(arithmetic mean) for the cells specified by a given set of conditions or criteria.
         *
         * 
         *
         * @param averageRange - Are the actual cells to be used to find the average.
         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.
         */
        averageIfs(averageRange: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ...values: Array<Excel.Range | Excel.RangeReference | Excel.FunctionResult<any> | number | string | boolean>): FunctionResult<number>;
        /**
         *
         * Converts a number to text (baht).
         *
         * 
         *
         * @param number - Is a number that you want to convert.
         */
        bahtText(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Converts a number into a text representation with the given radix (base).
         *
         * 
         *
         * @param number - Is the number that you want to convert.
         * @param radix - Is the base Radix that you want to convert the number into.
         * @param minLength - Is the minimum length of the returned string.  If omitted leading zeros are not added.
         */
        base(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, radix: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, minLength?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the modified Bessel function In(x).
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function.
         * @param n - Is the order of the Bessel function.
         */
        besselI(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, n: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Bessel function Jn(x).
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function.
         * @param n - Is the order of the Bessel function.
         */
        besselJ(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, n: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the modified Bessel function Kn(x).
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function.
         * @param n - Is the order of the function.
         */
        besselK(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, n: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Bessel function Yn(x).
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function.
         * @param n - Is the order of the function.
         */
        besselY(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, n: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the beta probability distribution function.
         *
         * 
         *
         * @param x - Is the value between A and B at which to evaluate the function.
         * @param alpha - Is a parameter to the distribution and must be greater than 0.
         * @param beta - Is a parameter to the distribution and must be greater than 0.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         * @param A - Is an optional lower bound to the interval of x. If omitted, A = 0.
         * @param B - Is an optional upper bound to the interval of x. If omitted, B = 1.
         */
        beta_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, A?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, B?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the cumulative beta probability density function (BETA.DIST).
         *
         * 
         *
         * @param probability - Is a probability associated with the beta distribution.
         * @param alpha - Is a parameter to the distribution and must be greater than 0.
         * @param beta - Is a parameter to the distribution and must be greater than 0.
         * @param A - Is an optional lower bound to the interval of x. If omitted, A = 0.
         * @param B - Is an optional upper bound to the interval of x. If omitted, B = 1.
         */
        beta_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, A?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, B?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a binary number to decimal.
         *
         * 
         *
         * @param number - Is the binary number you want to convert.
         */
        bin2Dec(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a binary number to hexadecimal.
         *
         * 
         *
         * @param number - Is the binary number you want to convert.
         * @param places - Is the number of characters to use.
         */
        bin2Hex(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a binary number to octal.
         *
         * 
         *
         * @param number - Is the binary number you want to convert.
         * @param places - Is the number of characters to use.
         */
        bin2Oct(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the individual term binomial distribution probability.
         *
         * 
         *
         * @param numberS - Is the number of successes in trials.
         * @param trials - Is the number of independent trials.
         * @param probabilityS - Is the probability of success on each trial.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.
         */
        binom_Dist(numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the probability of a trial result using a binomial distribution.
         *
         * 
         *
         * @param trials - Is the number of independent trials.
         * @param probabilityS - Is the probability of success on each trial.
         * @param numberS - Is the number of successes in trials.
         * @param numberS2 - If provided this function returns the probability that the number of successful trials shall lie between numberS and numberS2.
         */
        binom_Dist_Range(trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberS2?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
         *
         * 
         *
         * @param trials - Is the number of Bernoulli trials.
         * @param probabilityS - Is the probability of success on each trial, a number between 0 and 1 inclusive.
         * @param alpha - Is the criterion value, a number between 0 and 1 inclusive.
         */
        binom_Inv(trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a bitwise 'And' of two numbers.
         *
         * 
         *
         * @param number1 - Is the decimal representation of the binary number you want to evaluate.
         * @param number2 - Is the decimal representation of the binary number you want to evaluate.
         */
        bitand(number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a number shifted left by shift_amount bits.
         *
         * 
         *
         * @param number - Is the decimal representation of the binary number you want to evaluate.
         * @param shiftAmount - Is the number of bits that you want to shift Number left by.
         */
        bitlshift(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, shiftAmount: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a bitwise 'Or' of two numbers.
         *
         * 
         *
         * @param number1 - Is the decimal representation of the binary number you want to evaluate.
         * @param number2 - Is the decimal representation of the binary number you want to evaluate.
         */
        bitor(number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a number shifted right by shift_amount bits.
         *
         * 
         *
         * @param number - Is the decimal representation of the binary number you want to evaluate.
         * @param shiftAmount - Is the number of bits that you want to shift Number right by.
         */
        bitrshift(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, shiftAmount: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a bitwise 'Exclusive Or' of two numbers.
         *
         * 
         *
         * @param number1 - Is the decimal representation of the binary number you want to evaluate.
         * @param number2 - Is the decimal representation of the binary number you want to evaluate.
         */
        bitxor(number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the value you want to round.
         * @param significance - Is the multiple to which you want to round.
         * @param mode - When given and nonzero this function will round away from zero.
         */
        ceiling_Math(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mode?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the value you want to round.
         * @param significance - Is the multiple to which you want to round.
         */
        ceiling_Precise(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the character specified by the code number from the character set for your computer.
         *
         * 
         *
         * @param number - Is a number between 1 and 255 specifying which character you want.
         */
        char(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the left-tailed probability of the chi-squared distribution.
         *
         * 
         *
         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.
         */
        chiSq_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the right-tailed probability of the chi-squared distribution.
         *
         * 
         *
         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        chiSq_Dist_RT(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the left-tailed probability of the chi-squared distribution.
         *
         * 
         *
         * @param probability - Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.
         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        chiSq_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the right-tailed probability of the chi-squared distribution.
         *
         * 
         *
         * @param probability - Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.
         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        chiSq_Inv_RT(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Chooses a value or action to perform from a list of values, based on an index number.
         *
         * 
         *
         * @param indexNum - Specifies which value argument is selected. indexNum must be between 1 and 254, or a formula or a reference to a number between 1 and 254.
         * @param values - List of parameters, whose elements are 1 to 254 numbers, cell references, defined names, formulas, functions, or text arguments from which CHOOSE selects.
         */
        choose(indexNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ...values: Array<Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number | string | boolean>;
        /**
         *
         * Removes all nonprintable characters from text.
         *
         * 
         *
         * @param text - Is any worksheet information from which you want to remove nonprintable characters.
         */
        clean(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns a numeric code for the first character in a text string, in the character set used by your computer.
         *
         * 
         *
         * @param text - Is the text for which you want the code of the first character.
         */
        code(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of columns in an array or reference.
         *
         * 
         *
         * @param array - Is an array or array formula, or a reference to a range of cells for which you want the number of columns.
         */
        columns(array: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of combinations for a given number of items.
         *
         * 
         *
         * @param number - Is the total number of items.
         * @param numberChosen - Is the number of items in each combination.
         */
        combin(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of combinations with repetitions for a given number of items.
         *
         * 
         *
         * @param number - Is the total number of items.
         * @param numberChosen - Is the number of items in each combination.
         */
        combina(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts real and imaginary coefficients into a complex number.
         *
         * 
         *
         * @param realNum - Is the real coefficient of the complex number.
         * @param iNum - Is the imaginary coefficient of the complex number.
         * @param suffix - Is the suffix for the imaginary component of the complex number.
         */
        complex(realNum: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, iNum: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, suffix?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Joins several text strings into one text string.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 text strings to be joined into a single text string and can be text strings, numbers, or single-cell references.
         */
        concatenate(...values: Array<string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<string>;
        /**
         *
         * Returns the confidence interval for a population mean, using a normal distribution.
         *
         * 
         *
         * @param alpha - Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.
         * @param standardDev - Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.
         * @param size - Is the sample size.
         */
        confidence_Norm(alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, size: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the confidence interval for a population mean, using a Student's T distribution.
         *
         * 
         *
         * @param alpha - Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.
         * @param standardDev - Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.
         * @param size - Is the sample size.
         */
        confidence_T(alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, size: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a number from one measurement system to another.
         *
         * 
         *
         * @param number - Is the value in from_units to convert.
         * @param fromUnit - Is the units for number.
         * @param toUnit - Is the units for the result.
         */
        convert(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fromUnit: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, toUnit: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cosine of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the cosine.
         */
        cos(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic cosine of a number.
         *
         * 
         *
         * @param number - Is any real number.
         */
        cosh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cotangent of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the cotangent.
         */
        cot(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic cotangent of a number.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the hyperbolic cotangent.
         */
        coth(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Counts the number of cells in a range that contain numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 arguments that can contain or refer to a variety of different types of data, but only numbers are counted.
         */
        count(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Counts the number of cells in a range that are not empty.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 arguments representing the values and cells you want to count. Values can be any type of information.
         */
        countA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Counts the number of empty cells in a specified range of cells.
         *
         * 
         *
         * @param range - Is the range from which you want to count the empty cells.
         */
        countBlank(range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Counts the number of cells within a range that meet the given condition.
         *
         * 
         *
         * @param range - Is the range of cells from which you want to count nonblank cells.
         * @param criteria - Is the condition in the form of a number, expression, or text that defines which cells will be counted.
         */
        countIf(range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Counts the number of cells specified by a given set of conditions or criteria.
         *
         * 
         *
         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition in the form of a number, expression, or text that defines which cells will be counted.
         */
        countIfs(...values: Array<Excel.Range | Excel.RangeReference | Excel.FunctionResult<any> | number | string | boolean>): FunctionResult<number>;
        /**
         *
         * Returns the number of days from the beginning of the coupon period to the settlement date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupDayBs(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of days in the coupon period that contains the settlement date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupDays(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of days from the settlement date to the next coupon date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupDaysNc(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the next coupon date after the settlement date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupNcd(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of coupons payable between the settlement date and maturity date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupNum(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the previous coupon date before the settlement date.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        coupPcd(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cosecant of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the cosecant.
         */
        csc(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic cosecant of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the hyperbolic cosecant.
         */
        csch(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cumulative interest paid between two periods.
         *
         * 
         *
         * @param rate - Is the interest rate.
         * @param nper - Is the total number of payment periods.
         * @param pv - Is the present value.
         * @param startPeriod - Is the first period in the calculation.
         * @param endPeriod - Is the last period in the calculation.
         * @param type - Is the timing of the payment.
         */
        cumIPmt(rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cumulative principal paid on a loan between two periods.
         *
         * 
         *
         * @param rate - Is the interest rate.
         * @param nper - Is the total number of payment periods.
         * @param pv - Is the present value.
         * @param startPeriod - Is the first period in the calculation.
         * @param endPeriod - Is the last period in the calculation.
         * @param type - Is the timing of the payment.
         */
        cumPrinc(rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endPeriod: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Averages the values in a column in a list or database that match conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        daverage(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dcount(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dcountA(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Extracts from a database a single record that matches the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dget(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | boolean | string>;
        /**
         *
         * Returns the largest number in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dmax(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the smallest number in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dmin(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Multiplies the values in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dproduct(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Estimates the standard deviation based on a sample from selected database entries.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dstDev(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Calculates the standard deviation based on the entire population of selected database entries.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dstDevP(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Adds the numbers in the field (column) of records in the database that match the conditions you specify.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dsum(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Estimates variance based on a sample from selected database entries.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dvar(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Calculates variance based on the entire population of selected database entries.
         *
         * 
         *
         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.
         */
        dvarP(database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, field: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number that represents the date in Microsoft Excel date-time code.
         *
         * 
         *
         * @param year - Is a number from 1900 or 1904 (depending on the workbook's date system) to 9999.
         * @param month - Is a number from 1 to 12 representing the month of the year.
         * @param day - Is a number from 1 to 31 representing the day of the month.
         */
        date(year: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, month: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, day: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a date in the form of text to a number that represents the date in Microsoft Excel date-time code.
         *
         * 
         *
         * @param dateText - Is text that represents a date in a Microsoft Excel date format, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.
         */
        datevalue(dateText: string | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the day of the month, a number from 1 to 31.
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.
         */
        day(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of days between the two dates.
         *
         * 
         *
         * @param endDate - startDate and endDate are the two dates between which you want to know the number of days.
         * @param startDate - startDate and endDate are the two dates between which you want to know the number of days.
         */
        days(endDate: string | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startDate: string | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of days between two dates based on a 360-day year (twelve 30-day months).
         *
         * 
         *
         * @param startDate - startDate and endDate are the two dates between which you want to know the number of days.
         * @param endDate - startDate and endDate are the two dates between which you want to know the number of days.
         * @param method - Is a logical value specifying the calculation method: U.S. (NASD) = FALSE or omitted; European = TRUE.
         */
        days360(startDate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endDate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, method?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the depreciation of an asset for a specified period using the fixed-declining balance method.
         *
         * 
         *
         * @param cost - Is the initial cost of the asset.
         * @param salvage - Is the salvage value at the end of the life of the asset.
         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param period - Is the period for which you want to calculate the depreciation. Period must use the same units as Life.
         * @param month - Is the number of months in the first year. If month is omitted, it is assumed to be 12.
         */
        db(cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, period: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, month?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Changes half-width (single-byte) characters within a character string to full-width (double-byte) characters. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is a text, or a reference to a cell containing a text.
         */
        dbcs(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.
         *
         * 
         *
         * @param cost - Is the initial cost of the asset.
         * @param salvage - Is the salvage value at the end of the life of the asset.
         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param period - Is the period for which you want to calculate the depreciation. Period must use the same units as Life.
         * @param factor - Is the rate at which the balance declines. If Factor is omitted, it is assumed to be 2 (the double-declining balance method).
         */
        ddb(cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, period: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, factor?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a decimal number to binary.
         *
         * 
         *
         * @param number - Is the decimal integer you want to convert.
         * @param places - Is the number of characters to use.
         */
        dec2Bin(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a decimal number to hexadecimal.
         *
         * 
         *
         * @param number - Is the decimal integer you want to convert.
         * @param places - Is the number of characters to use.
         */
        dec2Hex(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a decimal number to octal.
         *
         * 
         *
         * @param number - Is the decimal integer you want to convert.
         * @param places - Is the number of characters to use.
         */
        dec2Oct(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a text representation of a number in a given base into a decimal number.
         *
         * 
         *
         * @param number - Is the number that you want to convert.
         * @param radix - Is the base Radix of the number you are converting.
         */
        decimal(number: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, radix: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts radians to degrees.
         *
         * 
         *
         * @param angle - Is the angle in radians that you want to convert.
         */
        degrees(angle: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Tests whether two numbers are equal.
         *
         * 
         *
         * @param number1 - Is the first number.
         * @param number2 - Is the second number.
         */
        delta(number1: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, number2?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sum of squares of deviations of data points from their sample mean.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 arguments, or an array or array reference, on which you want DEVSQ to calculate.
         */
        devSq(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the discount rate for a security.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param pr - Is the security's price per $100 face value.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param basis - Is the type of day count basis to use.
         */
        disc(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a number to text, using currency format.
         *
         * 
         *
         * @param number - Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.
         * @param decimals - Is the number of digits to the right of the decimal point. The number is rounded as necessary; if omitted, Decimals = 2.
         */
        dollar(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.
         *
         * 
         *
         * @param fractionalDollar - Is a number expressed as a fraction.
         * @param fraction - Is the integer to use in the denominator of the fraction.
         */
        dollarDe(fractionalDollar: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fraction: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.
         *
         * 
         *
         * @param decimalDollar - Is a decimal number.
         * @param fraction - Is the integer to use in the denominator of a fraction.
         */
        dollarFr(decimalDollar: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fraction: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the annual duration of a security with periodic interest payments.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param coupon - Is the security's annual coupon rate.
         * @param yld - Is the security's annual yield.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        duration(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, coupon: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the value you want to round.
         * @param significance - Is the multiple to which you want to round.
         */
        ecma_Ceiling(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the serial number of the date that is the indicated number of months before or after the start date.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param months - Is the number of months before or after startDate.
         */
        edate(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, months: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the effective annual interest rate.
         *
         * 
         *
         * @param nominalRate - Is the nominal interest rate.
         * @param npery - Is the number of compounding periods per year.
         */
        effect(nominalRate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, npery: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the serial number of the last day of the month before or after a specified number of months.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param months - Is the number of months before or after the startDate.
         */
        eoMonth(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, months: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the error function.
         *
         * 
         *
         * @param lowerLimit - Is the lower bound for integrating ERF.
         * @param upperLimit - Is the upper bound for integrating ERF.
         */
        erf(lowerLimit: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, upperLimit?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the complementary error function.
         *
         * 
         *
         * @param x - Is the lower bound for integrating ERF.
         */
        erfC(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the complementary error function.
         *
         * 
         *
         * @param X - Is the lower bound for integrating ERFC.PRECISE.
         */
        erfC_Precise(X: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the error function.
         *
         * 
         *
         * @param X - Is the lower bound for integrating ERF.PRECISE.
         */
        erf_Precise(X: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a number matching an error value.
         *
         * 
         *
         * @param errorVal - Is the error value for which you want the identifying number, and can be an actual error value or a reference to a cell containing an error value.
         */
        error_Type(errorVal: string | number | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a positive number up and negative number down to the nearest even integer.
         *
         * 
         *
         * @param number - Is the value to round.
         */
        even(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether two text strings are exactly the same, and returns TRUE or FALSE. EXACT is case-sensitive.
         *
         * 
         *
         * @param text1 - Is the first text string.
         * @param text2 - Is the second text string.
         */
        exact(text1: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, text2: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns e raised to the power of a given number.
         *
         * 
         *
         * @param number - Is the exponent applied to the base e. The constant e equals 2.71828182845904, the base of the natural logarithm.
         */
        exp(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the exponential distribution.
         *
         * 
         *
         * @param x - Is the value of the function, a nonnegative number.
         * @param lambda - Is the parameter value, a positive number.
         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.
         */
        expon_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, lambda: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the future value of an initial principal after applying a series of compound interest rates.
         *
         * 
         *
         * @param principal - Is the present value.
         * @param schedule - Is an array of interest rates to apply.
         */
        fvschedule(principal: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, schedule: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function, a nonnegative number.
         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.
         */
        f_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function, a nonnegative number.
         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        f_Dist_RT(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.
         *
         * 
         *
         * @param probability - Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.
         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        f_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.
         *
         * 
         *
         * @param probability - Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.
         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         */
        f_Inv_RT(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the factorial of a number, equal to 1*2*3*...* Number.
         *
         * 
         *
         * @param number - Is the nonnegative number you want the factorial of.
         */
        fact(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the double factorial of a number.
         *
         * 
         *
         * @param number - Is the value for which to return the double factorial.
         */
        factDouble(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the logical value FALSE.
         *
         * 
         */
        false(): FunctionResult<boolean>;
        /**
         *
         * Returns the starting position of one text string within another text string. FIND is case-sensitive.
         *
         * 
         *
         * @param findText - Is the text you want to find. Use double quotes (empty text) to match the first character in withinText; wildcard characters not allowed.
         * @param withinText - Is the text containing the text you want to find.
         * @param startNum - Specifies the character at which to start the search. The first character in withinText is character number 1. If omitted, startNum = 1.
         */
        find(findText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, withinText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Finds the starting position of one text string within another text string. FINDB is case-sensitive. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param findText - Is the text you want to find.
         * @param withinText - Is the text containing the text you want to find.
         * @param startNum - Specifies the character at which to start the search.
         */
        findB(findText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, withinText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Fisher transformation.
         *
         * 
         *
         * @param x - Is the value for which you want the transformation, a number between -1 and 1, excluding -1 and 1.
         */
        fisher(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.
         *
         * 
         *
         * @param y - Is the value for which you want to perform the inverse of the transformation.
         */
        fisherInv(y: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number to the specified number of decimals and returns the result as text with or without commas.
         *
         * 
         *
         * @param number - Is the number you want to round and convert to text.
         * @param decimals - Is the number of digits to the right of the decimal point. If omitted, Decimals = 2.
         * @param noCommas - Is a logical value: do not display commas in the returned text = TRUE; do display commas in the returned text = FALSE or omitted.
         */
        fixed(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, noCommas?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the value you want to round.
         * @param significance - Is the multiple to which you want to round.
         * @param mode - When given and nonzero this function will round towards zero.
         */
        floor_Math(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mode?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the numeric value you want to round.
         * @param significance - Is the multiple to which you want to round.
         */
        floor_Precise(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the future value of an investment based on periodic, constant payments and a constant interest rate.
         *
         * 
         *
         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper - Is the total number of payment periods in the investment.
         * @param pmt - Is the payment made each period; it cannot change over the life of the investment.
         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now. If omitted, Pv = 0.
         * @param type - Is a value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         */
        fv(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Gamma function value.
         *
         * 
         *
         * @param x - Is the value for which you want to calculate Gamma.
         */
        gamma(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the natural logarithm of the gamma function.
         *
         * 
         *
         * @param x - Is the value for which you want to calculate GAMMALN, a positive number.
         */
        gammaLn(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the natural logarithm of the gamma function.
         *
         * 
         *
         * @param x - Is the value for which you want to calculate GAMMALN.PRECISE, a positive number.
         */
        gammaLn_Precise(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the gamma distribution.
         *
         * 
         *
         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param alpha - Is a parameter to the distribution, a positive number.
         * @param beta - Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.DIST returns the standard gamma distribution.
         * @param cumulative - Is a logical value: return the cumulative distribution function = TRUE; return the probability mass function = FALSE or omitted.
         */
        gamma_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.
         *
         * 
         *
         * @param probability - Is the probability associated with the gamma distribution, a number between 0 and 1, inclusive.
         * @param alpha - Is a parameter to the distribution, a positive number.
         * @param beta - Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.INV returns the inverse of the standard gamma distribution.
         */
        gamma_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns 0.5 less than the standard normal cumulative distribution.
         *
         * 
         *
         * @param x - Is the value for which you want the distribution.
         */
        gauss(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the greatest common divisor.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 values.
         */
        gcd(...values: Array<number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Tests whether a number is greater than a threshold value.
         *
         * 
         *
         * @param number - Is the value to test against step.
         * @param step - Is the threshold value.
         */
        geStep(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, step?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the geometric mean of an array or range of positive numeric data.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the mean.
         */
        geoMean(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Looks for a value in the top row of a table or array of values and returns the value in the same column from a row you specify.
         *
         * 
         *
         * @param lookupValue - Is the value to be found in the first row of the table and can be a value, a reference, or a text string.
         * @param tableArray - Is a table of text, numbers, or logical values in which data is looked up. tableArray can be a reference to a range or a range name.
         * @param rowIndexNum - Is the row number in tableArray from which the matching value should be returned. The first row of values in the table is row 1.
         * @param rangeLookup - Is a logical value: to find the closest match in the top row (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.
         */
        hlookup(lookupValue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, tableArray: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>, rowIndexNum: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>, rangeLookup?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;
        /**
         *
         * Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the harmonic mean.
         */
        harMean(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Converts a Hexadecimal number to binary.
         *
         * 
         *
         * @param number - Is the hexadecimal number you want to convert.
         * @param places - Is the number of characters to use.
         */
        hex2Bin(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a hexadecimal number to decimal.
         *
         * 
         *
         * @param number - Is the hexadecimal number you want to convert.
         */
        hex2Dec(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a hexadecimal number to octal.
         *
         * 
         *
         * @param number - Is the hexadecimal number you want to convert.
         * @param places - Is the number of characters to use.
         */
        hex2Oct(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel, or text in time format, such as 16:48:00 or 4:48:00 PM.
         */
        hour(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hypergeometric distribution.
         *
         * 
         *
         * @param sampleS - Is the number of successes in the sample.
         * @param numberSample - Is the size of the sample.
         * @param populationS - Is the number of successes in the population.
         * @param numberPop - Is the population size.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         */
        hypGeom_Dist(sampleS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberSample: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, populationS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberPop: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Creates a shortcut or jump that opens a document stored on your hard drive, a network server, or on the Internet.
         *
         * 
         *
         * @param linkLocation - Is the text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.
         * @param friendlyName - Is text or a number that is displayed in the cell. If omitted, the cell displays the linkLocation text.
         */
        hyperlink(linkLocation: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, friendlyName?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;
        /**
         *
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         *
         * 
         *
         * @param number - Is the value you want to round.
         * @param significance - Is the optional multiple to which you want to round.
         */
        iso_Ceiling(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE.
         *
         * 
         *
         * @param logicalTest - Is any value or expression that can be evaluated to TRUE or FALSE.
         * @param valueIfTrue - Is the value that is returned if logicalTest is TRUE. If omitted, TRUE is returned. You can nest up to seven IF functions.
         * @param valueIfFalse - Is the value that is returned if logicalTest is FALSE. If omitted, FALSE is returned.
         */
        if(logicalTest: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, valueIfTrue?: Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>, valueIfFalse?: Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;
        /**
         *
         * Returns the absolute value (modulus) of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the absolute value.
         */
        imAbs(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the argument q, an angle expressed in radians.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the argument.
         */
        imArgument(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the complex conjugate of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the conjugate.
         */
        imConjugate(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cosine of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the cosine.
         */
        imCos(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic cosine of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the hyperbolic cosine.
         */
        imCosh(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cotangent of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the cotangent.
         */
        imCot(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the cosecant of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the cosecant.
         */
        imCsc(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic cosecant of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the hyperbolic cosecant.
         */
        imCsch(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the quotient of two complex numbers.
         *
         * 
         *
         * @param inumber1 - Is the complex numerator or dividend.
         * @param inumber2 - Is the complex denominator or divisor.
         */
        imDiv(inumber1: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, inumber2: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the exponential of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the exponential.
         */
        imExp(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the natural logarithm of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the natural logarithm.
         */
        imLn(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the base-10 logarithm of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the common logarithm.
         */
        imLog10(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the base-2 logarithm of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the base-2 logarithm.
         */
        imLog2(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a complex number raised to an integer power.
         *
         * 
         *
         * @param inumber - Is a complex number you want to raise to a power.
         * @param number - Is the power to which you want to raise the complex number.
         */
        imPower(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the product of 1 to 255 complex numbers.
         *
         * 
         *
         * @param values - Inumber1, Inumber2,... are from 1 to 255 complex numbers to multiply.
         */
        imProduct(...values: Array<Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the real coefficient of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the real coefficient.
         */
        imReal(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the secant of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the secant.
         */
        imSec(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic secant of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the hyperbolic secant.
         */
        imSech(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sine of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the sine.
         */
        imSin(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic sine of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the hyperbolic sine.
         */
        imSinh(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the square root of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the square root.
         */
        imSqrt(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the difference of two complex numbers.
         *
         * 
         *
         * @param inumber1 - Is the complex number from which to subtract inumber2.
         * @param inumber2 - Is the complex number to subtract from inumber1.
         */
        imSub(inumber1: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, inumber2: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sum of complex numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are from 1 to 255 complex numbers to add.
         */
        imSum(...values: Array<Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the tangent of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the tangent.
         */
        imTan(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the imaginary coefficient of a complex number.
         *
         * 
         *
         * @param inumber - Is a complex number for which you want the imaginary coefficient.
         */
        imaginary(inumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number down to the nearest integer.
         *
         * 
         *
         * @param number - Is the real number you want to round down to an integer.
         */
        int(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the interest rate for a fully invested security.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param investment - Is the amount invested in the security.
         * @param redemption - Is the amount to be received at maturity.
         * @param basis - Is the type of day count basis to use.
         */
        intRate(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, investment: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.
         *
         * 
         *
         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per - Is the period for which you want to find the interest and must be in the range 1 to Nper.
         * @param nper - Is the total number of payment periods in an investment.
         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now.
         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, Fv = 0.
         * @param type - Is a logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.
         */
        ipmt(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the internal rate of return for a series of cash flows.
         *
         * 
         *
         * @param values - Is an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.
         * @param guess - Is a number that you guess is close to the result of IRR; 0.1 (10 percent) if omitted.
         */
        irr(values: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, guess?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a value is an error (#VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!) excluding #N/A, and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isErr(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Checks whether a value is an error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!), and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isError(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns TRUE if the number is even.
         *
         * 
         *
         * @param number - Is the value to test.
         */
        isEven(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a reference is to a cell containing a formula, and returns TRUE or FALSE.
         *
         * 
         *
         * @param reference - Is a reference to the cell you want to test.  Reference can be a cell reference, a formula, or name that refers to a cell.
         */
        isFormula(reference: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Checks whether a value is a logical value (TRUE or FALSE), and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isLogical(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Checks whether a value is #N/A, and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isNA(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Checks whether a value is not text (blank cells are not text), and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want tested: a cell; a formula; or a name referring to a cell, formula, or value.
         */
        isNonText(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Checks whether a value is a number, and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isNumber(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns TRUE if the number is odd.
         *
         * 
         *
         * @param number - Is the value to test.
         */
        isOdd(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a value is text, and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isText(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns the ISO week number in the year for a given date.
         *
         * 
         *
         * @param date - Is the date-time code used by Microsoft Excel for date and time calculation.
         */
        isoWeekNum(date: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the interest paid during a specific period of an investment.
         *
         * 
         *
         * @param rate - Interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per - Period for which you want to find the interest.
         * @param nper - Number of payment periods in an investment.
         * @param pv - Lump sum amount that a series of future payments is right now.
         */
        ispmt(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a value is a reference, and returns TRUE or FALSE.
         *
         * 
         *
         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.
         */
        isref(value: Excel.Range | number | string | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns the kurtosis of a data set.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the kurtosis.
         */
        kurt(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the k-th largest value in a data set. For example, the fifth largest number.
         *
         * 
         *
         * @param array - Is the array or range of data for which you want to determine the k-th largest value.
         * @param k - Is the position (from the largest) in the array or cell range of the value to return.
         */
        large(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the least common multiple.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 values for which you want the least common multiple.
         */
        lcm(...values: Array<number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the specified number of characters from the start of a text string.
         *
         * 
         *
         * @param text - Is the text string containing the characters you want to extract.
         * @param numChars - Specifies how many characters you want LEFT to extract; 1 if omitted.
         */
        left(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numChars?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the specified number of characters from the start of a text string. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is the text string containing the characters you want to extract.
         * @param numBytes - Specifies how many characters you want LEFT to return.
         */
        leftb(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numBytes?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the number of characters in a text string.
         *
         * 
         *
         * @param text - Is the text whose length you want to find. Spaces count as characters.
         */
        len(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of characters in a text string. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is the text whose length you want to find.
         */
        lenb(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the natural logarithm of a number.
         *
         * 
         *
         * @param number - Is the positive real number for which you want the natural logarithm.
         */
        ln(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the logarithm of a number to the base you specify.
         *
         * 
         *
         * @param number - Is the positive real number for which you want the logarithm.
         * @param base - Is the base of the logarithm; 10 if omitted.
         */
        log(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, base?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the base-10 logarithm of a number.
         *
         * 
         *
         * @param number - Is the positive real number for which you want the base-10 logarithm.
         */
        log10(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function, a positive number.
         * @param mean - Is the mean of ln(x).
         * @param standardDev - Is the standard deviation of ln(x), a positive number.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         */
        logNorm_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
         *
         * 
         *
         * @param probability - Is a probability associated with the lognormal distribution, a number between 0 and 1, inclusive.
         * @param mean - Is the mean of ln(x).
         * @param standardDev - Is the standard deviation of ln(x), a positive number.
         */
        logNorm_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Looks up a value either from a one-row or one-column range or from an array. Provided for backward compatibility.
         *
         * 
         *
         * @param lookupValue - Is a value that LOOKUP searches for in lookupVector and can be a number, text, a logical value, or a name or reference to a value.
         * @param lookupVector - Is a range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.
         * @param resultVector - Is a range that contains only one row or column, the same size as lookupVector.
         */
        lookup(lookupValue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, lookupVector: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, resultVector?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;
        /**
         *
         * Converts all letters in a text string to lowercase.
         *
         * 
         *
         * @param text - Is the text you want to convert to lowercase. Characters in Text that are not letters are not changed.
         */
        lower(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the Macauley modified duration for a security with an assumed par value of $100.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param coupon - Is the security's annual coupon rate.
         * @param yld - Is the security's annual yield.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        mduration(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, coupon: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.
         *
         * 
         *
         * @param values - Is an array or a reference to cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.
         * @param financeRate - Is the interest rate you pay on the money used in the cash flows.
         * @param reinvestRate - Is the interest rate you receive on the cash flows as you reinvest them.
         */
        mirr(values: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, financeRate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, reinvestRate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a number rounded to the desired multiple.
         *
         * 
         *
         * @param number - Is the value to round.
         * @param multiple - Is the multiple to which you want to round number.
         */
        mround(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, multiple: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the relative position of an item in an array that matches a specified value in a specified order.
         *
         * 
         *
         * @param lookupValue - Is the value you use to find the value you want in the array, a number, text, or logical value, or a reference to one of these.
         * @param lookupArray - Is a contiguous range of cells containing possible lookup values, an array of values, or a reference to an array.
         * @param matchType - Is a number 1, 0, or -1 indicating which value to return.
         */
        match(lookupValue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, lookupArray: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, matchType?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the largest value in a set of values. Ignores logical values and text.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.
         */
        max(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the largest value in a set of values. Does not ignore logical values and text.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.
         */
        maxA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the median, or the number in the middle of the set of given numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the median.
         */
        median(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the characters from the middle of a text string, given a starting position and length.
         *
         * 
         *
         * @param text - Is the text string from which you want to extract the characters.
         * @param startNum - Is the position of the first character you want to extract. The first character in Text is 1.
         * @param numChars - Specifies how many characters to return from Text.
         */
        mid(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numChars: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns characters from the middle of a text string, given a starting position and length. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is the text string containing the characters you want to extract.
         * @param startNum - Is the position of the first character you want to extract in text.
         * @param numBytes - Specifies how many characters to return from text.
         */
        midb(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numBytes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the smallest number in a set of values. Ignores logical values and text.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.
         */
        min(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the smallest value in a set of values. Does not ignore logical values and text.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.
         */
        minA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the minute, a number from 0 to 59.
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:00 or 4:48:00 PM.
         */
        minute(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the remainder after a number is divided by a divisor.
         *
         * 
         *
         * @param number - Is the number for which you want to find the remainder after the division is performed.
         * @param divisor - Is the number by which you want to divide Number.
         */
        mod(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, divisor: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the month, a number from 1 (January) to 12 (December).
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.
         */
        month(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the multinomial of a set of numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 values for which you want the multinomial.
         */
        multiNomial(...values: Array<number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Converts non-number value to a number, dates to serial numbers, TRUE to 1, anything else to 0 (zero).
         *
         * 
         *
         * @param value - Is the value you want converted.
         */
        n(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.
         *
         * 
         *
         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param pmt - Is the payment made each period; it cannot change over the life of the investment.
         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now.
         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, zero is used.
         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         */
        nper(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the error value #N/A (value not available).
         *
         * 
         */
        na(): FunctionResult<number | string>;
        /**
         *
         * Returns the negative binomial distribution, the probability that there will be Number_f failures before the Number_s-th success, with Probability_s probability of a success.
         *
         * 
         *
         * @param numberF - Is the number of failures.
         * @param numberS - Is the threshold number of successes.
         * @param probabilityS - Is the probability of a success; a number between 0 and 1.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.
         */
        negBinom_Dist(numberF: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of whole workdays between two dates.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param endDate - Is a serial date number that represents the end date.
         * @param holidays - Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.
         */
        networkDays(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, holidays?: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of whole workdays between two dates with custom weekend parameters.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param endDate - Is a serial date number that represents the end date.
         * @param weekend - Is a number or string specifying when weekends occur.
         * @param holidays - Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.
         */
        networkDays_Intl(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, weekend?: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, holidays?: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the annual nominal interest rate.
         *
         * 
         *
         * @param effectRate - Is the effective interest rate.
         * @param npery - Is the number of compounding periods per year.
         */
        nominal(effectRate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, npery: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the normal distribution for the specified mean and standard deviation.
         *
         * 
         *
         * @param x - Is the value for which you want the distribution.
         * @param mean - Is the arithmetic mean of the distribution.
         * @param standardDev - Is the standard deviation of the distribution, a positive number.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         */
        norm_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.
         *
         * 
         *
         * @param probability - Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.
         * @param mean - Is the arithmetic mean of the distribution.
         * @param standardDev - Is the standard deviation of the distribution, a positive number.
         */
        norm_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the standard normal distribution (has a mean of zero and a standard deviation of one).
         *
         * 
         *
         * @param z - Is the value for which you want the distribution.
         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.
         */
        norm_S_Dist(z: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).
         *
         * 
         *
         * @param probability - Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.
         */
        norm_S_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Changes FALSE to TRUE, or TRUE to FALSE.
         *
         * 
         *
         * @param logical - Is a value or expression that can be evaluated to TRUE or FALSE.
         */
        not(logical: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;
        /**
         *
         * Returns the current date and time formatted as a date and time.
         *
         * 
         */
        now(): FunctionResult<number>;
        /**
         *
         * Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).
         *
         * 
         *
         * @param rate - Is the rate of discount over the length of one period.
         * @param values - List of parameters, whose elements are 1 to 254 payments and income, equally spaced in time and occurring at the end of each period.
         */
        npv(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Converts text to number in a locale-independent manner.
         *
         * 
         *
         * @param text - Is the string representing the number you want to convert.
         * @param decimalSeparator - Is the character used as the decimal separator in the string.
         * @param groupSeparator - Is the character used as the group separator in the string.
         */
        numberValue(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, decimalSeparator?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, groupSeparator?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts an octal number to binary.
         *
         * 
         *
         * @param number - Is the octal number you want to convert.
         * @param places - Is the number of characters to use.
         */
        oct2Bin(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts an octal number to decimal.
         *
         * 
         *
         * @param number - Is the octal number you want to convert.
         */
        oct2Dec(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts an octal number to hexadecimal.
         *
         * 
         *
         * @param number - Is the octal number you want to convert.
         * @param places - Is the number of characters to use.
         */
        oct2Hex(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, places?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a positive number up and negative number down to the nearest odd integer.
         *
         * 
         *
         * @param number - Is the value to round.
         */
        odd(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value of a security with an odd first period.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param firstCoupon - Is the security's first coupon date, expressed as a serial date number.
         * @param rate - Is the security's interest rate.
         * @param yld - Is the security's annual yield.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        oddFPrice(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, firstCoupon: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the yield of a security with an odd first period.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param firstCoupon - Is the security's first coupon date, expressed as a serial date number.
         * @param rate - Is the security's interest rate.
         * @param pr - Is the security's price.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        oddFYield(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, firstCoupon: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value of a security with an odd last period.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param lastInterest - Is the security's last coupon date, expressed as a serial date number.
         * @param rate - Is the security's interest rate.
         * @param yld - Is the security's annual yield.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        oddLPrice(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, lastInterest: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the yield of a security with an odd last period.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param lastInterest - Is the security's last coupon date, expressed as a serial date number.
         * @param rate - Is the security's interest rate.
         * @param pr - Is the security's price.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        oddLYield(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, lastInterest: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether any of the arguments are TRUE, and returns TRUE or FALSE. Returns FALSE only if all arguments are FALSE.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 conditions that you want to test that can be either TRUE or FALSE.
         */
        or(...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<boolean>;
        /**
         *
         * Returns the number of periods required by an investment to reach a specified value.
         *
         * 
         *
         * @param rate - Is the interest rate per period.
         * @param pv - Is the present value of the investment.
         * @param fv - Is the desired future value of the investment.
         */
        pduration(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, exclusive) of the data set.
         *
         * 
         *
         * @param array - Is the array or range of data with numeric values that defines relative standing.
         * @param x - Is the value for which you want to know the rank.
         * @param significance - Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).
         */
        percentRank_Exc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, inclusive) of the data set.
         *
         * 
         *
         * @param array - Is the array or range of data with numeric values that defines relative standing.
         * @param x - Is the value for which you want to know the rank.
         * @param significance - Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).
         */
        percentRank_Inc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.
         *
         * 
         *
         * @param array - Is the array or range of data that defines relative standing.
         * @param k - Is the percentile value that is between 0 through 1, inclusive.
         */
        percentile_Exc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
         *
         * 
         *
         * @param array - Is the array or range of data that defines relative standing.
         * @param k - Is the percentile value that is between 0 through 1, inclusive.
         */
        percentile_Inc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of permutations for a given number of objects that can be selected from the total objects.
         *
         * 
         *
         * @param number - Is the total number of objects.
         * @param numberChosen - Is the number of objects in each permutation.
         */
        permut(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.
         *
         * 
         *
         * @param number - Is the total number of objects.
         * @param numberChosen - Is the number of objects in each permutation.
         */
        permutationa(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the value of the density function for a standard normal distribution.
         *
         * 
         *
         * @param x - Is the number for which you want the density of the standard normal distribution.
         */
        phi(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the value of Pi, 3.14159265358979, accurate to 15 digits.
         *
         * 
         */
        pi(): FunctionResult<number>;
        /**
         *
         * Calculates the payment for a loan based on constant payments and a constant interest rate.
         *
         * 
         *
         * @param rate - Is the interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper - Is the total number of payments for the loan.
         * @param pv - Is the present value: the total amount that a series of future payments is worth now.
         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made, 0 (zero) if omitted.
         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         */
        pmt(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Poisson distribution.
         *
         * 
         *
         * @param x - Is the number of events.
         * @param mean - Is the expected numeric value, a positive number.
         * @param cumulative - Is a logical value: for the cumulative Poisson probability, use TRUE; for the Poisson probability mass function, use FALSE.
         */
        poisson_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the result of a number raised to a power.
         *
         * 
         *
         * @param number - Is the base number, any real number.
         * @param power - Is the exponent, to which the base number is raised.
         */
        power(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, power: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.
         *
         * 
         *
         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per - Specifies the period and must be in the range 1 to nper.
         * @param nper - Is the total number of payment periods in an investment.
         * @param pv - Is the present value: the total amount that a series of future payments is worth now.
         * @param fv - Is the future value, or cash balance you want to attain after the last payment is made.
         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         */
        ppmt(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value of a security that pays periodic interest.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param rate - Is the security's annual coupon rate.
         * @param yld - Is the security's annual yield.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        price(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value of a discounted security.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param discount - Is the security's discount rate.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param basis - Is the type of day count basis to use.
         */
        priceDisc(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, discount: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value of a security that pays interest at maturity.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param rate - Is the security's interest rate at date of issue.
         * @param yld - Is the security's annual yield.
         * @param basis - Is the type of day count basis to use.
         */
        priceMat(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, yld: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Multiplies all the numbers given as arguments.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, logical values, or text representations of numbers that you want to multiply.
         */
        product(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Converts a text string to proper case; the first letter in each word to uppercase, and all other letters to lowercase.
         *
         * 
         *
         * @param text - Is text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.
         */
        proper(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the present value of an investment: the total amount that a series of future payments is worth now.
         *
         * 
         *
         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper - Is the total number of payment periods in an investment.
         * @param pmt - Is the payment made each period and cannot change over the life of the investment.
         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made.
         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         */
        pv(rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the quartile of a data set, based on percentile values from 0..1, exclusive.
         *
         * 
         *
         * @param array - Is the array or cell range of numeric values for which you want the quartile value.
         * @param quart - Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.
         */
        quartile_Exc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, quart: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the quartile of a data set, based on percentile values from 0..1, inclusive.
         *
         * 
         *
         * @param array - Is the array or cell range of numeric values for which you want the quartile value.
         * @param quart - Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.
         */
        quartile_Inc(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, quart: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the integer portion of a division.
         *
         * 
         *
         * @param numerator - Is the dividend.
         * @param denominator - Is the divisor.
         */
        quotient(numerator: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, denominator: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts degrees to radians.
         *
         * 
         *
         * @param angle - Is an angle in degrees that you want to convert.
         */
        radians(angle: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).
         *
         * 
         */
        rand(): FunctionResult<number>;
        /**
         *
         * Returns a random number between the numbers you specify.
         *
         * 
         *
         * @param bottom - Is the smallest integer RANDBETWEEN will return.
         * @param top - Is the largest integer RANDBETWEEN will return.
         */
        randBetween(bottom: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, top: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the average rank is returned.
         *
         * 
         *
         * @param number - Is the number for which you want to find the rank.
         * @param ref - Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.
         * @param order - Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.
         */
        rank_Avg(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ref: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, order?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the top rank of that set of values is returned.
         *
         * 
         *
         * @param number - Is the number for which you want to find the rank.
         * @param ref - Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.
         * @param order - Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.
         */
        rank_Eq(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ref: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, order?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the interest rate per period of a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.
         *
         * 
         *
         * @param nper - Is the total number of payment periods for the loan or investment.
         * @param pmt - Is the payment made each period and cannot change over the life of the loan or investment.
         * @param pv - Is the present value: the total amount that a series of future payments is worth now.
         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, uses Fv = 0.
         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         * @param guess - Is your guess for what the rate will be; if omitted, Guess = 0.1 (10 percent).
         */
        rate(nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, guess?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the amount received at maturity for a fully invested security.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param investment - Is the amount invested in the security.
         * @param discount - Is the security's discount rate.
         * @param basis - Is the type of day count basis to use.
         */
        received(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, investment: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, discount: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Replaces part of a text string with a different text string.
         *
         * 
         *
         * @param oldText - Is text in which you want to replace some characters.
         * @param startNum - Is the position of the character in oldText that you want to replace with newText.
         * @param numChars - Is the number of characters in oldText that you want to replace.
         * @param newText - Is the text that will replace characters in oldText.
         */
        replace(oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numChars: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Replaces part of a text string with a different text string. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param oldText - Is text in which you want to replace some characters.
         * @param startNum - Is the position of the character in oldText that you want to replace with newText.
         * @param numBytes - Is the number of characters in oldText that you want to replace with newText.
         * @param newText - Is the text that will replace characters in oldText.
         */
        replaceB(oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numBytes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Repeats text a given number of times. Use REPT to fill a cell with a number of instances of a text string.
         *
         * 
         *
         * @param text - Is the text you want to repeat.
         * @param numberTimes - Is a positive number specifying the number of times to repeat text.
         */
        rept(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numberTimes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the specified number of characters from the end of a text string.
         *
         * 
         *
         * @param text - Is the text string that contains the characters you want to extract.
         * @param numChars - Specifies how many characters you want to extract, 1 if omitted.
         */
        right(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numChars?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the specified number of characters from the end of a text string. Use with double-byte character sets (DBCS).
         *
         * 
         *
         * @param text - Is the text string containing the characters you want to extract.
         * @param numBytes - Specifies how many characters you want to extract.
         */
        rightb(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numBytes?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Converts an Arabic numeral to Roman, as text.
         *
         * 
         *
         * @param number - Is the Arabic numeral you want to convert.
         * @param form - Is the number specifying the type of Roman numeral you want.
         */
        roman(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, form?: boolean | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Rounds a number to a specified number of digits.
         *
         * 
         *
         * @param number - Is the number you want to round.
         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero to the nearest integer.
         */
        round(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number down, toward zero.
         *
         * 
         *
         * @param number - Is any real number that you want rounded down.
         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.
         */
        roundDown(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Rounds a number up, away from zero.
         *
         * 
         *
         * @param number - Is any real number that you want rounded up.
         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.
         */
        roundUp(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of rows in a reference or array.
         *
         * 
         *
         * @param array - Is an array, an array formula, or a reference to a range of cells for which you want the number of rows.
         */
        rows(array: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns an equivalent interest rate for the growth of an investment.
         *
         * 
         *
         * @param nper - Is the number of periods for the investment.
         * @param pv - Is the present value of the investment.
         * @param fv - Is the future value of the investment.
         */
        rri(nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, fv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the secant of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the secant.
         */
        sec(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic secant of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the hyperbolic secant.
         */
        sech(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the second, a number from 0 to 59.
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:23 or 4:48:47 PM.
         */
        second(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sum of a power series based on the formula.
         *
         * 
         *
         * @param x - Is the input value to the power series.
         * @param n - Is the initial power to which you want to raise x.
         * @param m - Is the step by which to increase n for each term in the series.
         * @param coefficients - Is a set of coefficients by which each successive power of x is multiplied.
         */
        seriesSum(x: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, n: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, m: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, coefficients: Excel.Range | string | number | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sheet number of the referenced sheet.
         *
         * 
         *
         * @param value - Is the name of a sheet or a reference that you want the sheet number of.  If omitted the number of the sheet containing the function is returned.
         */
        sheet(value?: Excel.Range | string | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the number of sheets in a reference.
         *
         * 
         *
         * @param reference - Is a reference for which you want to know the number of sheets it contains.  If omitted the number of sheets in the workbook containing the function is returned.
         */
        sheets(reference?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sign of a number: 1 if the number is positive, zero if the number is zero, or -1 if the number is negative.
         *
         * 
         *
         * @param number - Is any real number.
         */
        sign(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the sine of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the sine. Degrees * PI()/180 = radians.
         */
        sin(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic sine of a number.
         *
         * 
         *
         * @param number - Is any real number.
         */
        sinh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the skewness.
         */
        skew(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.
         */
        skew_p(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the straight-line depreciation of an asset for one period.
         *
         * 
         *
         * @param cost - Is the initial cost of the asset.
         * @param salvage - Is the salvage value at the end of the life of the asset.
         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         */
        sln(cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the k-th smallest value in a data set. For example, the fifth smallest number.
         *
         * 
         *
         * @param array - Is an array or range of numerical data for which you want to determine the k-th smallest value.
         * @param k - Is the position (from the smallest) in the array or range of the value to return.
         */
        small(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the square root of a number.
         *
         * 
         *
         * @param number - Is the number for which you want the square root.
         */
        sqrt(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the square root of (number * Pi).
         *
         * 
         *
         * @param number - Is the number by which p is multiplied.
         */
        sqrtPi(number: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Estimates standard deviation based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 values corresponding to a sample of a population and can be values or names or references to values.
         */
        stDevA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Calculates standard deviation based on an entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 values corresponding to a population and can be values, names, arrays, or references that contain values.
         */
        stDevPA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers corresponding to a population and can be numbers or references that contain numbers.
         */
        stDev_P(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Estimates standard deviation based on a sample (ignores logical values and text in the sample).
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers corresponding to a sample of a population and can be numbers or references that contain numbers.
         */
        stDev_S(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns a normalized value from a distribution characterized by a mean and standard deviation.
         *
         * 
         *
         * @param x - Is the value you want to normalize.
         * @param mean - Is the arithmetic mean of the distribution.
         * @param standardDev - Is the standard deviation of the distribution, a positive number.
         */
        standardize(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Replaces existing text with new text in a text string.
         *
         * 
         *
         * @param text - Is the text or the reference to a cell containing text in which you want to substitute characters.
         * @param oldText - Is the existing text you want to replace. If the case of oldText does not match the case of text, SUBSTITUTE will not replace the text.
         * @param newText - Is the text you want to replace oldText with.
         * @param instanceNum - Specifies which occurrence of oldText you want to replace. If omitted, every instance of oldText is replaced.
         */
        substitute(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, instanceNum?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns a subtotal in a list or database.
         *
         * 
         *
         * @param functionNum - Is the number 1 to 11 that specifies the summary function for the subtotal.
         * @param values - List of parameters, whose elements are 1 to 254 ranges or references for which you want the subtotal.
         */
        subtotal(functionNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ...values: Array<Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Adds all the numbers in a range of cells.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers to sum. Logical values and text are ignored in cells, included if typed as arguments.
         */
        sum(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Adds the cells specified by a given condition or criteria.
         *
         * 
         *
         * @param range - Is the range of cells you want evaluated.
         * @param criteria - Is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.
         * @param sumRange - Are the actual cells to sum. If omitted, the cells in range are used.
         */
        sumIf(range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, criteria: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, sumRange?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Adds the cells specified by a given set of conditions or criteria.
         *
         * 
         *
         * @param sumRange - Are the actual cells to sum.
         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.
         */
        sumIfs(sumRange: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, ...values: Array<Excel.Range | Excel.RangeReference | Excel.FunctionResult<any> | number | string | boolean>): FunctionResult<number>;
        /**
         *
         * Returns the sum of the squares of the arguments. The arguments can be numbers, arrays, names, or references to cells that contain numbers.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numbers, arrays, names, or references to arrays for which you want the sum of the squares.
         */
        sumSq(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the sum-of-years' digits depreciation of an asset for a specified period.
         *
         * 
         *
         * @param cost - Is the initial cost of the asset.
         * @param salvage - Is the salvage value at the end of the life of the asset.
         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param per - Is the period and must use the same units as Life.
         */
        syd(cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.
         *
         * 
         *
         * @param value - Is the value to test.
         */
        t(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the bond-equivalent yield for a treasury bill.
         *
         * 
         *
         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param discount - Is the Treasury bill's discount rate.
         */
        tbillEq(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, discount: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the price per $100 face value for a treasury bill.
         *
         * 
         *
         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param discount - Is the Treasury bill's discount rate.
         */
        tbillPrice(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, discount: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the yield for a treasury bill.
         *
         * 
         *
         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param pr - Is the Treasury Bill's price per $100 face value.
         */
        tbillYield(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the left-tailed Student's t-distribution.
         *
         * 
         *
         * @param x - Is the numeric value at which to evaluate the distribution.
         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         */
        t_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the two-tailed Student's t-distribution.
         *
         * 
         *
         * @param x - Is the numeric value at which to evaluate the distribution.
         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.
         */
        t_Dist_2T(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the right-tailed Student's t-distribution.
         *
         * 
         *
         * @param x - Is the numeric value at which to evaluate the distribution.
         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.
         */
        t_Dist_RT(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the left-tailed inverse of the Student's t-distribution.
         *
         * 
         *
         * @param probability - Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.
         * @param degFreedom - Is a positive integer indicating the number of degrees of freedom to characterize the distribution.
         */
        t_Inv(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the two-tailed inverse of the Student's t-distribution.
         *
         * 
         *
         * @param probability - Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.
         * @param degFreedom - Is a positive integer indicating the number of degrees of freedom to characterize the distribution.
         */
        t_Inv_2T(probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the tangent of an angle.
         *
         * 
         *
         * @param number - Is the angle in radians for which you want the tangent. Degrees * PI()/180 = radians.
         */
        tan(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the hyperbolic tangent of a number.
         *
         * 
         *
         * @param number - Is any real number.
         */
        tanh(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a value to text in a specific number format.
         *
         * 
         *
         * @param value - Is a number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.
         * @param formatText - Is a number format in text form from the Category box on the Number tab in the Format Cells dialog box (not General).
         */
        text(value: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, formatText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Converts hours, minutes, and seconds given as numbers to an Excel serial number, formatted with a time format.
         *
         * 
         *
         * @param hour - Is a number from 0 to 23 representing the hour.
         * @param minute - Is a number from 0 to 59 representing the minute.
         * @param second - Is a number from 0 to 59 representing the second.
         */
        time(hour: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, minute: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, second: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a text time to an Excel serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.
         *
         * 
         *
         * @param timeText - Is a text string that gives a time in any one of the Microsoft Excel time formats (date information in the string is ignored).
         */
        timevalue(timeText: string | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the current date formatted as a date.
         *
         * 
         */
        today(): FunctionResult<number>;
        /**
         *
         * Removes all spaces from a text string except for single spaces between words.
         *
         * 
         *
         * @param text - Is the text from which you want spaces removed.
         */
        trim(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the mean of the interior portion of a set of data values.
         *
         * 
         *
         * @param array - Is the range or array of values to trim and average.
         * @param percent - Is the fractional number of data points to exclude from the top and bottom of the data set.
         */
        trimMean(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, percent: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the logical value TRUE.
         *
         * 
         */
        true(): FunctionResult<boolean>;
        /**
         *
         * Truncates a number to an integer by removing the decimal, or fractional, part of the number.
         *
         * 
         *
         * @param number - Is the number you want to truncate.
         * @param numDigits - Is a number specifying the precision of the truncation, 0 (zero) if omitted.
         */
        trunc(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, numDigits?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64.
         *
         * 
         *
         * @param value - Can be any value.
         */
        type(value: boolean | string | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a number to text, using currency format.
         *
         * 
         *
         * @param number - Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.
         * @param decimals - Is the number of digits to the right of the decimal point.
         */
        usdollar(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the Unicode character referenced by the given numeric value.
         *
         * 
         *
         * @param number - Is the Unicode number representing a character.
         */
        unichar(number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Returns the number (code point) corresponding to the first character of the text.
         *
         * 
         *
         * @param text - Is the character that you want the Unicode value of.
         */
        unicode(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Converts a text string to all uppercase letters.
         *
         * 
         *
         * @param text - Is the text you want converted to uppercase, a reference or a text string.
         */
        upper(text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;
        /**
         *
         * Looks for a value in the leftmost column of a table, and then returns a value in the same row from a column you specify. By default, the table must be sorted in an ascending order.
         *
         * 
         *
         * @param lookupValue - Is the value to be found in the first column of the table, and can be a value, a reference, or a text string.
         * @param tableArray - Is a table of text, numbers, or logical values, in which data is retrieved. tableArray can be a reference to a range or a range name.
         * @param colIndexNum - Is the column number in tableArray from which the matching value should be returned. The first column of values in the table is column 1.
         * @param rangeLookup - Is a logical value: to find the closest match in the first column (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.
         */
        vlookup(lookupValue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, tableArray: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>, colIndexNum: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>, rangeLookup?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;
        /**
         *
         * Converts a text string that represents a number to a number.
         *
         * 
         *
         * @param text - Is the text enclosed in quotation marks or a reference to a cell containing the text you want to convert.
         */
        value(text: string | boolean | number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Estimates variance based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 value arguments corresponding to a sample of a population.
         */
        varA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Calculates variance based on the entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 value arguments corresponding to a population.
         */
        varPA(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Calculates variance based on the entire population (ignores logical values and text in the population).
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a population.
         */
        var_P(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Estimates variance based on a sample (ignores logical values and text in the sample).
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a sample of a population.
         */
        var_S(...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<number>;
        /**
         *
         * Returns the depreciation of an asset for any period you specify, including partial periods, using the double-declining balance method or some other method you specify.
         *
         * 
         *
         * @param cost - Is the initial cost of the asset.
         * @param salvage - Is the salvage value at the end of the life of the asset.
         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param startPeriod - Is the starting period for which you want to calculate the depreciation, in the same units as Life.
         * @param endPeriod - Is the ending period for which you want to calculate the depreciation, in the same units as Life.
         * @param factor - Is the rate at which the balance declines, 2 (double-declining balance) if omitted.
         * @param noSwitch - Switch to straight-line depreciation when depreciation is greater than the declining balance = FALSE or omitted; do not switch = TRUE.
         */
        vdb(cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, startPeriod: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endPeriod: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, factor?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, noSwitch?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the week number in the year.
         *
         * 
         *
         * @param serialNumber - Is the date-time code used by Microsoft Excel for date and time calculation.
         * @param returnType - Is a number (1 or 2) that determines the type of the return value.
         */
        weekNum(serialNumber: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, returnType?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a number from 1 to 7 identifying the day of the week of a date.
         *
         * 
         *
         * @param serialNumber - Is a number that represents a date.
         * @param returnType - Is a number: for Sunday=1 through Saturday=7, use 1; for Monday=1 through Sunday=7, use 2; for Monday=0 through Sunday=6, use 3.
         */
        weekday(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, returnType?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the Weibull distribution.
         *
         * 
         *
         * @param x - Is the value at which to evaluate the function, a nonnegative number.
         * @param alpha - Is a parameter to the distribution, a positive number.
         * @param beta - Is a parameter to the distribution, a positive number.
         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.
         */
        weibull_Dist(x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the serial number of the date before or after a specified number of workdays.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param days - Is the number of nonweekend and non-holiday days before or after startDate.
         * @param holidays - Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.
         */
        workDay(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, days: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, holidays?: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param days - Is the number of nonweekend and non-holiday days before or after startDate.
         * @param weekend - Is a number or string specifying when weekends occur.
         * @param holidays - Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.
         */
        workDay_Intl(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, days: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, weekend?: number | string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, holidays?: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the internal rate of return for a schedule of cash flows.
         *
         * 
         *
         * @param values - Is a series of cash flows that correspond to a schedule of payments in dates.
         * @param dates - Is a schedule of payment dates that corresponds to the cash flow payments.
         * @param guess - Is a number that you guess is close to the result of XIRR.
         */
        xirr(values: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>, dates: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>, guess?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the net present value for a schedule of cash flows.
         *
         * 
         *
         * @param rate - Is the discount rate to apply to the cash flows.
         * @param values - Is a series of cash flows that correspond to a schedule of payments in dates.
         * @param dates - Is a schedule of payment dates that corresponds to the cash flow payments.
         */
        xnpv(rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, values: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>, dates: number | string | Excel.Range | boolean | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns a logical 'Exclusive Or' of all arguments.
         *
         * 
         *
         * @param values - List of parameters, whose elements are 1 to 254 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.
         */
        xor(...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>>): FunctionResult<boolean>;
        /**
         *
         * Returns the year of a date, an integer in the range 1900 - 9999.
         *
         * 
         *
         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.
         */
        year(serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the year fraction representing the number of whole days between start_date and end_date.
         *
         * 
         *
         * @param startDate - Is a serial date number that represents the start date.
         * @param endDate - Is a serial date number that represents the end date.
         * @param basis - Is the type of day count basis to use.
         */
        yearFrac(startDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, endDate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the yield on a security that pays periodic interest.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param rate - Is the security's annual coupon rate.
         * @param pr - Is the security's price per $100 face value.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param frequency - Is the number of coupon payments per year.
         * @param basis - Is the type of day count basis to use.
         */
        yield(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, frequency: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the annual yield for a discounted security. For example, a treasury bill.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param pr - Is the security's price per $100 face value.
         * @param redemption - Is the security's redemption value per $100 face value.
         * @param basis - Is the type of day count basis to use.
         */
        yieldDisc(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, redemption: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the annual yield of a security that pays interest at maturity.
         *
         * 
         *
         * @param settlement - Is the security's settlement date, expressed as a serial date number.
         * @param maturity - Is the security's maturity date, expressed as a serial date number.
         * @param issue - Is the security's issue date, expressed as a serial date number.
         * @param rate - Is the security's interest rate at date of issue.
         * @param pr - Is the security's price per $100 face value.
         * @param basis - Is the type of day count basis to use.
         */
        yieldMat(settlement: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, maturity: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, issue: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, rate: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, pr: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, basis?: number | string | boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
         *
         * Returns the one-tailed P-value of a z-test.
         *
         * 
         *
         * @param array - Is the array or range of data against which to test X.
         * @param x - Is the value to test.
         * @param sigma - Is the population (known) standard deviation. If omitted, the sample standard deviation is used.
         */
        z_Test(array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>, sigma?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        /**
        * Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)
        * Whereas the original Excel.Functions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FunctionsData`) that contains shallow copies of any loaded child properties from the original object.
        */
        toJSON(): {
            [key: string]: string;
        };
    }
    enum ErrorCodes {
        accessDenied = "AccessDenied",
        apiNotFound = "ApiNotFound",
        conflict = "Conflict",
        generalException = "GeneralException",
        insertDeleteConflict = "InsertDeleteConflict",
        invalidArgument = "InvalidArgument",
        invalidBinding = "InvalidBinding",
        invalidOperation = "InvalidOperation",
        invalidReference = "InvalidReference",
        invalidSelection = "InvalidSelection",
        itemAlreadyExists = "ItemAlreadyExists",
        itemNotFound = "ItemNotFound",
        nonBlankCellOffSheet = "NonBlankCellOffSheet",
        notImplemented = "NotImplemented",
        rangeExceedsLimit = "RangeExceedsLimit",
        requestAborted = "RequestAborted",
        unsupportedOperation = "UnsupportedOperation",
        invalidOperationInCellEditMode = "InvalidOperationInCellEditMode"
    }
}


////////////////////////////////////////////////////////////////
//////////////////////// End Excel APIs ////////////////////////
////////////////////////////////////////////////////////////////