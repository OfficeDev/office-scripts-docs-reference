'Excel.AutoFilter#apply:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        let farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    }
'Excel.CellPropertiesFill#color:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        let topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        let headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        let nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        let matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        let range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    }
'Excel.CellPropertiesFillLoadOptions#color:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        let propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        let cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    }
'Excel.CellPropertiesFont#color:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();

        // Creating the SettableCellProperties objects to use for the range.
        // In your add-in, these should be created once, outside the function.
        let topHeaderProps: Excel.SettableCellProperties = {
            // The style property takes a string matching the name of an Excel style.
            // Built-in style names are listed in the `BuiltInStyle` enum.
            // Note that a style will overwrite any formatting,
            // so do not use the format property with the style property.
            style: "Heading1"
        };

        let headerProps: Excel.SettableCellProperties = {
            // Any subproperties of format that are not set will not be changed when these cell properties are set.
            format: {
                fill: {
                    color: "Blue"
                },
                font: {
                    color: "White",
                    bold: true
                }
            }
        };

        let nonApplicableProps: Excel.SettableCellProperties = {
            format: {
                fill: {
                    pattern: Excel.FillPattern.gray25
                },
                font: {
                    color: "Gray",
                    italic: true
                }
            }
        };

        let matchupScoreProps: Excel.SettableCellProperties = {
            format: {
                borders: {
                    bottom: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    left: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    right: {
                        style: Excel.BorderLineStyle.continuous
                    },
                    top: {
                        style: Excel.BorderLineStyle.continuous
                    }
                }
            }
        };

        let range = sheet.getRange("A1:E5");

        // You can use empty JSON objects to avoid changing a cell's properties.
        range.setCellProperties([
            [topHeaderProps, {}, {}, {}, {}],
            [{}, {}, headerProps, headerProps, headerProps],
            [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
            [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        await context.sync();
    }
'Excel.CellPropertiesFontLoadOptions#color:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let cell = context.workbook.getActiveCell();

        // Define the cell properties to get by setting the matching LoadOptions to true.
        let propertiesToGet = cell.getCellProperties({
            address: true,
            format: {
                fill: {
                    color: true
                },
                font: {
                    color: true
                }
            },
            style: true
        });

        // Sync to get the data from the workbook.
        await context.sync();
        let cellProperties = propertiesToGet.value[0][0];
        console.log(
            `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
    }
'Excel.CellValueConditionalFormat#format:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B21:E23");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    }
'Excel.CellValueConditionalFormat#rule:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B21:E23");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    }
'Excel.ChartAxis#displayUnit:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let categoryAxis = chart.axes.categoryAxis;
        let valueAxis = chart.axes.valueAxis;

        // Load to get display unit.
        valueAxis.load("displayUnit");

        await context.sync();

        console.log("The vertical axis display unit is: " + valueAxis.displayUnit);
    }
'Excel.ChartAxis#showDisplayUnitLabel:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);
        let axis = chart.axes.valueAxis;

        // Remove display unit.
        axis.showDisplayUnitLabel = false;

        await context.sync();
    }
'Excel.ChartFill#setSolidColor:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let pointsCollection = sheet.charts.getItemAt(0).series.getItemAt(0).points;
        let point = pointsCollection.getItemAt(2);

        // Set color for chart point.
        point.format.fill.setSolidColor('red');

        await context.sync();        
    }
'Excel.ChartLegendFormat#font:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.legend.visible = true;

        // Format the legend font.
        let font = chart.legend.format.font;
        font.bold = true;
        font.color = "red";
        font.italic = true;
        font.size = 15;
        font.name = "Calibri";
        font.underline = "Single";

        await context.sync();
    }
'Excel.ChartSeries#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let seriesCollection = sheet.charts.getItemAt(0).series;
      seriesCollection.load("count");
      await context.sync();

      if (seriesCollection.count > 0) {
        let series = seriesCollection.getItemAt(0);

        // Delete the first series.
        series.delete();
      }

      await context.sync();
    }
'Excel.ChartSeries#markerBackgroundColor:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    }
'Excel.ChartSeries#markerForegroundColor:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    }
'Excel.ChartSeries#markerSize:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    }
'Excel.ChartSeries#markerStyle:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = sheet.getRange("A1:E7");

        // Create an XY scatter chart.
        let chart = sheet.charts.add("XYScatterSmooth", dataRange, "Auto");
        chart.title.text = "Bicycle Parts Quarterly Sales"; 
      
        let series = chart.series;
        let series0 = series.getItemAt(0);
        let series1 = series.getItemAt(1);
        let series2 = series.getItemAt(2);
        let series3 = series.getItemAt(3);

        // Set markers.
        series0.markerStyle = "Dash";
        series0.markerForegroundColor = "black";
        series1.markerStyle = "Star";
        series1.markerForegroundColor = "black";
        series2.markerStyle = "X";
        series2.markerSize = 12;
        series3.markerStyle = "Triangle";
        series3.markerBackgroundColor = "purple";

        await context.sync();
    }
'Excel.ChartSeries#setValues:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
      let sheet = context.workbook.worksheets.getItem("Sample");

      let seriesCollection = sheet.charts.getItemAt(0);
      let rangeSelection = sheet.getRange("C2:C7");
      let xRangeSelection = sheet.getRange("A1:A7");

      // Add a series.
      let newSeries = seriesCollection.series.add("Qtr2");
      newSeries.setValues(rangeSelection);
      newSeries.setXAxisValues(xRangeSelection);

      await context.sync();
    }
'Excel.ChartTitle#getSubstring:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let chart = sheet.charts.getItemAt(0);

        // Get first seven characters of the title and color them green.
        chart.title.getSubstring(0, 7).font.color = "Yellow";
        await context.sync();
    }
'Excel.ChartTitle#textOrientation:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let title = sheet.charts.getItemAt(0).title;
        title.textOrientation = -45;

        await context.sync();
    }
'Excel.ChartTrendline#type:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

        // Get the trendline for series 1 and load its type property.  
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        trendline.load("type");

        await context.sync();

        console.log("The trendline type is:" + trendline.type);  
    }
'Excel.ChartTrendlineCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series;

         // Add a trendline.  
        seriesCollection.getItemAt(0).trendlines.add("Linear");

        await context.sync();
    }
'Excel.ChartTrendlineFormat#line:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 

        // Get the color of the chart trendline. 
        // In this example, it's #4472c4 which is blue.
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);
        let line = trendline.format.line;
        line.load("color");

        await context.sync();

        console.log("The trendline color is:" + line.color);
    }
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        let seriesCollection = sheet.charts.getItemAt(0).series; 
        let trendline = seriesCollection.getItemAt(0).trendlines.getItem(0);

        // Set format of the trendline to a solid, red line.
        let line = trendline.format.line;
        line.color = '#FF0000';

        await context.sync();

        console.log("The trendline color has been set to:" + line.color);
    }
'Excel.ColorScaleConditionalFormat#criteria:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:M5");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        let criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    }
'Excel.Comment#content:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Comments");
        let comment = sheet.comments.getItemAt(0);
        comment.content = "PLEASE add headers here.";
        await context.sync();
    }
'Excel.Comment#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        context.workbook.comments.getItemByCell("Comments!A2").delete();
        await context.sync();
    }
'Excel.CommentCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Comments");

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A2", "TODO: add data.");
        await context.sync();
    }
'Excel.CommentReply#content:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Comments");
        let comment = sheet.comments.getItemAt(0);
        let reply = comment.replies.getItemAt(0);
        reply.load("content");
        // Sync to load the content of the comment reply.
        await context.sync();

        // Append "Please!" to the end of the comment reply.
        reply.content += " Please!";
        await context.sync();
    }
'Excel.CommentReply#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        // Remove the first comment reply from this worksheet's first comment.
        let sheet = context.workbook.worksheets.getItem("Comments");
        let comment = sheet.comments.getItemAt(0);
        comment.replies.getItemAt(0).delete();
        await context.sync();
    }
'Excel.CommentReplyCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        // Adds a reply to the first comment in this worksheet.
        let sheet = context.workbook.worksheets.getItem("Comments");
        let comment = sheet.comments.getItemAt(0);
        comment.replies.add("Add content to this worksheet.");
        await context.sync();
    }
'Excel.CommentRichContent#mentions:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Comments");
        let mention = {
            email: "kakri@contoso.com",
            id: 0,
            name: "Kate Kristensen"
        };

        // This will tag the mention's name using the '@' syntax.
        // They will be notified via email.
        let commentBody = {
            mentions: [mention],
            richContent: '<at id="0">' + mention.name + "</at> -  Can you take a look?"
        };

        // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
        sheet.comments.add("A1", commentBody, Excel.ContentType.mention);
        await context.sync();
    }
'Excel.ConditionalCellValueRule#formula1:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B21:E23");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    }
'Excel.ConditionalCellValueRule#operator:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B21:E23");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        conditionalFormat.cellValue.format.font.color = "red";
        conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

        await context.sync();
    }
'Excel.ConditionalFormat#type:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let worksheetRange = sheet.getRange();
        worksheetRange.conditionalFormats.load("type");

        await context.sync();

        let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
        worksheetRange.conditionalFormats.items.forEach(item => {
            cfRangePairs.push({
                cf: item,
                range: item.getRange().load("address")
            });
        });

        await context.sync();

        if (cfRangePairs.length > 0) {
            cfRangePairs.forEach(item => {
                console.log(item.cf.type);
            });
        } else {
            console.log("No conditional formats applied.");
        }
    }
'Excel.ConditionalFormatCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:M5");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.colorScale);
        let criteria = {
            minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
            midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
            maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
        };
        conditionalFormat.colorScale.criteria = criteria;

        await context.sync();
    }
'Excel.ConditionalFormatCollection#clearAll:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange();
        range.conditionalFormats.clearAll();

        await context.sync();

        $(".conditional-formats").hide();
    }
'Excel.ConditionalFormatRule#formula:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    }
'Excel.ConditionalIconCriterion#formula:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        let iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    }
'Excel.ConditionalIconCriterion#operator:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        let iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    }
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B16:D18");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    }
'Excel.ConditionalIconCriterion#type:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        let iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    }
'Excel.ConditionalPresetCriteriaRule#criterion:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:M5");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    }
'Excel.ConditionalTextComparisonRule#text:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B16:D18");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    }
'Excel.CustomConditionalFormat#format:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    }
'Excel.CustomXmlPart#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let settings = context.workbook.settings;
        let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            let xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                let readableXml = addLineBreaksToXML(xmlBlob.value);
                let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    }
'Excel.CustomXmlPart#getXml:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        let customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        let xmlBlob = customXmlPart.getXml();

        await context.sync();

        let readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        let settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    }
'Excel.CustomXmlPart#id:member':
  - |-
    async function main(context: Excel.RequestContext) {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        let customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        let xmlBlob = customXmlPart.getXml();

        await context.sync();

        let readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        let settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    }
'Excel.CustomXmlPart#setXml:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let settings = context.workbook.settings;
        let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

            // The setXml method does a whole-for-whole replacement 
            // of the entire XML.
            customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
            let xmlBlob = customXmlPart.getXml();
            await context.sync();

            let readableXml = addLineBreaksToXML(xmlBlob.value);
            $("#display-xml").text(readableXml);
            await context.sync();
        }
    }
'Excel.CustomXmlPartCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        // You must have the xmlns attribute to populate the 
        // CustomXml.namespaceUri property.
        let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
        let customXmlPart = context.workbook.customXmlParts.add(originalXml);
        customXmlPart.load("id");
        let xmlBlob = customXmlPart.getXml();

        await context.sync();

        let readableXml = addLineBreaksToXML(xmlBlob.value);
        $("#display-xml").text(readableXml);

        // Store the XML part's ID in a setting.
        let settings = context.workbook.settings;
        settings.add("ContosoReviewXmlPartId", customXmlPart.id);

        await context.sync();
    }
'Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let settings = context.workbook.settings;
        let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
        await context.sync();

        if (xmlPartIDSetting.value) {   
            let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
            let xmlBlob = customXmlPart.getXml();
            customXmlPart.delete();
            customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

            await context.sync();

            if (customXmlPart.isNullObject) {
                $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                // Delete the unneeded setting too.
                xmlPartIDSetting.delete();            
            } else {
                let readableXml = addLineBreaksToXML(xmlBlob.value);
                let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                $("#display-xml").text(strangeMessage);
            }

            await context.sync();
        }
    }
'Excel.DataBarConditionalFormat#barDirection:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.dataBar);
        conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

        await context.sync();
    }
'Excel.DataPivotHierarchy#name:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
        dataHierarchies.load("no-properties-needed");
        await context.sync();

        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
        await context.sync();
    }
'Excel.DataPivotHierarchy#showAs:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        let farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
        let wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the crates of each fruit type sold at the farm as a percentage of the column's total
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    }
'Excel.DataValidation#errorAlert:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Decision");
        let commentsRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        commentsRange.dataValidation.clear();   

        // If the value of A2 is contained in the value of C2, then 
        // SEARCH(A2,C2) returns the number where it begins. Otherwise,
        // it does not return a number.
        let redundantStringRule = {
            custom: {
                formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
            }
        };
        commentsRange.dataValidation.rule = redundantStringRule;
        commentsRange.dataValidation.errorAlert = {
            message: "It is redundant to include the baby name in the comment.",
            showAlert: true,
            style: "Information",
            title: "Baby Name in Comment"
        };

        await context.sync();
    }
'Excel.DataValidation#prompt:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Decision");
        let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    }
'Excel.DataValidation#rule:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Decision");
        let nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    }
'Excel.DataValidationRule#list:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Decision");
        let nameRange = 
            sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        nameRange.dataValidation.clear();

        let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        let approvedListRule = {
            list: {
                inCellDropDown: true,
                source: nameSourceRange
            }
        };
        nameRange.dataValidation.rule = approvedListRule;

        await context.sync();
    }
'Excel.DataValidationRule#wholeNumber:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Decision");
        let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

        // When you are developing, it is a good practice to
        // clear the dataValidation object with each run of your code.
        rankingRange.dataValidation.clear();

        let greaterThanZeroRule = {
            wholeNumber: {
                formula1: 0,
                operator: Excel.DataValidationOperator.greaterThan
            }
        };
        rankingRange.dataValidation.rule = greaterThanZeroRule;

        rankingRange.dataValidation.prompt = {
            message: "Please enter a positive number.",
            showPrompt: true,
            title: "Positive numbers only."
        };

        rankingRange.dataValidation.errorAlert = {
            message: "Sorry, only positive numbers are allowed",
            showAlert: true,
            style: "Stop",
            title: "Negative Number Entered"
        };

        await context.sync();
    }
'Excel.IconSetConditionalFormat#criteria:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        let iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    }
'Excel.IconSetConditionalFormat#style:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.iconSet);
        let iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
            The iconSetCF.criteria array is automatically prepopulated with
            criterion elements whose properties have been given default settings.
            You can't write to each property of a criterion directly. Instead,
            replace the whole criteria object.

            With a "three*" icon set style, such as "threeTriangles", the third
            element in the criteria array (criteria[2]) defines the "top" icon;
            e.g., a green triangle. The second (criteria[1]) defines the "middle"
            icon, The first (criteria[0]) defines the "low" icon, but it
            can often be left empty as this method does below, because every
            cell that does not match the other two criteria always gets the low
            icon.            
        */
        iconSetCF.criteria = [
            {} as any,
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=700"
            },
            {
                type: Excel.ConditionalFormatIconRuleType.number,
                operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                formula: "=1000",
            }
        ];

        await context.sync();
    }
'Excel.Image#format:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let image = sheet.shapes.getItem("Image").image;
        image.load("format");
        await context.sync();

        console.log("The image's format is: " + image.format);
        await context.sync();
    }
'Excel.Line#connectBeginShape:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    }
'Excel.Line#connectEndShape:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.getItem("StraightLine").line;
        line.connectBeginShape(shapes.getItem("Left"), 2);
        line.connectEndShape(shapes.getItem("Right"), 0);
        await context.sync();
    }
'Excel.Line#disconnectBeginShape:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    }
'Excel.Line#disconnectEndShape:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.getItem("StraightLine").line;
        line.disconnectBeginShape();
        line.disconnectEndShape();
        await context.sync();
    }
'Excel.NamedItem#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let totalName = sheet.names.getItemOrNullObject("TotalAmount");
        totalName.load();
        await context.sync();

        if (totalName.value) {
            totalName.delete();

            // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
            sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
        } else {
            console.log("No named item created for the formula.");
        }

        await context.sync();
    }
'Excel.NamedItem#formula:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        // Get the named item
        let myNamedItem = sheet.names.getItemOrNullObject("MyRange");
        myNamedItem.load("name, formula");
        await context.sync();

        if (myNamedItem.isNullObject) {
            console.log(`There is no named item. Create it with "Add named item for a range" first.`);
        } else {                    
            // Update named item to point to the second range
            myNamedItem.formula = "=Sample!$B$10:$D$14";
            sheet.getRange("B10:D14").select();
            await context.sync();

            console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
        }
    }
'Excel.NamedItemCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let headerRange = sheet.getRange("A1:D1");

        sheet.names.add("ExpensesHeader", headerRange);
        let namedItems = sheet.names.load("name, type");

        await context.sync();
    }
'Excel.PageBreakCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.horizontalPageBreaks.add("A21:E21");
        await context.sync();
    }
'Excel.PageLayout#centerHorizontally:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    }
'Excel.PageLayout#centerVertically:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.centerHorizontally = true;
        farmSheet.pageLayout.centerVertically = true;
        await context.sync();
    }
'Excel.PageLayout#orientation:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
        await context.sync();
    }
'Excel.PageLayout#setPrintArea:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintArea("A1:D41");
        await context.sync();
    }
'Excel.PageLayout#setPrintTitleRows:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.setPrintTitleRows("$1:$1");
        await context.sync();
    }
'Excel.PageLayout#zoom:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let farmSheet = context.workbook.worksheets.getItem("Print");
        farmSheet.pageLayout.zoom = { scale: 200 };
        await context.sync();
    }
'Excel.PivotLayout#getDataBodyRange:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");

        // the layout controls the ranges used by the PivotTable
        let range = pivotTable.layout.getDataBodyRange();

        // get all the data hierarchy totals
        let grandTotalRange = range.getLastRow();
        grandTotalRange.load("address");
        await context.sync();
        
        // use the wholesale and farm sale totals to make a final sum
        let masterTotalRange = context.workbook.worksheets.getActiveWorksheet().getRange("B27:C27");
        masterTotalRange.formulas = [["All Crates", "=SUM(" + grandTotalRange.address + ")"]];
        await context.sync();
    }
'Excel.PivotTable#columnHierarchies:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

        // check if the PivotTable already has a column
        let column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
        column.load("id");
        await context.sync();

        if (column.isNullObject) {
            // ading the farm column to the column hierarchy automatically removes it from the row hierarchy
            pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
        } else {
            pivotTable.columnHierarchies.remove(column);
        }

        await context.sync();
    }
'Excel.PivotTable#dataHierarchies:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
        pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

        await context.sync();
    }
'Excel.PivotTable#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

        await context.sync();
    }
'Excel.PivotTable#filterHierarchies:member':
  - |-
    async function filter(functionType: Excel.AggregationFunction) {
        async function main(context: Excel.RequestContext) {
            let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
            let filters = pivotTable.filterHierarchies;
            let filter = filters.getItemOrNullObject("Classification");
            filter.load();
            await context.sync();

            // add the Classification hierarchy to the filter, if it's not already there
            if (filter.isNullObject) {
                filters.add(pivotTable.hierarchies.getItem("Classification"));
                await context.sync();
            }
        }
    }
'Excel.PivotTable#layout:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        pivotTable.layout.load("layoutType");
        await context.sync();

        // cycle between the three layout types
        if (pivotTable.layout.layoutType === "Compact") {
            pivotTable.layout.layoutType = "Outline";
        } else if (pivotTable.layout.layoutType === "Outline") {
            pivotTable.layout.layoutType = "Tabular";
        } else {
            pivotTable.layout.layoutType = "Compact";
        }
        await context.sync();
        console.log("Pivot layout is now " + pivotTable.layout.layoutType);
    }
'Excel.PivotTableCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
        let rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
        context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

        await context.sync();
    }
'Excel.PresetCriteriaConditionalFormat#rule:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:M5");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.presetCriteria);
        conditionalFormat.preset.format.font.color = "white";
        conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

        await context.sync();
    }
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B8:E13");
        let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
        conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
        conditionalFormat.custom.format.font.color = "green";

        await context.sync();
    }
'Excel.Range#autoFill:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let sumCell = sheet.getRange("P4");
      
      // Copy everything. The formulas will be contextually updated based on their new locations.
      sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
      sumCell.format.autofitColumns();
      await context.sync();
    }
'Excel.Range#copyFrom:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        sheet.getRange("F2").values = [["Copied Formula"]];
        sheet.getRange("F2").format.autofitColumns();

        // copy a range preserving the formulas
        // note: non-formula values are copied over as is
        sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
        await context.sync();
    }
'Excel.Range#findOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let table = sheet.tables.getItem("ExpensesTable");
        let searchRange = table.getRange();
        let foundRange = searchRange.findOrNullObject($("#searchText").text(), {
            completeMatch: isCompleteMatchToggle,
            matchCase: isMatchCaseToggle,
            searchDirection: searchDirectionToggle
        });
        
        foundRange.load("address");
        await context.sync();

        if (foundRange.isNullObject) {
            console.log("Text not found");
        } else {
            console.log(foundRange.address);
        }
    }
'Excel.Range#getIntersectionOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = salesTable.getDataBodyRange();

        // We want the most recent quarter that has data, so
        // exclude quarters without data and get the last of
        // the remaining columns.
        let usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
        let currentQuarterRange = usedDataRange.getLastColumn();

        // Asian and European teams have separate contests.
        let asianSalesRange = sheet.getRange("A2:E4");
        let europeanSalesRange = sheet.getRange("A5:E7");

        // The data for each chart is the intersection of the
        // current quarter column and the rows for the continent.
        let asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
        let europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

        // Must sync before you can test the output of *OrNullObject
        // method/property.
        await context.sync();

        if (asianContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("Asian");
        } else {
            createContinentChart(
                sheet,
                "Asian",
                asianContestRange,
                "A9",
                "F24"
            );
        }

        if (europeanContestRange.isNullObject) {
            // See the declaration of this method for how to
            // test this code path.
            reportMissingData("European");
        } else {
            createContinentChart(
                sheet,
                "European",
                europeanContestRange,
                "A25",
                "F40"
            );
        }

        await context.sync();
    }
'Excel.Range#getUsedRangeOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let salesTable = sheet.tables.getItem("SalesTable");
        let dataRange = salesTable.getDataBodyRange();

        // Pass true so only cells with values count as used
        let usedDataRange = dataRange.getUsedRangeOrNullObject(
            true /* valuesOnly */
        );

        //Must sync before reading value returned from *OrNullObject method/property.
        await context.sync();

        if (usedDataRange.isNullObject) {
            console.log("Need Data to Make Chart");
            console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
        } else {
            let chart = sheet.charts.add(
                Excel.ChartType.columnClustered,
                dataRange,
                "Columns"
            );
            chart.setPosition("A15", "F30");
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "Right";
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
        }

        await context.sync();
    }
'Excel.Range#group:member(1)':
  - |-
    Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // Group the larger, main level. Note that the outline controls
        // will be on row 10, meaning 4-9 will collapse and expand.
        sheet.getRange("4:9").group(Excel.GroupOption.byRows);

        // Group the smaller, sublevels. Note that the outline controls
        // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
        sheet.getRange("4:5").group(Excel.GroupOption.byRows);
        sheet.getRange("7:8").group(Excel.GroupOption.byRows);
        await context.sync();
    }
'Excel.Range#hyperlink:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    }
'Excel.Range#removeDuplicates:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:D11");

        let deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    }
'Excel.Range#sort:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        let range = sheet.getRange("A1:E5");

        // Find the column header that provides the sort criteria.
        let header = range.find(criteria, {});
        header.load("columnIndex");
        await context.sync();

        range.sort.apply(
            [
                {
                    key: header.columnIndex,
                    sortOn: Excel.SortOn.value
                }
            ],
            false /*matchCase*/,
            true /*hasHeaders*/,
            Excel.SortOrientation.rows
        );
        await context.sync();
    }
'Excel.Range#style:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    }
'Excel.Range#ungroup:member(1)':
  - |-
    Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        
        // This removes two levels of groups from the "A1-R10" range.
        // Any groups at the same level on the same dimension will be removed by a single call.
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
        await context.sync();
    }
'Excel.RangeAreas#format:member':
  - |-
    async function main(context: Excel.RequestContext) {

        let sheet = context.workbook.worksheets.getActiveWorksheet();
        let usedRange = sheet.getUsedRange();

        // Find the ranges with formulas.
        let formulaRanges = usedRange.getSpecialCells("Formulas");
        formulaRanges.format.fill.color = "lightgreen";

        await context.sync();
    }
'Excel.RangeFormat#textOrientation:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:E2");

        // Set textOrientation to either an integer between -90 and 90
        // or to 180 for vertically-oriented text.
        range.format.textOrientation = 90;

        await context.sync();
    }
'Excel.RangeHyperlink#address:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    }
'Excel.RangeHyperlink#documentReference:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A9:A11");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a location within the workbook
        // for each product name in the second table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Navigate to the '" + cellText + "' worksheet",
                documentReference: cellText + "!A1"
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    }
'Excel.RangeHyperlink#screenTip:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    }
'Excel.RangeHyperlink#textToDisplay:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Orders");

        let productsRange = sheet.getRange("A3:A5");
        productsRange.load("values");

        await context.sync();

        // Create a hyperlink to a URL 
        // for each product name in the first table.
        for (let i = 0; i < productsRange.values.length; i++) {
            let cellRange = productsRange.getCell(i, 0);
            let cellText = productsRange.values[i][0];

            let hyperlink = {
                textToDisplay: cellText,
                screenTip: "Search Bing for '" + cellText + "'",
                address: "https://www.bing.com?q=" + cellText
            }
            cellRange.hyperlink = hyperlink;
        }

        await context.sync();
    }
'Excel.RemoveDuplicatesResult#uniqueRemaining:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B2:D11");

        let deleteResult = range.removeDuplicates([0],true);    
        deleteResult.load();    
        await context.sync();

        console.log(deleteResult.removed + " entries with duplicate names removed.");
        console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
    }
'Excel.Setting#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    }
'Excel.SettingCollection#getItemOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let settings = context.workbook.settings;
        let needsReview = settings.getItem("NeedsReview");
        needsReview.delete();
        needsReview = settings.getItemOrNullObject("NeedsReview");

        await context.sync();

        if (needsReview.isNullObject) {
            console.log("The setting has been deleted");
        } else {
            console.log("The setting was not deleted");
        }

        await context.sync();
    }
'Excel.Shape#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        context.workbook.worksheets.getItemOrNullObject("Shapes").delete();
        let sheet = context.workbook.worksheets.add("Shapes");

        let shapes = sheet.shapes;

        // load all the shapes in the collection without loading their properties
        shapes.load("items/$none");
        await context.sync();

        shapes.items.forEach((shape) => shape.delete());
        await context.sync();
    }
'Excel.Shape#fill:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.smileyFace);
        shape.left = 300;
        shape.top = 100;
        shape.height = 100;
        shape.width = 100;
        shape.fill.foregroundColor = "yellow"
        await context.sync();
    }
'Excel.Shape#getAsImage:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Image");
        let result = shape.getAsImage(Excel.PictureFormat.png);
        await context.sync();

        let imageString = result.value;
        // Your add-in would save this string as a .png file.
        console.log("The image's base64-encoded string: " + imageString);
    }
'Excel.Shape#group:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");

        let shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    }
'Excel.Shape#incrementLeft:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Square")
        shape.incrementLeft(-25);
        await context.sync();
    }
'Excel.Shape#incrementRotation:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Image");
        shape.incrementRotation(180);
        await context.sync();
    }
'Excel.Shape#incrementTop:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Pentagon")
        shape.incrementTop(25);
        await context.sync();
    }
'Excel.Shape#line:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.getItem("StraightLine").line;
        line.beginArrowheadLength = Excel.ArrowheadLength.long;
        line.beginArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.beginArrowheadStyle = Excel.ArrowheadStyle.oval;

        line.endArrowheadLength = Excel.ArrowheadLength.long;
        line.endArrowheadWidth = Excel.ArrowheadWidth.wide;
        line.endArrowheadStyle = Excel.ArrowheadStyle.triangle;

        await context.sync();
    }
'Excel.Shape#lockAspectRatio:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    }
'Excel.Shape#rotation:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.triangle);
        shape.left = 100;
        shape.top = 300;
        shape.height = 150;
        shape.width = 200;
        shape.rotation = 45;
        shape.fill.clear();
        await context.sync();
    }
'Excel.Shape#scaleHeight:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Octagon")
        shape.lockAspectRatio = true;
        shape.scaleHeight(1.25, Excel.ShapeScaleType.currentSize);
        await context.sync();
    }
'Excel.Shape#setZOrder:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.getItem("Octagon")
        shape.setZOrder(Excel.ShapeZOrder.sendBackward);
        await context.sync();
    }
'Excel.ShapeCollection#addGeometricShape:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let shape = sheet.shapes.addGeometricShape(Excel.GeometricShapeType.hexagon);
        shape.left = 5;
        shape.top = 5;
        shape.height = 175;
        shape.width = 200;
        await context.sync();
    }
'Excel.ShapeCollection#addGroup:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");
        let square = sheet.shapes.getItem("Square");
        let pentagon = sheet.shapes.getItem("Pentagon");
        let octagon = sheet.shapes.getItem("Octagon");

        let shapeGroup = sheet.shapes.addGroup([square, pentagon, octagon]);
        shapeGroup.name = "Group";
        console.log("Shapes grouped");

        await context.sync();
    }
'Excel.ShapeCollection#addImage:member(1)':
  - |-
    let myFile = <HTMLInputElement>document.getElementById("selectedFile");
    let reader = new FileReader();

    reader.onload = (event) => {
        Excel.run((context) => {
            let startIndex = reader.result.toString().indexOf("base64,");
            let mybase64 = reader.result.toString().substr(startIndex + 7);
            let sheet = context.workbook.worksheets.getItem("Shapes");
            let image = sheet.shapes.addImage(mybase64);
            image.name = "Image";
            return context.sync();
        });
    };

    // Read in the image file as a data URL.
    reader.readAsDataURL(myFile.files[0]);
'Excel.ShapeCollection#addLine:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let line = shapes.addLine(200, 50, 300, 150, Excel.ConnectorType.straight);
        line.name = "StraightLine";
        await context.sync();
    }
'Excel.ShapeCollection#addTextBox:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let textbox = shapes.addTextBox("A box with text");
        textbox.left = 100;
        textbox.top = 100;
        textbox.height = 20;
        textbox.width = 175;
        textbox.name = "Textbox";
        await context.sync();
    }
'Excel.ShapeGroup#ungroup:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Shapes");

        let shapeGroup = sheet.shapes.getItem("Group").group;
        shapeGroup.ungroup();
        console.log("Shapes ungrouped");

        await context.sync();
    }
'Excel.ShowAsRule#baseItem:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
        let farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
        let wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

        farmDataHierarchy.load("showAs");
        wholesaleDataHierarchy.load("showAs");
        await context.sync();

        // show the difference between crate sales of the "A Farms" and the other farms
        // this difference is both aggregated and shown for individual fruit types (where applicable)
        let farmShowAs = farmDataHierarchy.showAs;
        farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        farmDataHierarchy.showAs = farmShowAs;

        let wholesaleShowAs = wholesaleDataHierarchy.showAs;
        wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
        wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
        wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
        wholesaleDataHierarchy.showAs = wholesaleShowAs;
        await context.sync();
    }
'Excel.Slicer#clearFilters:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.clearFilters();
        await context.sync();
    }
'Excel.Slicer#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.slicers.getItemAt(0).delete();
        await context.sync();
    }
'Excel.Slicer#selectItems:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.selectItems(["Lemon", "Lime", "Orange"]);
        await context.sync();
    }
'Excel.Slicer#style:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let slicer = context.workbook.slicers.getItem("Fruit Slicer");
        slicer.style = "SlicerStyleLight6";
        await context.sync();
    }
'Excel.SlicerCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Pivot");
        let slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    }
'Excel.Style#delete:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");

        // Delete the diagonal orientation style from the style collection.
        // Styles are in the Home tab ribbon.
        style.delete();

        await context.sync();

        console.log("Successfully deleted the diagonal orientation style from the Home tab ribbon.");
    }
'Excel.Style#font:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let style = context.workbook.styles.getItem("Normal");
        style.font.load("bold, color, italic, name, size");
        style.fill.load("color");

        await context.sync();

        console.log("Bold: " + style.font.bold);
        console.log("Font color: " + style.font.color);
        console.log("Italic: " + style.font.italic);
        console.log("Name: " + style.font.name);
        console.log("Size: " + style.font.size);
        console.log("Fill color: " + style.fill.color);
    }
'Excel.Style#horizontalAlignment:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let worksheet = context.workbook.worksheets.getItem("Sample");
        let range = worksheet.getRange("A1:E1");

        // Apply built-in style. 
        // Styles are in the Home tab ribbon.
        range.style = Excel.BuiltInStyle.neutral;
        range.format.horizontalAlignment = "Right";

        await context.sync();
    }
'Excel.Style#load:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let style = context.workbook.styles.getItem("Diagonal Orientation Style");            
        style.load("textOrientation, horizontalAlignment, autoIndent, readingOrder, wrapText, includeProtection, shrinkToFit, locked");

        await context.sync();

        console.log("Orientation: " + style.textOrientation);
        console.log("Horizontal alignment: " + style.horizontalAlignment);
        console.log("Add indent: " + style.autoIndent);
        console.log("Reading order: " + style.readingOrder);
        console.log("Wrap text: " + style.wrapText);
        console.log("Include protection: " + style.includeProtection);
        console.log("Shrink to fit: " + style.shrinkToFit);
        console.log("Style locked: " + style.locked);
    }
'Excel.StyleCollection#add:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    }
'Excel.StyleCollection#getItem:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    }
'Excel.Table#sort:member':
  - |-
    // Get the current worksheet.
    let workbook = context.workbook;
    let worksheets = workbook.worksheets;
    let selectedSheet = worksheets.getActiveWorksheet();

    // Create a table with the used cells.
    let usedRange = selectedSheet.getUsedRange();
    let newTable = selectedSheet.tables.add(usedRange, true);

    // Sort the table using the first column.
    newTable.sort.apply([{ key: 0, ascending: true }]);
'Excel.TableSort#apply:member(1)':
  - |-
    // Get the current worksheet.
    let workbook = context.workbook;
    let worksheets = workbook.worksheets;
    let selectedSheet = worksheets.getActiveWorksheet();

    // Create a table with the used cells.
    let usedRange = selectedSheet.getUsedRange();
    let newTable = selectedSheet.tables.add(usedRange, true);

    // Sort the table using the first column.
    newTable.sort.apply([{ key: 0, ascending: true }]);
'Excel.TextConditionalFormat#format:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B16:D18");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    }
'Excel.TextConditionalFormat#rule:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let range = sheet.getRange("B16:D18");
        let conditionalFormat = range.conditionalFormats
            .add(Excel.ConditionalFormatType.containsText);
        conditionalFormat.textComparison.format.font.color = "red";
        conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

        await context.sync();
    }
'Excel.TextFrame#deleteText:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let shapes = context.workbook.worksheets.getItem("Shapes").shapes;
        let textbox = shapes.getItem("Textbox");
        textbox.textFrame.deleteText();
        await context.sync();
    }
'Excel.Workbook#getActiveCell:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {

        let myWorkbook = context.workbook;
        let activeCell = myWorkbook.getActiveCell();
        activeCell.load("address");

        await context.sync();
        
        console.log("The active cell is " + activeCell.address);
    }
'Excel.Workbook#getSelectedRanges:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {

        let selectedRanges = context.workbook.getSelectedRanges();
        selectedRanges.format.fill.color = "lightblue";

        await context.sync();
    })
'Excel.Workbook#properties:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let titleValue = "Excel document properties API";
        let subjectValue = "Set and get document properties";
        let keywordsValue = "Set and get operations";
        let commentsValue = "This is an Excel document properties API code sample";
        let categoryValue = "Office Add-ins";
        let managerValue = "John";
        let companyValue = "Microsoft";

        let docProperties = context.workbook.properties;

        // Set the writeable document properties.
        docProperties.title = titleValue;
        docProperties.subject = subjectValue;
        docProperties.keywords = keywordsValue;
        docProperties.comments = commentsValue;
        docProperties.category = categoryValue;
        docProperties.manager = managerValue;
        docProperties.company = companyValue;

        await context.sync();

        console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
    }
'Excel.Workbook#styles:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let styles = context.workbook.styles;

        // Add a new style to the style collection.
        // Styles is in the Home tab ribbon.
        styles.add("Diagonal Orientation Style");
              
        let newStyle = styles.getItem("Diagonal Orientation Style");
        
        // The "Diagonal Orientation Style" properties.
        newStyle.textOrientation = 38;
        newStyle.autoIndent = true;
        newStyle.includeProtection = true;
        newStyle.shrinkToFit = true;
        newStyle.locked = false;
        
        await context.sync();

        console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
    }
'Excel.WorkbookProtection#protect:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect();
        }
    }
  - |-
    let password = await passwordHandler();
    passwordHelper(password);
    async function main(context: Excel.RequestContext) {
        let workbook = context.workbook;
        workbook.load("protection/protected");

        await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect(password);
        }
    }
'Excel.WorkbookProtection#unprotect:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let workbook = context.workbook;
        workbook.protection.unprotect();
    }
  - |-
    let password = await passwordHandler();
    passwordHelper(password);
    async function main(context: Excel.RequestContext) {
        let workbook = context.workbook;
        workbook.protection.unprotect(password);
    }
'Excel.Worksheet#autoFilter:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        let farmData = sheet.getUsedRange();

        // This filter will only show the rows with the top 25% of values in column 3.
        sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
        await context.sync();
    }
'Excel.Worksheet#copy:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let myWorkbook = context.workbook;
        let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
        let copiedSheet = sampleSheet.copy("End")

        sampleSheet.load("name");
        copiedSheet.load("name");

        await context.sync();

        console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
    }
'Excel.Worksheet#findAllOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let foundRanges = sheet.findAllOrNullObject("Complete", {
            completeMatch: true,
            matchCase: false
        });

        await context.sync();

        if (foundRanges.isNullObject) {
            console.log("No complete projects");
        } else {
            foundRanges.format.fill.color = "green"
        }
    }
'Excel.Worksheet#getRanges:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {

        let sheet = context.workbook.worksheets.getActiveWorksheet();
        let specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
        specifiedRanges.format.fill.color = "pink";

        await context.sync();
    })
'Excel.Worksheet#showGridlines:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.showGridlines = true;

        await context.sync();
    }
'Excel.Worksheet#showOutlineLevels:member(1)':
  - |-
    Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getActiveWorksheet();

        // This collapses the entire outline.
        sheet.showOutlineLevels(1, 1);
        await context.sync();
    }
  - |-
    Excel.run(async (context) => {
        let sheet = context.workbook.worksheets.getActiveWorksheet();

        // This shows the top 3 outline levels; collapsing any additional sublevels.
        sheet.showOutlineLevels(3, 3);
        await context.sync();
    }
'Excel.Worksheet#slicers:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Pivot");
        let slicer = sheet.slicers.add(
            "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
            "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
        );
        slicer.name = "Fruit Slicer";
        await context.sync();
    }
'Excel.Worksheet#tabColor:member':
  - |-
    async function main(context: Excel.RequestContext) {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.tabColor = "#FF0000";

        await context.sync();
    }
'Excel.WorksheetCollection#getFirst:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        let firstSheet = sheets.getFirst().getNext();
        let lastSheet = sheets.getLast();
        let firstTaxRateRange = firstSheet.getRange("B2");
        let lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    }
'Excel.WorksheetCollection#getLast:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheets = context.workbook.worksheets;

        // We don't want to include the default worksheet that was created
        // when the workbook was created, so our "firstSheet" will be the one
        // after the literal first. Note chaining of navigation methods.
        let firstSheet = sheets.getFirst().getNext();
        let lastSheet = sheets.getLast();
        let firstTaxRateRange = firstSheet.getRange("B2");
        let lastTaxRateRange = lastSheet.getRange("B2");

        firstSheet.load("name");
        lastSheet.load("name");
        firstTaxRateRange.load("text");
        lastTaxRateRange.load("text");

        await context.sync();

        let firstYear = firstSheet.name.substr(5, 4);
        let lastYear = lastSheet.name.substr(5, 4);
        console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

        await context.sync();
    }
'Excel.WorksheetFreezePanes#freezeAt:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the specified range in top-and-left-most pane of the worksheet.
        sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

        await context.sync();
    }
'Excel.WorksheetFreezePanes#freezeColumns:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the first two columns in the worksheet.
        sheet.freezePanes.freezeColumns(2);

        await context.sync();
    }
'Excel.WorksheetFreezePanes#freezeRows:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");

        // Freeze the top two rows in the worksheet.
        sheet.freezePanes.freezeRows(2);

        await context.sync();
    }
'Excel.WorksheetFreezePanes#getLocationOrNullObject:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        let frozenRange = sheet.freezePanes.getLocationOrNullObject();
        frozenRange.load("address");

        await context.sync();

        if (frozenRange.isNullObject) {
            console.log(`The worksheet does not contain a frozen pane.`);
        } else {
            console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
        }
    }
'Excel.WorksheetFreezePanes#unfreeze:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let sheet = context.workbook.worksheets.getItem("Sample");
        sheet.freezePanes.unfreeze();

        await context.sync();
    }
'Excel.WorksheetProtection#protect:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.load("protection/protected");

        await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect();
        }
    }
'Excel.WorksheetProtection#unprotect:member(1)':
  - |-
    async function main(context: Excel.RequestContext) {
        let activeSheet = context.workbook.worksheets.getActiveWorksheet();
        activeSheet.protection.unprotect();
    }
