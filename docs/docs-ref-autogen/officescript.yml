### YamlMime:TSPackage
uid: OfficeScript!
name: OfficeScript
type: package
summary: ''
interfaces:
  - OfficeScript!OfficeScript.EmailAttachment:interface
  - OfficeScript!OfficeScript.MailProperties:interface
enums:
  - OfficeScript!OfficeScript.EmailContentType:enum
  - OfficeScript!OfficeScript.EmailImportance:enum
functions:
  - name: OfficeScript.convertToPdf()
    uid: OfficeScript!OfficeScript.convertToPdf:function(1)
    package: OfficeScript!
    summary: >-
      Return the text encoding of the document as a PDF. If the document is
      empty, then the following error is shown: "We didn't find anything to
      print". Some actions made prior to using this API may not be captured in
      the PDF in Excel on the web.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function convertToPdf(): string;'
      return:
        type: string
        description: |-
          The content of the workbook as a string, in PDF format.

          #### Examples

          ```TypeScript
          /**
           * This script saves a worksheet as a PDF and emails that PDF to a recipient.
           */
          function main(workbook: ExcelScript.Workbook) {    
              // Create the PDF.
              const pdfObject = OfficeScript.convertToPdf();
              const pdfFile = { name: "report.pdf", content: pdfObject }; // Enter your desired PDF name here.

              // Email the PDF.
              OfficeScript.sendMail({
                  to: "name@email.com", // Enter your recipient email address here.
                  subject: "[Demo] Monthly Sales Report", // This is the subject of your email.
                  content: "Here's the Monthly Sales Report", // This is the content within your email.
                  attachments: [pdfFile]
              })    
          }
          ```
  - name: "OfficeScript.downloadFile({\r\n        name,\r\n        content,\r\n    })"
    uid: OfficeScript!OfficeScript.downloadFile:function(1)
    package: OfficeScript!
    summary: >-
      Downloads a specified file to the default download location specified by
      the local machine.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: |-
        export function downloadFile({
                name,
                content,
            }: {
                name: string;
                content: string;
            }): void;
      parameters:
        - id: "{\r\n        name,\r\n        content,\r\n    }"
          description: ''
          type: |-
            {
                    name: string;
                    content: string;
                }
      return:
        type: void
        description: ''
  - name: OfficeScript.Metadata.getScriptName()
    uid: OfficeScript!OfficeScript.Metadata.getScriptName:function(1)
    package: OfficeScript!
    summary: Get the name of the currently running script.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function getScriptName(): string;'
      return:
        type: string
        description: ''
  - name: OfficeScript.saveCopyAs(filename)
    uid: OfficeScript!OfficeScript.saveCopyAs:function(1)
    package: OfficeScript!
    summary: >-
      Saves a copy of the current workbook in OneDrive, in the same directory as
      the original file, with the specified file name. The API has a timeout
      limit of 30 seconds. This limit is rarely exceeded. Note: Timeout doesn't
      necessarily indicate that the API failed. The workbook copy may still be
      created, but after the timeout limit this API does not return a success or
      failure message.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function saveCopyAs(filename: string): void;'
      parameters:
        - id: filename
          description: >-
            The file name of the copied and saved file. The file name must end
            with ".xlsx".
          type: string
      return:
        type: void
        description: ''
  - name: OfficeScript.sendMail(mailProperties)
    uid: OfficeScript!OfficeScript.sendMail:function(1)
    package: OfficeScript!
    summary: >-
      Send an email with an Office Script. Use `MailProperties` to specify the
      content and recipients of the email. If the request body includes content,
      this method returns 400 Bad request.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function sendMail(mailProperties: MailProperties): void;'
      parameters:
        - id: mailProperties
          description: ''
          type: <xref uid="OfficeScript!OfficeScript.MailProperties:interface" />
      return:
        type: void
        description: ''
