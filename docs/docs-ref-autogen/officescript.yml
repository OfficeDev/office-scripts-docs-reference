### YamlMime:TSPackage
uid: OfficeScript!
name: OfficeScript
type: package
summary: ''
interfaces:
  - OfficeScript!OfficeScript.EmailAttachment:interface
  - OfficeScript!OfficeScript.FileProperties:interface
  - OfficeScript!OfficeScript.MailProperties:interface
enums:
  - OfficeScript!OfficeScript.EmailContentType:enum
  - OfficeScript!OfficeScript.EmailImportance:enum
functions:
  - name: OfficeScript.convertToPdf()
    uid: OfficeScript!OfficeScript.convertToPdf:function(1)
    package: OfficeScript!
    summary: >-
      Converts the document to a PDF and returns the text encoding of it. Note:
      Recent changes made to the workbook in Excel on the web, through Office
      Scripts or the Excel UI, may not be captured in the PDF. This API is in
      preview and may change based on feedback. Do not use this API in a
      production environment.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function convertToPdf(): string;'
      return:
        type: string
        description: >-
          The content of the workbook as a string, in PDF format.


          **Throws**: `ConvertToPdfEmptyWorkbook` The error thrown if the
          document is empty.


          **Throws**: `ConvertToPdfProtectedWorkbook` The error thrown if
          the document is protected.


          **Throws**: `ExternalApiTimeout` The error thrown if the API
          reaches the timeout limit of 30 seconds.


          #### Examples


          ```TypeScript

          /**
           * This script saves a worksheet as a PDF and emails that PDF to a recipient.
           */
          function main(workbook: ExcelScript.Workbook) {    
              // Create the PDF.
              const pdfObject = OfficeScript.convertToPdf();
              const pdfFile = { name: "report.pdf", content: pdfObject }; // Enter your desired PDF name here.

              // Email the PDF.
              OfficeScript.sendMail({
                  to: "name@email.com", // Enter your recipient email address here.
                  subject: "[Demo] Monthly Sales Report", // This is the subject of your email.
                  content: "Here's the Monthly Sales Report", // This is the content within your email.
                  attachments: [pdfFile]
              })    
          }

          ```
  - name: OfficeScript.downloadFile(fileProperties)
    uid: OfficeScript!OfficeScript.downloadFile:function(1)
    package: OfficeScript!
    summary: >-
      Downloads a specified file to the default download location specified by
      the local machine. This API is in preview and may change based on
      feedback. Do not use this API in a production environment.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function downloadFile(fileProperties: FileProperties): void;'
      parameters:
        - id: fileProperties
          description: >-
            The file to download.


            **Throws**: `DownloadFileNameMissing` The error thrown if the
            name is empty.


            **Throws**: `DownloadFileContentMissing` The error thrown if the
            content is empty.


            **Throws**: `DownloadFileInvalidExtension` The error thrown if
            the file name extension is not ".txt" or ".pdf".


            **Throws**: `ExternalApiTimeout` The error thrown if the API
            reaches the timeout limit of 30 seconds.
          type: <xref uid="OfficeScript!OfficeScript.FileProperties:interface" />
      return:
        type: void
        description: ''
  - name: OfficeScript.Metadata.getScriptName()
    uid: OfficeScript!OfficeScript.Metadata.getScriptName:function(1)
    package: OfficeScript!
    summary: >-
      Get the name of the currently running script. This API is in preview and
      may change based on feedback. Do not use this API in a production
      environment.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function getScriptName(): string;'
      return:
        type: string
        description: ''
  - name: OfficeScript.saveCopyAs(filename)
    uid: OfficeScript!OfficeScript.saveCopyAs:function(1)
    package: OfficeScript!
    summary: >-
      Saves a copy of the current workbook in OneDrive, in the same directory as
      the original file, with the specified file name. This API is in preview
      and may change based on feedback. Do not use this API in a production
      environment.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function saveCopyAs(filename: string): void;'
      parameters:
        - id: filename
          description: >-
            The file name of the copied and saved file. The file name must end
            with ".xlsx".


            **Throws**: `InvalidExtensionError` The error thrown if the file
            name doesn't end with ".xlsx".


            **Throws**: `SaveCopyAsFileMayAlreadyExistError` The error
            thrown if the file name of the copy already exists.


            **Throws**: `SaveCopyAsErrorInvalidCharacters` The error thrown
            if the file name contains invalid characters.


            **Throws**: `SaveCopyAsFileNotOnOneDriveError` The error thrown
            if the document is not saved to OneDrive.


            **Throws**: `ExternalApiTimeout` The error thrown if the API
            reaches the timeout limit of 30 seconds. Note that the copy may
            still be created.
          type: string
      return:
        type: void
        description: ''
  - name: OfficeScript.sendMail(mailProperties)
    uid: OfficeScript!OfficeScript.sendMail:function(1)
    package: OfficeScript!
    summary: >-
      Send an email with an Office Script. Use `MailProperties` to specify the
      content and recipients of the email. This API is in preview and may change
      based on feedback. Do not use this API in a production environment.
    remarks: ''

    isPreview: true
    isDeprecated: false
    syntax:
      content: 'export function sendMail(mailProperties: MailProperties): void;'
      parameters:
        - id: mailProperties
          description: ''
          type: <xref uid="OfficeScript!OfficeScript.MailProperties:interface" />
      return:
        type: void
        description: ''
