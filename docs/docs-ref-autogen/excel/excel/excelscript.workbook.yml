### YamlMime:UniversalReference
items:
  - uid: 'excel!ExcelScript.Workbook:interface'
    summary: >-
      Workbook is the top level object which contains related workbook objects such as worksheets, tables, ranges, etc.
      To learn more about the workbook object model, read [Work with workbooks using the Excel JavaScript
      API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)<!-- -->.
    name: ExcelScript.Workbook
    fullName: ExcelScript.Workbook
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!ExcelScript.Workbook#addBinding:member(1)'
      - 'excel!ExcelScript.Workbook#addBindingFromNamedItem:member(1)'
      - 'excel!ExcelScript.Workbook#addBindingFromSelection:member(1)'
      - 'excel!ExcelScript.Workbook#addComment:member(1)'
      - 'excel!ExcelScript.Workbook#addCustomXmlPart:member(1)'
      - 'excel!ExcelScript.Workbook#addNamedItem:member(1)'
      - 'excel!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)'
      - 'excel!ExcelScript.Workbook#addPivotTable:member(1)'
      - 'excel!ExcelScript.Workbook#addPivotTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#addPredefinedCellStyle:member(1)'
      - 'excel!ExcelScript.Workbook#addSetting:member(1)'
      - 'excel!ExcelScript.Workbook#addSlicer:member(1)'
      - 'excel!ExcelScript.Workbook#addSlicerStyle:member(1)'
      - 'excel!ExcelScript.Workbook#addTable:member(1)'
      - 'excel!ExcelScript.Workbook#addTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#addTimelineStyle:member(1)'
      - 'excel!ExcelScript.Workbook#addWorksheet:member(1)'
      - 'excel!ExcelScript.Workbook#getActiveCell:member(1)'
      - 'excel!ExcelScript.Workbook#getActiveChart:member(1)'
      - 'excel!ExcelScript.Workbook#getActiveSlicer:member(1)'
      - 'excel!ExcelScript.Workbook#getActiveWorksheet:member(1)'
      - 'excel!ExcelScript.Workbook#getApplication:member(1)'
      - 'excel!ExcelScript.Workbook#getAutoSave:member(1)'
      - 'excel!ExcelScript.Workbook#getBinding:member(1)'
      - 'excel!ExcelScript.Workbook#getBindings:member(1)'
      - 'excel!ExcelScript.Workbook#getCalculationEngineVersion:member(1)'
      - 'excel!ExcelScript.Workbook#getChartDataPointTrack:member(1)'
      - 'excel!ExcelScript.Workbook#getComment:member(1)'
      - 'excel!ExcelScript.Workbook#getCommentByCell:member(1)'
      - 'excel!ExcelScript.Workbook#getCommentByReplyId:member(1)'
      - 'excel!ExcelScript.Workbook#getComments:member(1)'
      - 'excel!ExcelScript.Workbook#getCustomXmlPart:member(1)'
      - 'excel!ExcelScript.Workbook#getCustomXmlParts:member(1)'
      - 'excel!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getDefaultTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getFirstWorksheet:member(1)'
      - 'excel!ExcelScript.Workbook#getIsDirty:member(1)'
      - 'excel!ExcelScript.Workbook#getLastWorksheet:member(1)'
      - 'excel!ExcelScript.Workbook#getName:member(1)'
      - 'excel!ExcelScript.Workbook#getNamedItem:member(1)'
      - 'excel!ExcelScript.Workbook#getNames:member(1)'
      - 'excel!ExcelScript.Workbook#getPivotTable:member(1)'
      - 'excel!ExcelScript.Workbook#getPivotTables:member(1)'
      - 'excel!ExcelScript.Workbook#getPivotTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getPivotTableStyles:member(1)'
      - 'excel!ExcelScript.Workbook#getPredefinedCellStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getPredefinedCellStyles:member(1)'
      - 'excel!ExcelScript.Workbook#getPreviouslySaved:member(1)'
      - 'excel!ExcelScript.Workbook#getProperties:member(1)'
      - 'excel!ExcelScript.Workbook#getProtection:member(1)'
      - 'excel!ExcelScript.Workbook#getReadOnly:member(1)'
      - 'excel!ExcelScript.Workbook#getSelectedRange:member(1)'
      - 'excel!ExcelScript.Workbook#getSelectedRanges:member(1)'
      - 'excel!ExcelScript.Workbook#getSetting:member(1)'
      - 'excel!ExcelScript.Workbook#getSettings:member(1)'
      - 'excel!ExcelScript.Workbook#getSlicer:member(1)'
      - 'excel!ExcelScript.Workbook#getSlicers:member(1)'
      - 'excel!ExcelScript.Workbook#getSlicerStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getSlicerStyles:member(1)'
      - 'excel!ExcelScript.Workbook#getTable:member(1)'
      - 'excel!ExcelScript.Workbook#getTables:member(1)'
      - 'excel!ExcelScript.Workbook#getTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getTableStyles:member(1)'
      - 'excel!ExcelScript.Workbook#getTimelineStyle:member(1)'
      - 'excel!ExcelScript.Workbook#getTimelineStyles:member(1)'
      - 'excel!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)'
      - 'excel!ExcelScript.Workbook#getWorksheet:member(1)'
      - 'excel!ExcelScript.Workbook#getWorksheets:member(1)'
      - 'excel!ExcelScript.Workbook#refreshAllDataConnections:member(1)'
      - 'excel!ExcelScript.Workbook#refreshAllPivotTables:member(1)'
      - 'excel!ExcelScript.Workbook#setChartDataPointTrack:member(1)'
      - 'excel!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)'
      - 'excel!ExcelScript.Workbook#setDefaultTableStyle:member(1)'
      - 'excel!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)'
      - 'excel!ExcelScript.Workbook#setIsDirty:member(1)'
      - 'excel!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)'
  - uid: 'excel!ExcelScript.Workbook#addBinding:member(1)'
    summary: Add a new binding to a particular Range.
    name: 'addBinding(range, bindingType, id)'
    fullName: 'addBinding(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addBinding(
                    range: Range | string,
                    bindingType: BindingType,
                    id: string
                ): Binding;
      return:
        type:
          - 'excel!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full
            address, including the sheet name
          type:
            - 'excel!ExcelScript.Workbook#addBinding~0:complex'
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel!ExcelScript.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addBindingFromNamedItem:member(1)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      "InvalidReference" error will be returned.
    name: 'addBindingFromNamedItem(name, bindingType, id)'
    fullName: 'addBindingFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addBindingFromNamedItem(
                    name: string,
                    bindingType: BindingType,
                    id: string
                ): Binding;
      return:
        type:
          - 'excel!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: name
          description: Name from which to create binding.
          type:
            - string
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel!ExcelScript.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addBindingFromSelection:member(1)'
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the "InvalidReference"
      error will be returned.
    name: 'addBindingFromSelection(bindingType, id)'
    fullName: 'addBindingFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
      return:
        type:
          - 'excel!ExcelScript.Binding:interface'
        description: ''
      parameters:
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel!ExcelScript.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addComment:member(1)'
    summary: >-
      Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the
      provided range is larger than one cell.
    name: 'addComment(cellAddress, content, contentType)'
    fullName: 'addComment(cellAddress, content, contentType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addComment(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType
                ): Comment;
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: >-
            The cell to which the comment is added. This can be a Range object or a string. If it's a string, it must
            contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided
            range is larger than one cell.
          type:
            - 'excel!ExcelScript.Workbook#addComment~0:complex'
        - id: content
          description: >-
            The comment's content. This can be either a string or CommentRichContent object. Strings are used for plain
            text. CommentRichContent objects allow for other comment features, such as mentions.
          type:
            - 'excel!ExcelScript.Workbook#addComment~1:complex'
        - id: contentType
          description: >-
            Optional. The type of content contained within the comment. The default value is enum
            `ContentType.Plain`<!-- -->.
          type:
            - 'excel!ExcelScript.ContentType:enum'
  - uid: 'excel!ExcelScript.Workbook#addCustomXmlPart:member(1)'
    summary: Adds a new custom XML part to the workbook.
    name: addCustomXmlPart(xml)
    fullName: addCustomXmlPart(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
      return:
        type:
          - 'excel!ExcelScript.CustomXmlPart:interface'
        description: ''
      parameters:
        - id: xml
          description: XML content. Must be a valid XML fragment.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addNamedItem:member(1)'
    summary: Adds a new name to the collection of the given scope.
    name: 'addNamedItem(name, reference, comment)'
    fullName: 'addNamedItem(name, reference, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItem(
                    name: string,
                    reference: Range | string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'excel!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: The name of the named item.
          type:
            - string
        - id: reference
          description: The formula or the range that the name will refer to.
          type:
            - 'excel!ExcelScript.Workbook#addNamedItem~0:complex'
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)'
    summary: Adds a new name to the collection of the given scope using the user's locale for the formula.
    name: 'addNamedItemFormulaLocal(name, formula, comment)'
    fullName: 'addNamedItemFormulaLocal(name, formula, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItemFormulaLocal(
                    name: string,
                    formula: string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'excel!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: The "name" of the named item.
          type:
            - string
        - id: formula
          description: The formula in the user's locale that the name will refer to.
          type:
            - string
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addPivotTable:member(1)'
    summary: Add a PivotTable based on the specified source data and insert it at the top-left cell of the destination range.
    name: 'addPivotTable(name, source, destination)'
    fullName: 'addPivotTable(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTable(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      return:
        type:
          - 'excel!ExcelScript.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: The name of the new PivotTable.
          type:
            - string
        - id: source
          description: >-
            The source data for the new PivotTable, this can either be a range (or string address including the
            worksheet name) or a table.
          type:
            - 'excel!ExcelScript.Workbook#addPivotTable~0:complex'
        - id: destination
          description: >-
            The cell in the upper-left corner of the PivotTable report's destination range (the range on the worksheet
            where the resulting report will be placed).
          type:
            - 'excel!ExcelScript.Workbook#addPivotTable~1:complex'
  - uid: 'excel!ExcelScript.Workbook#addPivotTableStyle:member(1)'
    summary: Creates a blank PivotTableStyle with the specified name.
    name: 'addPivotTableStyle(name, makeUniqueName)'
    fullName: 'addPivotTableStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTableStyle(
                    name: string,
                    makeUniqueName?: boolean
                ): PivotTableStyle;
      return:
        type:
          - 'excel!ExcelScript.PivotTableStyle:interface'
        description: ''
      parameters:
        - id: name
          description: >-
            The unique name for the new PivotTableStyle. Will throw an invalid argument exception if the name is already
            in use.
          type:
            - string
        - id: makeUniqueName
          description: 'Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#addPredefinedCellStyle:member(1)'
    summary: Adds a new style to the collection.
    name: addPredefinedCellStyle(name)
    fullName: addPredefinedCellStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addPredefinedCellStyle(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: Name of the style to be added.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#addSetting:member(1)'
    summary: Sets or adds the specified setting to the workbook.
    name: 'addSetting(key, value)'
    fullName: 'addSetting(key, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addSetting(
                    key: string,
                    value: string | number | boolean | Date | Array<any> | any
                ): Setting;
      return:
        type:
          - 'excel!ExcelScript.Setting:interface'
        description: ''
      parameters:
        - id: key
          description: The Key of the new setting.
          type:
            - string
        - id: value
          description: The Value for the new setting.
          type:
            - 'excel!ExcelScript.Workbook#addSetting~0:complex'
  - uid: 'excel!ExcelScript.Workbook#addSlicer:member(1)'
    summary: Adds a new slicer to the workbook.
    name: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    fullName: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addSlicer(
                    slicerSource: string | PivotTable | Table,
                    sourceField: string | PivotField | number | TableColumn,
                    slicerDestination?: string | Worksheet
                ): Slicer;
      return:
        type:
          - 'excel!ExcelScript.Slicer:interface'
        description: ''
      parameters:
        - id: slicerSource
          description: >-
            The data source that the new slicer will be based on. It can be a PivotTable object, a Table object or a
            string. When a PivotTable object is passed, the data source is the source of the PivotTable object. When a
            Table object is passed, the data source is the Table object. When a string is passed, it is interpreted as
            the name/id of a PivotTable/Table.
          type:
            - 'excel!ExcelScript.Workbook#addSlicer~0:complex'
        - id: sourceField
          description: >-
            The field in the data source to filter by. It can be a PivotField object, a TableColumn object, the id of a
            PivotField or the id/name of TableColumn.
          type:
            - 'excel!ExcelScript.Workbook#addSlicer~1:complex'
        - id: slicerDestination
          description: >-
            Optional. The worksheet where the new slicer will be created in. It can be a Worksheet object or the name/id
            of a worksheet. This parameter can be omitted if the slicer collection is retrieved from worksheet.
          type:
            - 'excel!ExcelScript.Workbook#addSlicer~2:complex'
  - uid: 'excel!ExcelScript.Workbook#addSlicerStyle:member(1)'
    summary: Creates a blank SlicerStyle with the specified name.
    name: 'addSlicerStyle(name, makeUniqueName)'
    fullName: 'addSlicerStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
      return:
        type:
          - 'excel!ExcelScript.SlicerStyle:interface'
        description: ''
      parameters:
        - id: name
          description: >-
            The unique name for the new SlicerStyle. Will throw an invalid argument exception if the name is already in
            use.
          type:
            - string
        - id: makeUniqueName
          description: 'Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#addTable:member(1)'
    summary: >-
      Create a new table. The range object or source address determines the worksheet under which the table will be
      added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another
      table), an error will be thrown.
    name: 'addTable(address, hasHeaders)'
    fullName: 'addTable(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
      return:
        type:
          - 'excel!ExcelScript.Table:interface'
        description: ''
      parameters:
        - id: address
          description: >-
            A Range object, or a string address or name of the range representing the data source. If the address does
            not contain a sheet name, the currently-active sheet is used.
          type:
            - 'excel!ExcelScript.Workbook#addTable~0:complex'
        - id: hasHeaders
          description: >-
            Boolean value that indicates whether the data being imported has column labels. If the source does not
            contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting
            the data down by one row.
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#addTableStyle:member(1)'
    summary: Creates a blank TableStyle with the specified name.
    name: 'addTableStyle(name, makeUniqueName)'
    fullName: 'addTableStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
      return:
        type:
          - 'excel!ExcelScript.TableStyle:interface'
        description: ''
      parameters:
        - id: name
          description: >-
            The unique name for the new TableStyle. Will throw an invalid argument exception if the name is already in
            use.
          type:
            - string
        - id: makeUniqueName
          description: 'Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#addTimelineStyle:member(1)'
    summary: Creates a blank TimelineStyle with the specified name.
    name: 'addTimelineStyle(name, makeUniqueName)'
    fullName: 'addTimelineStyle(name, makeUniqueName)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
      return:
        type:
          - 'excel!ExcelScript.TimelineStyle:interface'
        description: ''
      parameters:
        - id: name
          description: >-
            The unique name for the new TimelineStyle. Will throw an invalid argument exception if the name is already
            in use.
          type:
            - string
        - id: makeUniqueName
          description: 'Optional, defaults to false. If true, will append numbers to the name in order to make it unique, if needed.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#addWorksheet:member(1)'
    summary: >-
      Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish
      to activate the newly added worksheet, call ".activate() on it.
    name: addWorksheet(name)
    fullName: addWorksheet(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addWorksheet(name?: string): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: name
          description: >-
            Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified,
            Excel determines the name of the new worksheet.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getActiveCell:member(1)'
    summary: Gets the currently active cell from the workbook.
    name: getActiveCell()
    fullName: getActiveCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveCell(): Range;'
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getActiveChart:member(1)'
    summary: 'Gets the currently active chart in the workbook. If there is no active chart, a null object is returned.'
    name: getActiveChart()
    fullName: getActiveChart()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveChart(): Chart;'
      return:
        type:
          - 'excel!ExcelScript.Chart:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getActiveSlicer:member(1)'
    summary: 'Gets the currently active slicer in the workbook. If there is no active slicer, a null object is returned.'
    name: getActiveSlicer()
    fullName: getActiveSlicer()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSlicer(): Slicer;'
      return:
        type:
          - 'excel!ExcelScript.Slicer:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getActiveWorksheet:member(1)'
    summary: Gets the currently active worksheet in the workbook.
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getApplication:member(1)'
    summary: Represents the Excel application instance that contains this workbook.
    name: getApplication()
    fullName: getApplication()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getApplication(): Application;'
      return:
        type:
          - 'excel!ExcelScript.Application:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getAutoSave:member(1)'
    summary: Specifies if the workbook is in autosave mode.
    name: getAutoSave()
    fullName: getAutoSave()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAutoSave(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getBinding:member(1)'
    summary: 'Gets a binding object by ID. If the binding object does not exist, will return a null object.'
    name: getBinding(id)
    fullName: getBinding(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBinding(id: string): Binding | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getBinding~0:complex'
        description: ''
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getBindings:member(1)'
    summary: Represents a collection of bindings that are part of the workbook.
    name: getBindings()
    fullName: getBindings()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBindings(): Binding[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getBindings~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getCalculationEngineVersion:member(1)'
    summary: Returns a number about the version of Excel Calculation Engine.
    name: getCalculationEngineVersion()
    fullName: getCalculationEngineVersion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCalculationEngineVersion(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getChartDataPointTrack:member(1)'
    summary: >-
      True if all charts in the workbook are tracking the actual data points to which they are attached. False if the
      charts track the index of the data points.
    name: getChartDataPointTrack()
    fullName: getChartDataPointTrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getChartDataPointTrack(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getComment:member(1)'
    summary: Gets a comment from the collection based on its ID.
    name: getComment(commentId)
    fullName: getComment(commentId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComment(commentId: string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: commentId
          description: The identifier for the comment.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getCommentByCell:member(1)'
    summary: Gets the comment from the specified cell.
    name: getCommentByCell(cellAddress)
    fullName: getCommentByCell(cellAddress)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByCell(cellAddress: Range | string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: >-
            The cell which the comment is on. This can be a Range object or a string. If it's a string, it must contain
            the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided range is
            larger than one cell.
          type:
            - 'excel!ExcelScript.Workbook#getCommentByCell~0:complex'
  - uid: 'excel!ExcelScript.Workbook#getCommentByReplyId:member(1)'
    summary: Gets the comment to which the given reply is connected.
    name: getCommentByReplyId(replyId)
    fullName: getCommentByReplyId(replyId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByReplyId(replyId: string): Comment;'
      return:
        type:
          - 'excel!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: replyId
          description: The identifier of comment reply.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getComments:member(1)'
    summary: Represents a collection of Comments associated with the workbook.
    name: getComments()
    fullName: getComments()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComments(): Comment[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getComments~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getCustomXmlPart:member(1)'
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not exist, the return object's isNull property
      will be true.
    name: getCustomXmlPart(id)
    fullName: getCustomXmlPart(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getCustomXmlPart~0:complex'
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getCustomXmlParts:member(1)'
    summary: Represents the collection of custom XML parts contained by this workbook.
    name: getCustomXmlParts()
    fullName: getCustomXmlParts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCustomXmlParts(): CustomXmlPart[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getCustomXmlParts~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)'
    summary: Gets the default PivotTableStyle for the parent object's scope.
    name: getDefaultPivotTableStyle()
    fullName: getDefaultPivotTableStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
      return:
        type:
          - 'excel!ExcelScript.PivotTableStyle:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)'
    summary: Gets the default SlicerStyle for the parent object's scope.
    name: getDefaultSlicerStyle()
    fullName: getDefaultSlicerStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultSlicerStyle(): SlicerStyle;'
      return:
        type:
          - 'excel!ExcelScript.SlicerStyle:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getDefaultTableStyle:member(1)'
    summary: Gets the default TableStyle for the parent object's scope.
    name: getDefaultTableStyle()
    fullName: getDefaultTableStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultTableStyle(): TableStyle;'
      return:
        type:
          - 'excel!ExcelScript.TableStyle:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)'
    summary: Gets the default TimelineStyle for the parent object's scope.
    name: getDefaultTimelineStyle()
    fullName: getDefaultTimelineStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDefaultTimelineStyle(): TimelineStyle;'
      return:
        type:
          - 'excel!ExcelScript.TimelineStyle:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getFirstWorksheet:member(1)'
    summary: Gets the first worksheet in the collection.
    name: getFirstWorksheet(visibleOnly)
    fullName: getFirstWorksheet(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#getIsDirty:member(1)'
    summary: >-
      Specifies if changes have been made since the workbook was last saved. You can set this property to true if you
      want to close a modified workbook without either saving it or being prompted to save it.
    name: getIsDirty()
    fullName: getIsDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsDirty(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getLastWorksheet:member(1)'
    summary: Gets the last worksheet in the collection.
    name: getLastWorksheet(visibleOnly)
    fullName: getLastWorksheet(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#getName:member(1)'
    summary: Gets the workbook name.
    name: getName()
    fullName: getName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getName(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getNamedItem:member(1)'
    summary: 'Gets a NamedItem object using its name. If the nameditem object does not exist, will return a null object.'
    name: getNamedItem(name)
    fullName: getNamedItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNamedItem(name: string): NamedItem | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getNamedItem~0:complex'
        description: ''
      parameters:
        - id: name
          description: Nameditem name.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getNames:member(1)'
    summary: Represents a collection of workbook scoped named items (named ranges and constants).
    name: getNames()
    fullName: getNames()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNames(): NamedItem[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getNames~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getPivotTable:member(1)'
    summary: 'Gets a PivotTable by name. If the PivotTable does not exist, will return a null object.'
    name: getPivotTable(name)
    fullName: getPivotTable(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTable(name: string): PivotTable | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getPivotTable~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the PivotTable to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getPivotTables:member(1)'
    summary: Represents a collection of PivotTables associated with the workbook.
    name: getPivotTables()
    fullName: getPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(): PivotTable[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getPivotTables~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getPivotTableStyle:member(1)'
    summary: 'Gets a PivotTableStyle by name. If the PivotTableStyle does not exist, will return a null object.'
    name: getPivotTableStyle(name)
    fullName: getPivotTableStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getPivotTableStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the PivotTableStyle to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getPivotTableStyles:member(1)'
    summary: Represents a collection of PivotTableStyles associated with the workbook.
    name: getPivotTableStyles()
    fullName: getPivotTableStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTableStyles(): PivotTableStyle[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getPivotTableStyles~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getPredefinedCellStyle:member(1)'
    summary: Gets a style by name.
    name: getPredefinedCellStyle(name)
    fullName: getPredefinedCellStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
      return:
        type:
          - 'excel!ExcelScript.PredefinedCellStyle:interface'
        description: ''
      parameters:
        - id: name
          description: Name of the style to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getPredefinedCellStyles:member(1)'
    summary: Represents a collection of styles associated with the workbook.
    name: getPredefinedCellStyles()
    fullName: getPredefinedCellStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getPredefinedCellStyles~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getPreviouslySaved:member(1)'
    summary: Specifies if the workbook has ever been saved locally or online.
    name: getPreviouslySaved()
    fullName: getPreviouslySaved()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviouslySaved(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getProperties:member(1)'
    summary: Gets the workbook properties.
    name: getProperties()
    fullName: getProperties()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProperties(): DocumentProperties;'
      return:
        type:
          - 'excel!ExcelScript.DocumentProperties:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getProtection:member(1)'
    summary: Returns workbook protection object for a workbook.
    name: getProtection()
    fullName: getProtection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProtection(): WorkbookProtection;'
      return:
        type:
          - 'excel!ExcelScript.WorkbookProtection:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getReadOnly:member(1)'
    summary: True if the workbook is open in Read-only mode.
    name: getReadOnly()
    fullName: getReadOnly()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getReadOnly(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getSelectedRange:member(1)'
    summary: >-
      Gets the currently selected single range from the workbook. If there are multiple ranges selected, this method
      will throw an error.
    name: getSelectedRange()
    fullName: getSelectedRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRange(): Range;'
      return:
        type:
          - 'excel!ExcelScript.Range:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getSelectedRanges:member(1)'
    summary: >-
      Gets the currently selected one or more ranges from the workbook. Unlike getSelectedRange(), this method returns a
      RangeAreas object that represents all the selected ranges.
    name: getSelectedRanges()
    fullName: getSelectedRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedRanges(): RangeAreas;'
      return:
        type:
          - 'excel!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getSetting:member(1)'
    summary: 'Gets a Setting entry via the key. If the Setting does not exist, will return a null object.'
    name: getSetting(key)
    fullName: getSetting(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSetting(key: string): Setting | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSetting~0:complex'
        description: ''
      parameters:
        - id: key
          description: The key of the setting.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getSettings:member(1)'
    summary: Represents a collection of Settings associated with the workbook.
    name: getSettings()
    fullName: getSettings()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSettings(): Setting[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSettings~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getSlicer:member(1)'
    summary: 'Gets a slicer using its name or id. If the slicer does not exist, will return a null object.'
    name: getSlicer(key)
    fullName: getSlicer(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicer(key: string): Slicer | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSlicer~0:complex'
        description: ''
      parameters:
        - id: key
          description: Name or Id of the slicer to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getSlicers:member(1)'
    summary: Represents a collection of Slicers associated with the workbook.
    name: getSlicers()
    fullName: getSlicers()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicers(): Slicer[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSlicers~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getSlicerStyle:member(1)'
    summary: 'Gets a SlicerStyle by name. If the SlicerStyle does not exist, will return a null object.'
    name: getSlicerStyle(name)
    fullName: getSlicerStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSlicerStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the SlicerStyle to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getSlicerStyles:member(1)'
    summary: Represents a collection of SlicerStyles associated with the workbook.
    name: getSlicerStyles()
    fullName: getSlicerStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicerStyles(): SlicerStyle[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getSlicerStyles~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getTable:member(1)'
    summary: 'Gets a table by Name or ID. If the table does not exist, will return a null object.'
    name: getTable(key)
    fullName: getTable(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(key: string): Table | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTable~0:complex'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getTables:member(1)'
    summary: Represents a collection of tables associated with the workbook.
    name: getTables()
    fullName: getTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(): Table[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTables~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getTableStyle:member(1)'
    summary: 'Gets a TableStyle by name. If the TableStyle does not exist, will return a null object.'
    name: getTableStyle(name)
    fullName: getTableStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTableStyle(name: string): TableStyle | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTableStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the TableStyle to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getTableStyles:member(1)'
    summary: Represents a collection of TableStyles associated with the workbook.
    name: getTableStyles()
    fullName: getTableStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTableStyles(): TableStyle[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTableStyles~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getTimelineStyle:member(1)'
    summary: 'Gets a TimelineStyle by name. If the TimelineStyle does not exist, will return a null object.'
    name: getTimelineStyle(name)
    fullName: getTimelineStyle(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTimelineStyle~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the TimelineStyle to be retrieved.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getTimelineStyles:member(1)'
    summary: Represents a collection of TimelineStyles associated with the workbook.
    name: getTimelineStyles()
    fullName: getTimelineStyles()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTimelineStyles(): TimelineStyle[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getTimelineStyles~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)'
    summary: >-
      True if calculations in this workbook will be done using only the precision of the numbers as they're displayed.
      Data will permanently lose accuracy when switching this property from false to true.
    name: getUsePrecisionAsDisplayed()
    fullName: getUsePrecisionAsDisplayed()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsePrecisionAsDisplayed(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'excel!ExcelScript.Workbook#getWorksheet:member(1)'
    summary: 'Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.'
    name: getWorksheet(key)
    fullName: getWorksheet(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(key: string): Worksheet | undefined;'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getWorksheet~0:complex'
        description: ''
      parameters:
        - id: key
          description: The Name or ID of the worksheet.
          type:
            - string
  - uid: 'excel!ExcelScript.Workbook#getWorksheets:member(1)'
    summary: Represents a collection of worksheets associated with the workbook.
    name: getWorksheets()
    fullName: getWorksheets()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheets(): Worksheet[];'
      return:
        type:
          - 'excel!ExcelScript.Workbook#getWorksheets~0:complex'
        description: ''
  - uid: 'excel!ExcelScript.Workbook#refreshAllDataConnections:member(1)'
    summary: Refreshes all the Data Connections.
    name: refreshAllDataConnections()
    fullName: refreshAllDataConnections()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllDataConnections(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!ExcelScript.Workbook#refreshAllPivotTables:member(1)'
    summary: Refreshes all the pivot tables in the collection.
    name: refreshAllPivotTables()
    fullName: refreshAllPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllPivotTables(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!ExcelScript.Workbook#setChartDataPointTrack:member(1)'
    summary: >-
      True if all charts in the workbook are tracking the actual data points to which they are attached. False if the
      charts track the index of the data points.
    name: setChartDataPointTrack(chartDataPointTrack)
    fullName: setChartDataPointTrack(chartDataPointTrack)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: chartDataPointTrack
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)'
    summary: Sets the default PivotTableStyle for use in the parent object's scope.
    name: setDefaultPivotTableStyle(newDefaultStyle)
    fullName: setDefaultPivotTableStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        setDefaultPivotTableStyle(
                    newDefaultStyle: PivotTableStyle | string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: The PivotTableStyle object or name of the PivotTableStyle object that should be the new default.
          type:
            - 'excel!ExcelScript.Workbook#setDefaultPivotTableStyle~0:complex'
  - uid: 'excel!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)'
    summary: Sets the default SlicerStyle for use in the parent object's scope.
    name: setDefaultSlicerStyle(newDefaultStyle)
    fullName: setDefaultSlicerStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: The SlicerStyle object or name of the SlicerStyle object that should be the new default.
          type:
            - 'excel!ExcelScript.Workbook#setDefaultSlicerStyle~0:complex'
  - uid: 'excel!ExcelScript.Workbook#setDefaultTableStyle:member(1)'
    summary: Sets the default TableStyle for use in the parent object's scope.
    name: setDefaultTableStyle(newDefaultStyle)
    fullName: setDefaultTableStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: The TableStyle object or name of the TableStyle object that should be the new default.
          type:
            - 'excel!ExcelScript.Workbook#setDefaultTableStyle~0:complex'
  - uid: 'excel!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)'
    summary: Sets the default TimelineStyle for use in the parent object's scope.
    name: setDefaultTimelineStyle(newDefaultStyle)
    fullName: setDefaultTimelineStyle(newDefaultStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: newDefaultStyle
          description: The TimelineStyle object or name of the TimelineStyle object that should be the new default.
          type:
            - 'excel!ExcelScript.Workbook#setDefaultTimelineStyle~0:complex'
  - uid: 'excel!ExcelScript.Workbook#setIsDirty:member(1)'
    summary: >-
      Specifies if changes have been made since the workbook was last saved. You can set this property to true if you
      want to close a modified workbook without either saving it or being prompted to save it.
    name: setIsDirty(isDirty)
    fullName: setIsDirty(isDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setIsDirty(isDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: isDirty
          description: ''
          type:
            - boolean
  - uid: 'excel!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)'
    summary: >-
      True if calculations in this workbook will be done using only the precision of the numbers as they're displayed.
      Data will permanently lose accuracy when switching this property from false to true.
    name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
    fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: usePrecisionAsDisplayed
          description: ''
          type:
            - boolean
references:
  - uid: 'excel!ExcelScript.Binding:interface'
    name: Binding
    fullName: ExcelScript.Binding
  - uid: 'excel!ExcelScript.Workbook#addBinding~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.BindingType:enum'
    name: BindingType
    fullName: ExcelScript.BindingType
  - uid: 'excel!ExcelScript.Comment:interface'
    name: Comment
    fullName: ExcelScript.Comment
  - uid: 'excel!ExcelScript.Workbook#addComment~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Workbook#addComment~1:complex'
    name: CommentRichContent | string
    fullName: ExcelScript.CommentRichContent | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.CommentRichContent:interface'
        name: CommentRichContent
        fullName: ExcelScript.CommentRichContent
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.ContentType:enum'
    name: ContentType
    fullName: ExcelScript.ContentType
  - uid: 'excel!ExcelScript.CustomXmlPart:interface'
    name: CustomXmlPart
    fullName: ExcelScript.CustomXmlPart
  - uid: 'excel!ExcelScript.NamedItem:interface'
    name: NamedItem
    fullName: ExcelScript.NamedItem
  - uid: 'excel!ExcelScript.Workbook#addNamedItem~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.PivotTable:interface'
    name: PivotTable
    fullName: ExcelScript.PivotTable
  - uid: 'excel!ExcelScript.Workbook#addPivotTable~0:complex'
    name: Range | string | Table
    fullName: ExcelScript.Range | string | ExcelScript.Table
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'excel!ExcelScript.Workbook#addPivotTable~1:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'excel!ExcelScript.PivotTableStyle:interface'
    name: PivotTableStyle
    fullName: ExcelScript.PivotTableStyle
  - uid: 'excel!ExcelScript.Setting:interface'
    name: Setting
    fullName: ExcelScript.Setting
  - uid: 'excel!ExcelScript.Workbook#addSetting~0:complex'
    name: string | number | boolean | Date | Array<any> | any
    fullName: string | number | boolean | Date | Array<any> | any
    spec.typeScript:
      - name: 'string | number | boolean | '
        fullName: 'string | number | boolean | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | '
        fullName: ' | '
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: |-
          <any> | any
                  
        fullName: |-
          <any> | any
                  
  - uid: 'excel!ExcelScript.Slicer:interface'
    name: Slicer
    fullName: ExcelScript.Slicer
  - uid: 'excel!ExcelScript.Workbook#addSlicer~0:complex'
    name: string | PivotTable | Table
    fullName: string | ExcelScript.PivotTable | ExcelScript.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'excel!ExcelScript.Workbook#addSlicer~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | ExcelScript.PivotField | number | ExcelScript.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.PivotField:interface'
        name: PivotField
        fullName: ExcelScript.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!ExcelScript.TableColumn:interface'
        name: TableColumn
        fullName: ExcelScript.TableColumn
  - uid: 'excel!ExcelScript.Workbook#addSlicer~2:complex'
    name: string | Worksheet
    fullName: string | ExcelScript.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
  - uid: 'excel!ExcelScript.SlicerStyle:interface'
    name: SlicerStyle
    fullName: ExcelScript.SlicerStyle
  - uid: 'excel!ExcelScript.Table:interface'
    name: Table
    fullName: ExcelScript.Table
  - uid: 'excel!ExcelScript.Workbook#addTable~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.TableStyle:interface'
    name: TableStyle
    fullName: ExcelScript.TableStyle
  - uid: 'excel!ExcelScript.TimelineStyle:interface'
    name: TimelineStyle
    fullName: ExcelScript.TimelineStyle
  - uid: 'excel!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'excel!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'excel!ExcelScript.Chart:interface'
    name: Chart
    fullName: ExcelScript.Chart
  - uid: 'excel!ExcelScript.Application:interface'
    name: Application
    fullName: ExcelScript.Application
  - uid: 'excel!ExcelScript.Workbook#getBinding~0:complex'
    name: Binding | undefined
    fullName: ExcelScript.Binding | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Binding:interface'
        name: Binding
        fullName: ExcelScript.Binding
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getBindings~0:complex'
    name: 'Binding[]'
    fullName: 'ExcelScript.Binding[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Binding:interface'
        name: Binding
        fullName: ExcelScript.Binding
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getCommentByCell~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Workbook#getComments~0:complex'
    name: 'Comment[]'
    fullName: 'ExcelScript.Comment[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Comment:interface'
        name: Comment
        fullName: ExcelScript.Comment
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getCustomXmlPart~0:complex'
    name: CustomXmlPart | undefined
    fullName: ExcelScript.CustomXmlPart | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: ExcelScript.CustomXmlPart
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getCustomXmlParts~0:complex'
    name: 'CustomXmlPart[]'
    fullName: 'ExcelScript.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.CustomXmlPart:interface'
        name: CustomXmlPart
        fullName: ExcelScript.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getNamedItem~0:complex'
    name: NamedItem | undefined
    fullName: ExcelScript.NamedItem | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getNames~0:complex'
    name: 'NamedItem[]'
    fullName: 'ExcelScript.NamedItem[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getPivotTable~0:complex'
    name: PivotTable | undefined
    fullName: ExcelScript.PivotTable | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getPivotTableStyle~0:complex'
    name: PivotTableStyle | undefined
    fullName: ExcelScript.PivotTableStyle | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getPivotTableStyles~0:complex'
    name: 'PivotTableStyle[]'
    fullName: 'ExcelScript.PivotTableStyle[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.PredefinedCellStyle:interface'
    name: PredefinedCellStyle
    fullName: ExcelScript.PredefinedCellStyle
  - uid: 'excel!ExcelScript.Workbook#getPredefinedCellStyles~0:complex'
    name: 'PredefinedCellStyle[]'
    fullName: 'ExcelScript.PredefinedCellStyle[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.PredefinedCellStyle:interface'
        name: PredefinedCellStyle
        fullName: ExcelScript.PredefinedCellStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.DocumentProperties:interface'
    name: DocumentProperties
    fullName: ExcelScript.DocumentProperties
  - uid: 'excel!ExcelScript.WorkbookProtection:interface'
    name: WorkbookProtection
    fullName: ExcelScript.WorkbookProtection
  - uid: 'excel!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'excel!ExcelScript.Workbook#getSetting~0:complex'
    name: Setting | undefined
    fullName: ExcelScript.Setting | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Setting:interface'
        name: Setting
        fullName: ExcelScript.Setting
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getSettings~0:complex'
    name: 'Setting[]'
    fullName: 'ExcelScript.Setting[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Setting:interface'
        name: Setting
        fullName: ExcelScript.Setting
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getSlicer~0:complex'
    name: Slicer | undefined
    fullName: ExcelScript.Slicer | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getSlicers~0:complex'
    name: 'Slicer[]'
    fullName: 'ExcelScript.Slicer[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getSlicerStyle~0:complex'
    name: SlicerStyle | undefined
    fullName: ExcelScript.SlicerStyle | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getSlicerStyles~0:complex'
    name: 'SlicerStyle[]'
    fullName: 'ExcelScript.SlicerStyle[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getTable~0:complex'
    name: Table | undefined
    fullName: ExcelScript.Table | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getTableStyle~0:complex'
    name: TableStyle | undefined
    fullName: ExcelScript.TableStyle | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getTableStyles~0:complex'
    name: 'TableStyle[]'
    fullName: 'ExcelScript.TableStyle[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getTimelineStyle~0:complex'
    name: TimelineStyle | undefined
    fullName: ExcelScript.TimelineStyle | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getTimelineStyles~0:complex'
    name: 'TimelineStyle[]'
    fullName: 'ExcelScript.TimelineStyle[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#getWorksheet~0:complex'
    name: Worksheet | undefined
    fullName: ExcelScript.Worksheet | undefined
    spec.typeScript:
      - uid: 'excel!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'excel!ExcelScript.Workbook#getWorksheets~0:complex'
    name: 'Worksheet[]'
    fullName: 'ExcelScript.Worksheet[]'
    spec.typeScript:
      - uid: 'excel!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!ExcelScript.Workbook#setDefaultPivotTableStyle~0:complex'
    name: PivotTableStyle | string
    fullName: ExcelScript.PivotTableStyle | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.PivotTableStyle:interface'
        name: PivotTableStyle
        fullName: ExcelScript.PivotTableStyle
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'excel!ExcelScript.Workbook#setDefaultSlicerStyle~0:complex'
    name: SlicerStyle | string
    fullName: ExcelScript.SlicerStyle | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.SlicerStyle:interface'
        name: SlicerStyle
        fullName: ExcelScript.SlicerStyle
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Workbook#setDefaultTableStyle~0:complex'
    name: TableStyle | string
    fullName: ExcelScript.TableStyle | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.TableStyle:interface'
        name: TableStyle
        fullName: ExcelScript.TableStyle
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!ExcelScript.Workbook#setDefaultTimelineStyle~0:complex'
    name: TimelineStyle | string
    fullName: ExcelScript.TimelineStyle | string
    spec.typeScript:
      - uid: 'excel!ExcelScript.TimelineStyle:interface'
        name: TimelineStyle
        fullName: ExcelScript.TimelineStyle
      - name: ' | string'
        fullName: ' | string'
