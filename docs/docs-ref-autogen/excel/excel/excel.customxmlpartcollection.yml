### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    summary: A collection of custom XML parts.
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartCollection#add:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#context:member'
      - 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#items:member'
      - 'excel!Excel.CustomXmlPartCollection#load:member(1)'
  - uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    summary: Adds a new custom XML part to the workbook.
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              let customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              let xmlBlob = customXmlPart.getXml();

              await context.sync();

              let readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              let settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          }
          ```
      parameters:
        - id: xml
          description: XML content. Must be a valid XML fragment.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
    summary: Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              $("#display-xml").text("");
              let contosoNamespace = "http://schemas.contoso.com/review/1.0";
              let customXmlParts = context.workbook.customXmlParts;
              let filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              let numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  let onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  let xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  let readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          }
          ```
      parameters:
        - id: namespaceUri
          description: 'This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".'
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
    summary: Gets the number of CustomXml parts in the collection.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
    summary: Gets a custom XML part based on its ID.
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  let xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  let readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          }
          ```
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not exist, the return object's isNull property
      will be true.
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#items:member'
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: Excel.CustomXmlPartScopedCollection
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPartCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    name: Excel.CustomXmlPartCollection
