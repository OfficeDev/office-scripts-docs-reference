### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    summary: 'Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.'
    name: ExcelScript.Range
    fullName: ExcelScript.Range
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#calculate:member(1)'
      - 'ExcelScript!ExcelScript.Range#clear:member(1)'
      - 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.Range#delete:member(1)'
      - 'ExcelScript!ExcelScript.Range#find:member(1)'
      - 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#getImage:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
      - 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSort:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getText:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTop:member(1)'
      - 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
      - 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Range#group:member(1)'
      - 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#insert:member(1)'
      - 'ExcelScript!ExcelScript.Range#merge:member(1)'
      - 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
      - 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
      - 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
      - 'ExcelScript!ExcelScript.Range#select:member(1)'
      - 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#showCard:member(1)'
      - 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
      - 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
  - uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    summary: Adds a new conditional format to the collection at the first/top priority.
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
      parameters:
        - id: type
          description: The type of conditional format being added. See ExcelScript.ConditionalFormatType for details.
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    summary: >-
      Fills range from the current range to the destination range using the specified AutoFill logic. The destination
      range can be null, or can extend the source either horizontally or vertically. Discontiguous ranges are not
      supported.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: >-
            The destination range to autofill. If the destination range is null, data is filled out based on the
            surrounding cells (which is the behavior when double-clicking the UI’s range fill handle).
          type:
            - 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
        - id: autoFillType
          description: >-
            The type of autofill. Specifies how the destination range is to be filled, based on the contents of the
            current range. Default is "FillDefault".
          type:
            - 'ExcelScript!ExcelScript.AutoFillType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    summary: Calculates a range of cells on a worksheet.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    summary: 'Clear range values, format, fill, border, etc.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /**
           * This script removes all the formatting from the selected range.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the selected range.
            let range = workbook.getSelectedRange();

            // Clear all the formatting in that range.
            range.clear(ExcelScript.ClearApplyTo.formats);
          }
          ```
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See ExcelScript.ClearApplyTo for details.
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    summary: Clears all conditional formats active on the current specified range.
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    summary: Converts the range cells with datatypes into text.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current range. The destination range can
      be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is
      smaller than the source.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            be able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True if to skip blank cells in the source range. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination range. Default is false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    summary: Deletes the cells associated with the range.
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See ExcelScript.DeleteShiftDirection for details.
          type:
            - 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    summary: >-
      Finds the given string based on the criteria specified. If the current range is larger than a single cell, then
      the search will be limited to that range, else the search will cover the entire sheet starting after that cell. If
      there are no matches, this function will return a null object.
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: text
          description: The string to find.
          type:
            - string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and whether the search needs to match the entire
            cell or be case sensitive.
          type:
            - 'ExcelScript!ExcelScript.SearchCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    summary: >-
      Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range
      must be single column range and have data around in order to find pattern.
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    summary: >-
      Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of
      rows and columns.
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: The number of rows of the new range size.
          type:
            - number
        - id: numColumns
          description: The number of columns of the new range size.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    summary: 'Specifies the range reference in A1-style. Address value will contain the Sheet reference (e.g., "Sheet1!A1:B4").'
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    summary: Specifies the range reference for the specified range in the language of the user.
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and
      "D10:E15" is "B2:E15".
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or address or range name.
          type:
            - 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it stays within the worksheet grid. The returned cell is located relative
      to the top left cell of the range.
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type:
            - number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    summary: >-
      Specifies the number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1
      (2,147,483,647).
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    summary: Gets a column contained in the range.
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    summary: Specifies the total number of columns in the range.
    name: getColumnCount()
    fullName: getColumnCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type:
          - number
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    summary: Represents if all columns of the current range are hidden.
    name: getColumnHidden()
    fullName: getColumnHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    summary: Specifies the column number of the first cell in the range. Zero-indexed.
    name: getColumnIndex()
    fullName: getColumnIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    summary: Gets a certain number of columns to the right of the current Range object.
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    summary: Gets a certain number of columns to the left of the current Range object.
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    summary: Returns a conditional format for the given ID.
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: The id of the conditional format.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    summary: The collection of ConditionalFormats that intersect the range.
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    summary: Returns a data validation object.
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
    summary: >-
      Returns a WorkbookRangeAreas object that represents the range containing all the direct precedents of a cell in
      same worksheet or in multiple worksheets.
    name: getDirectPrecedents()
    fullName: getDirectPrecedents()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDirectPrecedents(): WorkbookRangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.WorkbookRangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    summary: >-
      Gets an object that represents the entire column of the range (for example, if the current range represents cells
      "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    summary: >-
      Gets an object that represents the entire row of the range (for example, if the current range represents cells
      "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    summary: 'Returns a format object, encapsulating the range''s font, fill, borders, alignment, and other properties.'
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    summary: >-
      Represents the cell formula in A1-style notation. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    name: getFormula()
    fullName: getFormula()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormula(): string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    summary: >-
      Represents the cell formula in A1-style notation, in the user's language and number-formatting locale. For
      example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If the range contains
      multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will be returned.
    name: getFormulaLocal()
    fullName: getFormulaLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    summary: >-
      Represents the cell formula in R1C1-style notation. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    name: getFormulaR1C1()
    fullName: getFormulaR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    summary: 'Represents the formula in A1-style notation. If a cell has no formula, its value is returned instead.'
    name: getFormulas()
    fullName: getFormulas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If a cell has no formula, its value is
      returned instead.
    name: getFormulasLocal()
    fullName: getFormulasLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    summary: 'Represents the formula in R1C1-style notation. If a cell has no formula, its value is returned instead.'
    name: getFormulasR1C1()
    fullName: getFormulasR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
    summary: >-
      Represents if all cells have a spill border. Returns true if all cells have a spill border, or false if all cells
      do not have a spill border. Returns null if there are cells both with and without spill borders within the range.
    name: getHasSpill()
    fullName: getHasSpill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHasSpill(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    summary: 'Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range.'
    name: getHeight()
    fullName: getHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    summary: Represents if all cells of the current range are hidden.
    name: getHidden()
    fullName: getHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    summary: Represents the hyperlink for the current range.
    name: getHyperlink()
    fullName: getHyperlink()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    summary: >-
      Renders the range as a base64-encoded png image. **Important**: This API is currently unsupported in Excel for
      Mac. Visit \[OfficeDev/office-js Issue \#235\](https://github.com/OfficeDev/office-js/issues/235) for the current
      status.
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    summary: >-
      Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is
      found, will return a null object.
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type:
            - 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    summary: Represents if the current range is an entire column.
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    summary: Represents if the current range is an entire row.
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    summary: 'Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    summary: 'Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    summary: 'Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    summary: 'Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range.'
    name: getLeft()
    fullName: getLeft()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLeft(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    summary: Represents the data type state of the cell.
    name: getLinkedDataTypeState()
    fullName: getLinkedDataTypeState()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type:
          - 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    summary: Represents the data type state of each cell.
    name: getLinkedDataTypeStates()
    fullName: getLinkedDataTypeStates()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
    summary: >-
      Returns a RangeAreas object that represents the merged areas in this range. Note that if the merged areas count in
      this range is more than 512, the API will fail to return the result.
    name: getMergedAreas()
    fullName: getMergedAreas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMergedAreas(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    summary: >-
      Represents cell Excel number format code for the given range. If the range contains multiple cells, the data from
      first cell (represented by row index of 0 and column index of 0) will be returned.
    name: getNumberFormat()
    fullName: getNumberFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
    summary: Represents the category of number format of each cell.
    name: getNumberFormatCategories()
    fullName: getNumberFormatCategories()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getNumberFormatCategories~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    summary: >-
      Represents cell Excel number format code for the given range, based on the language settings of the user.​ Excel
      does not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any
      returned text uses the locally-formatted strings based on the language specified in the system settings. If the
      range contains multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will
      be returned.
    name: getNumberFormatLocal()
    fullName: getNumberFormatLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    summary: Represents Excel's number format code for the given range.
    name: getNumberFormats()
    fullName: getNumberFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    summary: >-
      Represents Excel's number format code for the given range, based on the language settings of the user.​ Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings.
    name: getNumberFormatsLocal()
    fullName: getNumberFormatsLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    summary: >-
      Gets an object which represents a range that's offset from the specified range. The dimension of the returned
      range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error
      will be thrown.
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### Examples

          ```javascript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset
            downward, and negative values are offset upward.
          type:
            - number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are
            offset to the right, and negative values are offset to the left.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    summary: Gets a scoped collection of PivotTables that overlap with the range.
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: >-
            If true, returns only PivotTables that are fully contained within the range bounds. The default value is
            false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    summary: >-
      Represents the style of the current range. If the styles of the cells are inconsistent, null will be returned. For
      custom styles, the style name will be returned. For built-in styles, a string representing a value in the
      BuiltInStyle enum will be returned.
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    summary: >-
      Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted)
      by some number of rows and columns.
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### Examples

          ```javascript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
              );
          }
          ```
      parameters:
        - id: deltaRows
          description: >-
            The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive
            number to expand the range, or a negative number to decrease it.
          type:
            - number
        - id: deltaColumns
          description: >-
            The number of columns by which to expand the bottom-right corner, relative to the current range. Use a
            positive number to expand the range, or a negative number to decrease it.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    summary: Gets a row contained in the range.
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    summary: Returns the total number of rows in the range.
    name: getRowCount()
    fullName: getRowCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowCount(): number;'
      return:
        type:
          - number
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    summary: Represents if all rows of the current range are hidden.
    name: getRowHidden()
    fullName: getRowHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    summary: Returns the row number of the first cell in the range. Zero-indexed.
    name: getRowIndex()
    fullName: getRowIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    summary: Gets a certain number of rows above the current Range object.
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    summary: Gets a certain number of rows below the current Range object.
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
    summary: >-
      Represents if ALL the cells would be saved as an array formula. Returns true if ALL cells would be saved as an
      array formula, or false if ALL cells would NOT be saved as an array formula. Returns null if some cells would be
      saved as an array formula and some would not be.
    name: getSavedAsArray()
    fullName: getSavedAsArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSavedAsArray(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    summary: Represents the range sort of the current range.
    name: getSort()
    fullName: getSort()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeSort:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    summary: >-
      Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified
      type and value. If no special cells are found, a null object will be returned.
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
    summary: >-
      Gets the range object containing the spill range when called on an anchor cell. If the range is not an anchor cell
      or spill range can't be found, a null object will be returned.
    name: getSpillingToRange()
    fullName: getSpillingToRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRange(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
    summary: >-
      Gets the range object containing the anchor cell for a cell getting spilled into. If it is not a spill cell or
      more than once cells are give, a null object will be returned.
    name: getSpillParent()
    fullName: getSpillParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParent(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    summary: >-
      Returns a Range object that represents the surrounding region for the top-left cell in this range. A surrounding
      region is a range bounded by any combination of blank rows and blank columns relative to this range.
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    summary: Gets a scoped collection of tables that overlap with the range.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'If true, returns only tables that are fully contained within the range bounds. The default value is false.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    summary: >-
      Represents Text value of the specified range. The Text value will not depend on the cell width. The \# sign
      substitution that happens in Excel UI will not affect the text value returned by the API. If the range contains
      multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will be returned.
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    summary: >-
      Text values of the specified range. The Text value will not depend on the cell width. The \# sign substitution
      that happens in Excel UI will not affect the text value returned by the API.
    name: getTexts()
    fullName: getTexts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    summary: 'Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range.'
    name: getTop()
    fullName: getTop()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTop(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, this function will
      return a null object.
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    summary: >-
      Represents the raw value of the specified range. The data returned could be of type string, number, or a boolean.
      Cell that contain an error will return the error string. If the range contains multiple cells, the data from first
      cell (represented by row index of 0 and column index of 0) will be returned.
    name: getValue()
    fullName: getValue()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValue(): any;'
      return:
        type:
          - any
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    summary: >-
      Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean.
      Cells that contain an error will return the error string.
    name: getValues()
    fullName: getValues()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValues(): any[][];'
      return:
        type:
          - 'any[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    summary: >-
      Represents the type of data in the cell. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    name: getValueType()
    fullName: getValueType()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeValueType:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    summary: Specifies the type of data in each cell.
    name: getValueTypes()
    fullName: getValueTypes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    summary: Represents the visible rows of the current range.
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeView:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    summary: 'Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range.'
    name: getWidth()
    fullName: getWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    summary: The worksheet containing the current range.
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    summary: Groups columns and rows for an outline.
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: >-
            Specifies how the range can be grouped by rows or columns. An `InvalidArgument` error is thrown when the
            group option differs from the range's `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow`
            is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    summary: Hide details of the row or column group.
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies whether to hide details of grouped rows or grouped columns.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make
      space. Returns a new Range object at the now blank space.
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See ExcelScript.InsertShiftDirection for details.
          type:
            - 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    summary: Merge the range cells into one region in the worksheet.
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: >-
            Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default
            value is false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    summary: >-
      Moves cell values, formatting, and formulas from current range to the destination range, replacing the old
      information in those cells. The destination range will be expanded automatically if it is smaller than the current
      range. Any cells in the destination range that are outside of the original range's area are not changed.
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange Specifies the range to where the information in this range will be moved.
          type:
            - 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    summary: Removes duplicate values from the range specified by the columns.
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
        description: ''
      parameters:
        - id: columns
          description: >-
            The columns inside the range that may contain duplicates. At least one column needs to be specified.
            Zero-indexed.
          type:
            - 'number[]'
        - id: includesHeader
          description: True if the input data contains header. Default is false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    summary: Finds and replaces the given string based on the criteria specified within the current range.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: String to find.
          type:
            - string
        - id: replacement
          description: String to replace the original with.
          type:
            - string
        - id: criteria
          description: Additional Replace Criteria.
          type:
            - 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    summary: Selects the specified range in the Excel UI.
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    summary: Represents if all columns of the current range are hidden.
    name: setColumnHidden(columnHidden)
    fullName: setColumnHidden(columnHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    summary: Set a range to be recalculated when the next recalculation occurs.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    summary: >-
      Sets the cell formula in A1-style notation. If the range contains multiple cells, each cell in the given range
      will be updated with the input data.
    name: setFormula(formula)
    fullName: setFormula(formula)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormula(formula: string): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
      parameters:
        - id: formula
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    summary: >-
      Set the cell formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If the range contains multiple cells,
      each cell in the given range will be updated with the input data.
    name: setFormulaLocal(formulaLocal)
    fullName: setFormulaLocal(formulaLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    summary: >-
      Sets the cell formula in R1C1-style notation. If the range contains multiple cells, each cell in the given range
      will be updated with the input data.
    name: setFormulaR1C1(formulaR1C1)
    fullName: setFormulaR1C1(formulaR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaR1C1
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    summary: 'Represents the formula in A1-style notation. If a cell has no formula, its value is returned instead.'
    name: setFormulas(formulas)
    fullName: setFormulas(formulas)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulas
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If a cell has no formula, its value is
      returned instead.
    name: setFormulasLocal(formulasLocal)
    fullName: setFormulasLocal(formulasLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    summary: 'Represents the formula in R1C1-style notation. If a cell has no formula, its value is returned instead.'
    name: setFormulasR1C1(formulasR1C1)
    fullName: setFormulasR1C1(formulasR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasR1C1
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    summary: Represents the hyperlink for the current range.
    name: setHyperlink(hyperlink)
    fullName: setHyperlink(hyperlink)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /** 
           * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let cell = workbook.getActiveCell();

            // Get the last worksheet in the workbook.
            // Note that this might be the current sheet if there's only one worksheet.
            let lastSheet = workbook.getLastWorksheet();

            // Get sheet name. 
            let linkedSheetName = lastSheet.getName();
            console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

            // Set the text for the hyperlink.
            let value = `Click to go to: ${linkedSheetName}`;

            // Create the hyperlink using that cell's value.
            cell.setHyperlink({
              textToDisplay: value.toString(),
              screenTip: `Navigate to ${linkedSheetName}`,
              documentReference: `${linkedSheetName}!A1`
            });
          }
          ```
      parameters:
        - id: hyperlink
          description: ''
          type:
            - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    summary: >-
      Sets cell Excel number format code for the given range. If the range contains multiple cells, each cell in the
      given range will be updated with the input data.
    name: setNumberFormat(numberFormat)
    fullName: setNumberFormat(numberFormat)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormat
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    summary: >-
      Sets cell Excel number format code for the given range, based on the language settings of the user.​ Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings. If the range
      contains multiple cells, each cell in the given range will be updated with the input data.
    name: setNumberFormatLocal(numberFormatLocal)
    fullName: setNumberFormatLocal(numberFormatLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    summary: Represents Excel's number format code for the given range.
    name: setNumberFormats(numberFormats)
    fullName: setNumberFormats(numberFormats)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormats
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    summary: >-
      Represents Excel's number format code for the given range, based on the language settings of the user.​ Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings.
    name: setNumberFormatsLocal(numberFormatsLocal)
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatsLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    summary: >-
      Represents the style of the current range. If the styles of the cells are inconsistent, null will be returned. For
      custom styles, the style name will be returned. For built-in styles, a string representing a value in the
      BuiltInStyle enum will be returned.
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    summary: Represents if all rows of the current range are hidden.
    name: setRowHidden(rowHidden)
    fullName: setRowHidden(rowHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    summary: >-
      Sets the raw value of the specified range. The data being set could be of type string, number, or a boolean.
      `null` value will be ignored (not set or overwritten in Excel). If the range contains multiple cells, each cell in
      the given range will be updated with the input data.
    name: setValue(value)
    fullName: setValue(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValue(value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    summary: >-
      Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean.
      Cells that contain an error will return the error string.
    name: setValues(values)
    fullName: setValues(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValues(values: any[][]): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
      parameters:
        - id: values
          description: ''
          type:
            - 'any[][]'
  - uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    summary: Displays the card for an active cell if it has rich value content.
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    summary: Show details of the row or column group.
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies whether to show details of grouped rows or grouped columns.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    summary: Ungroups columns and rows for an outline.
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies how the range can be ungrouped by rows or columns.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    summary: Unmerge the range cells into separate cells.
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.AutoFillType:enum'
    name: AutoFillType
    fullName: ExcelScript.AutoFillType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
    name: DeleteShiftDirection
    fullName: ExcelScript.DeleteShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.SearchCriteria:interface'
    name: SearchCriteria
    fullName: ExcelScript.SearchCriteria
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.WorkbookRangeAreas:interface'
    name: WorkbookRangeAreas
    fullName: ExcelScript.WorkbookRangeAreas
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: ExcelScript.RangeHyperlink
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
    name: LinkedDataTypeState
    fullName: ExcelScript.LinkedDataTypeState
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'ExcelScript.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: ExcelScript.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories~0:complex'
    name: 'NumberFormatCategory[][]'
    fullName: 'ExcelScript.NumberFormatCategory[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NumberFormatCategory:enum'
        name: NumberFormatCategory
        fullName: ExcelScript.NumberFormatCategory
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeSort:interface'
    name: RangeSort
    fullName: ExcelScript.RangeSort
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.Range#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
    name: RangeValueType
    fullName: ExcelScript.RangeValueType
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'ExcelScript.RangeValueType[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
        name: RangeValueType
        fullName: ExcelScript.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeView:interface'
    name: RangeView
    fullName: ExcelScript.RangeView
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.GroupOption:enum'
    name: GroupOption
    fullName: ExcelScript.GroupOption
  - uid: 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
    name: InsertShiftDirection
    fullName: ExcelScript.InsertShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: ExcelScript.RemoveDuplicatesResult
  - uid: 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: ExcelScript.ReplaceCriteria
