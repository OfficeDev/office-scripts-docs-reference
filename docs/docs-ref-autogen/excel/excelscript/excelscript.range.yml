### YamlMime:TSType
name: ExcelScript.Range
uid: 'ExcelScript!ExcelScript.Range:interface'
package: ExcelScript!
fullName: ExcelScript.Range
summary: 'Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.'
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: addConditionalFormat(type)
    uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: addConditionalFormat(type)
    summary: Adds a new conditional format to the collection at the first/top priority.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      parameters:
        - id: type
          description: The type of conditional format being added. See `ExcelScript.ConditionalFormatType` for details.
          type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
  - name: 'autoFill(destinationRange, autoFillType)'
    uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    package: ExcelScript!
    fullName: 'autoFill(destinationRange, autoFillType)'
    summary: >-
      Fills range from the current range to the destination range using the specified AutoFill logic. The destination
      range can be `null`<!-- -->, or can extend the source either horizontally or vertically. Discontiguous ranges are
      not supported.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      parameters:
        - id: destinationRange
          description: >-
            The destination range to AutoFill. If the destination range is `null`<!-- -->, data is filled out based on
            the surrounding cells (which is the behavior when double-clicking the UIâ€™s range fill handle).
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
        - id: autoFillType
          description: >-
            The type of AutoFill. Specifies how the destination range is to be filled, based on the contents of the
            current range. Default is "FillDefault".
          type: '<xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />'
      return:
        type: void
        description: ''
  - name: calculate()
    uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    package: ExcelScript!
    fullName: calculate()
    summary: Calculates a range of cells on a worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    package: ExcelScript!
    fullName: clear(applyTo)
    summary: 'Clear range values, format, fill, border, etc.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See `ExcelScript.ClearApplyTo` for details.
          type: '<xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script removes all the formatting from the selected range.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the selected range.
            let range = workbook.getSelectedRange();

            // Clear all the formatting in that range.
            range.clear(ExcelScript.ClearApplyTo.formats);
          }
          ```
  - name: clearAllConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: clearAllConditionalFormats()
    summary: Clears all conditional formats active on the current specified range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    package: ExcelScript!
    fullName: convertDataTypeToText()
    summary: Converts the range cells with data types into text.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    package: ExcelScript!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: >-
      Copies cell data or formatting from the source range or `RangeAreas` to the current range. The destination range
      can be a different size than the source range or `RangeAreas`<!-- -->. The destination will be expanded
      automatically if it is smaller than the source.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      parameters:
        - id: sourceRange
          description: >-
            The source range or `RangeAreas` to copy from. When the source `RangeAreas` has multiple ranges, their form
            must be able to be created by removing full rows or columns from a rectangular range.
          type: >-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref
            uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type: '<xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />'
        - id: skipBlanks
          description: True if to skip blank cells in the source range. Default is false.
          type: boolean
        - id: transpose
          description: True if to transpose the cells in the destination range. Default is false.
          type: boolean
      return:
        type: void
        description: ''
  - name: delete(shift)
    uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    package: ExcelScript!
    fullName: delete(shift)
    summary: Deletes the cells associated with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See `ExcelScript.DeleteShiftDirection` for details.
          type: '<xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample creates a sample range, then deletes
           * "A1" using different DeleteShiftDirection values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Add sample data to better visualize the delete changes.
            const currentSheet = workbook.getActiveWorksheet();
            currentSheet.getRange("A1:D4").setValues([
              [1,2,3,4],
              [5,6,7,8],
              [9,10,11,12],
              [13,14,15,16]]);

            // Delete A1 and shift the cells from the right to fill the space.
            // The value being deleted is 1.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.left);

            // Delete A1 and shift the cells from the bottom to fill the space.
            // The value being deleted is 2.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.up);

            // Log the sample range. The values should be:
            /*
              5, 3, 4, "",
              9, 6, 7, 8,
              13, 10, 11, 12,
              "", 14, 15, 16
            */
            console.log(currentSheet.getRange("A1:D4").getValues()); 
          }
          ```
  - name: 'find(text, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    package: ExcelScript!
    fullName: 'find(text, criteria)'
    summary: >-
      Finds the given string based on the criteria specified. If the current range is larger than a single cell, then
      the search will be limited to that range, else the search will cover the entire sheet starting after that cell. If
      there are no matches, then this function will return an object with its `isNullObject` property set to `true`<!--
      -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and whether the search needs to match the entire
            cell or be case-sensitive.
          type: '<xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: flashFill()
    uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    package: ExcelScript!
    fullName: flashFill()
    summary: >-
      Does a Flash Fill to the current range. Flash Fill automatically fills data when it senses a pattern, so the range
      must be a single column range and have data around it in order to find a pattern.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'flashFill(): void;'
      return:
        type: void
        description: ''
  - name: 'getAbsoluteResizedRange(numRows, numColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    summary: >-
      Gets a `Range` object with the same top-left cell as the current `Range` object, but with the specified numbers of
      rows and columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      parameters:
        - id: numRows
          description: The number of rows of the new range size.
          type: number
        - id: numColumns
          description: The number of columns of the new range size.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getAddress()
    uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    package: ExcelScript!
    fullName: getAddress()
    summary: 'Specifies the range reference in A1-style. Address value contains the sheet reference (e.g., "Sheet1!A1:B4").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddress(): string;'
      return:
        type: string
        description: ''
  - name: getAddressLocal()
    uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    package: ExcelScript!
    fullName: getAddressLocal()
    summary: Represents the range reference for the specified range in the language of the user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type: string
        description: ''
  - name: getBoundingRect(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    package: ExcelScript!
    fullName: getBoundingRect(anotherRange)
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For example, the `GetBoundingRect` of "B2:C5"
      and "D10:E15" is "B2:E15".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: 'The range object, address, or range name.'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getCell(row, column)'
    uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    package: ExcelScript!
    fullName: 'getCell(row, column)'
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it stays within the worksheet grid. The returned cell is located relative
      to the top left cell of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type: number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getCellCount()
    uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    package: ExcelScript!
    fullName: getCellCount()
    summary: >-
      Specifies the number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1
      (2,147,483,647).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCellCount(): number;'
      return:
        type: number
        description: ''
  - name: getColumn(column)
    uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    package: ExcelScript!
    fullName: getColumn(column)
    summary: Gets a column contained in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumn(column: number): Range;'
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnCount()
    uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    package: ExcelScript!
    fullName: getColumnCount()
    summary: Specifies the total number of columns in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type: number
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getColumnHidden()
    uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    package: ExcelScript!
    fullName: getColumnHidden()
    summary: Represents if all columns of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getColumnIndex()
    uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    package: ExcelScript!
    fullName: getColumnIndex()
    summary: Specifies the column number of the first cell in the range. Zero-indexed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type: number
        description: ''
  - name: getColumnsAfter(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    package: ExcelScript!
    fullName: getColumnsAfter(count)
    summary: Gets a certain number of columns to the right of the current `Range` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnsBefore(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    package: ExcelScript!
    fullName: getColumnsBefore(count)
    summary: Gets a certain number of columns to the left of the current `Range` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getConditionalFormat(id)
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormat(id)
    summary: Returns a conditional format for the given ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      parameters:
        - id: id
          description: The ID of the conditional format.
          type: string
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: ''
  - name: getConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormats()
    summary: The collection of `ConditionalFormats` that intersect the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]'
        description: ''
  - name: getDataValidation()
    uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    package: ExcelScript!
    fullName: getDataValidation()
    summary: Returns a data validation object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.DataValidation:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the values for data validation.
            let selectedRange = workbook.getSelectedRange();
            let rangeValues = selectedRange.getValues();

            // Convert the values into a comma-delimited string.
            let dataValidationListString = "";
            rangeValues.forEach((rangeValueRow) => {
              rangeValueRow.forEach((value) => {
                dataValidationListString += value + ",";
              });
            });

            // Clear the old range.
            selectedRange.clear(ExcelScript.ClearApplyTo.contents);

            // Apply the data validation to the first cell in the selected range.
            let targetCell = selectedRange.getCell(0,0);
            let dataValidation = targetCell.getDataValidation();

            // Set the content of the drop-down list.
            dataValidation.setRule({
                list: {
                  inCellDropDown: true,
                  source: dataValidationListString
                }
              });
          }
          ```
  - name: getDirectPrecedents()
    uid: 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
    package: ExcelScript!
    fullName: getDirectPrecedents()
    summary: >-
      Returns a `WorkbookRangeAreas` object that represents the range containing all the direct precedents of a cell in
      the same worksheet or in multiple worksheets.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDirectPrecedents(): WorkbookRangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />'
        description: ''
  - name: getEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getEntireColumn()
    summary: >-
      Gets an object that represents the entire column of the range (for example, if the current range represents cells
      "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    package: ExcelScript!
    fullName: getEntireRow()
    summary: >-
      Gets an object that represents the entire row of the range (for example, if the current range represents cells
      "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getExtendedRange(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getExtendedRange:member(1)'
    package: ExcelScript!
    fullName: 'getExtendedRange(direction, activeCell)'
    summary: >-
      Returns a range object that includes the current range and up to the edge of the range, based on the provided
      direction. This matches the Ctrl+Shift+Arrow key behavior in the Excel on Windows UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getExtendedRange(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: The direction from the active cell.
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: >-
            The active cell in this range. By default, the active cell is the top-left cell of the range. An error is
            thrown if the active cell is not in this range.
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getFormat()
    uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    package: ExcelScript!
    fullName: getFormat()
    summary: 'Returns a format object, encapsulating the range''s font, fill, borders, alignment, and other properties.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />'
        description: ''
  - name: getFormula()
    uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    package: ExcelScript!
    fullName: getFormula()
    summary: >-
      Represents the cell formula in A1-style notation. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormula(): string;'
      return:
        type: string
        description: |-


          #### Examples

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: getFormulaLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulaLocal()
    summary: >-
      Represents the cell formula in A1-style notation, in the user's language and number-formatting locale. For
      example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If the range contains
      multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type: string
        description: ''
  - name: getFormulaR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulaR1C1()
    summary: >-
      Represents the cell formula in R1C1-style notation. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type: string
        description: ''
  - name: getFormulas()
    uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    package: ExcelScript!
    fullName: getFormulas()
    summary: 'Represents the formula in A1-style notation. If a cell has no formula, its value is returned instead.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulasLocal()
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If a cell has no formula, its value is
      returned instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulasR1C1()
    summary: 'Represents the formula in R1C1-style notation. If a cell has no formula, its value is returned instead.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getHasSpill()
    uid: 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
    package: ExcelScript!
    fullName: getHasSpill()
    summary: >-
      Represents if all cells have a spill border. Returns `true` if all cells have a spill border, or `false` if all
      cells do not have a spill border. Returns `null` if there are cells both with and without spill borders within the
      range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHasSpill(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHeight()
    uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    package: ExcelScript!
    fullName: getHeight()
    summary: 'Returns the distance in points, for 100% zoom, from the top edge of the range to the bottom edge of the range.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeight(): number;'
      return:
        type: number
        description: ''
  - name: getHidden()
    uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    package: ExcelScript!
    fullName: getHidden()
    summary: Represents if all cells of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHyperlink()
    uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    package: ExcelScript!
    fullName: getHyperlink()
    summary: Represents the hyperlink for the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
        description: ''
  - name: getImage()
    uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    package: ExcelScript!
    fullName: getImage()
    summary: Renders the range as a base64-encoded png image.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getImage(): string;'
      return:
        type: string
        description: ''
  - name: getIntersection(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    package: ExcelScript!
    fullName: getIntersection(anotherRange)
    summary: >-
      Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is
      found, then this function will return an object with its `isNullObject` property set to `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getIsEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getIsEntireColumn()
    summary: Represents if the current range is an entire column.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getIsEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    package: ExcelScript!
    fullName: getIsEntireRow()
    summary: Represents if the current range is an entire row.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getLastCell()
    uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    package: ExcelScript!
    fullName: getLastCell()
    summary: 'Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastColumn()
    uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    package: ExcelScript!
    fullName: getLastColumn()
    summary: 'Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastRow()
    uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    package: ExcelScript!
    fullName: getLastRow()
    summary: 'Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLeft()
    uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    package: ExcelScript!
    fullName: getLeft()
    summary: 'Returns the distance in points, for 100% zoom, from the left edge of the worksheet to the left edge of the range.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLeft(): number;'
      return:
        type: number
        description: ''
  - name: getLinkedDataTypeState()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeState()
    summary: Represents the data type state of the cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />'
        description: ''
  - name: getLinkedDataTypeStates()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeStates()
    summary: Represents the data type state of each cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]'
        description: ''
  - name: getNumberFormat()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    package: ExcelScript!
    fullName: getNumberFormat()
    summary: >-
      Represents cell Excel number format code for the given range. If the range contains multiple cells, the data from
      first cell (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormatCategories()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategories()
    summary: Represents the category of number format of each cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]'
        description: ''
  - name: getNumberFormatCategory()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategory()
    summary: >-
      Specifies the number format category of first cell in the range (represented by row index of 0 and column index of
      0).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategory(): NumberFormatCategory;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />'
        description: ''
  - name: getNumberFormatLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatLocal()
    summary: >-
      Represents cell Excel number format code for the given range, based on the language settings of the user.â€‹ Excel
      does not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any
      returned text uses the locally-formatted strings based on the language specified in the system settings. If the
      range contains multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will
      be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormats()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    package: ExcelScript!
    fullName: getNumberFormats()
    summary: Represents Excel's number format code for the given range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getNumberFormatsLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatsLocal()
    summary: >-
      Represents Excel's number format code for the given range, based on the language settings of the user. Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: 'getOffsetRange(rowOffset, columnOffset)'
    uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    package: ExcelScript!
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    summary: >-
      Gets an object which represents a range that's offset from the specified range. The dimension of the returned
      range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error
      will be thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset
            downward, and negative values are offset upward.
          type: number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are
            offset to the right, and negative values are offset to the left.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
  - name: getPivotTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    package: ExcelScript!
    fullName: getPivotTables(fullyContained)
    summary: Gets a scoped collection of PivotTables that overlap with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      parameters:
        - id: fullyContained
          description: >-
            If `true`<!-- -->, returns only PivotTables that are fully contained within the range bounds. The default
            value is `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]'
        description: ''
  - name: getPredefinedCellStyle()
    uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: getPredefinedCellStyle()
    summary: >-
      Represents the style of the current range. If the styles of the cells are inconsistent, `null` will be returned.
      For custom styles, the style name will be returned. For built-in styles, a string representing a value in the
      `BuiltInStyle` enum will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type: string
        description: ''
  - name: 'getRangeEdge(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getRangeEdge:member(1)'
    package: ExcelScript!
    fullName: 'getRangeEdge(direction, activeCell)'
    summary: >-
      Returns a range object that is the edge cell of the data region that corresponds to the provided direction. This
      matches the Ctrl+Arrow key behavior in the Excel on Windows UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getRangeEdge(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: The direction from the active cell.
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: >-
            The active cell in this range. By default, the active cell is the top-left cell of the range. An error is
            thrown if the active cell is not in this range.
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getResizedRange(deltaRows, deltaColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    summary: >-
      Gets a `Range` object similar to the current `Range` object, but with its bottom-right corner expanded (or
      contracted) by some number of rows and columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      parameters:
        - id: deltaRows
          description: >-
            The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive
            number to expand the range, or a negative number to decrease it.
          type: number
        - id: deltaColumns
          description: >-
            The number of columns by which to expand the bottom-right corner, relative to the current range. Use a
            positive number to expand the range, or a negative number to decrease it.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
              );
          }
          ```
  - name: getRow(row)
    uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    package: ExcelScript!
    fullName: getRow(row)
    summary: Gets a row contained in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRow(row: number): Range;'
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowCount()
    uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    package: ExcelScript!
    fullName: getRowCount()
    summary: Returns the total number of rows in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowCount(): number;'
      return:
        type: number
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getRowHidden()
    uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    package: ExcelScript!
    fullName: getRowHidden()
    summary: Represents if all rows of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getRowIndex()
    uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    package: ExcelScript!
    fullName: getRowIndex()
    summary: Returns the row number of the first cell in the range. Zero-indexed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type: number
        description: ''
  - name: getRowsAbove(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    package: ExcelScript!
    fullName: getRowsAbove(count)
    summary: Gets a certain number of rows above the current `Range` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowsBelow(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    package: ExcelScript!
    fullName: getRowsBelow(count)
    summary: Gets a certain number of rows below the current `Range` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSavedAsArray()
    uid: 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
    package: ExcelScript!
    fullName: getSavedAsArray()
    summary: >-
      Represents if all the cells would be saved as an array formula. Returns `true` if all cells would be saved as an
      array formula, or `false` if all cells would not be saved as an array formula. Returns `null` if some cells would
      be saved as an array formula and some would not be.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSavedAsArray(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getSort()
    uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    package: ExcelScript!
    fullName: getSort()
    summary: Represents the range sort of the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeSort:interface" />'
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    package: ExcelScript!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: >-
      Gets the `RangeAreas` object, comprising one or more ranges, that represents all the cells that match the
      specified type and value. If no special cells are found, then this function will return an object with its
      `isNullObject` property set to `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />'
        - id: cellValueType
          description: >-
            If `cellType` is either `constants` or `formulas`<!-- -->, this argument is used to determine which types of
            cells to include in the result. These values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the type.
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.
           */
          function main(workbook: ExcelScript.Workbook) {
              // Get the current used range.
              let range = workbook.getActiveWorksheet().getUsedRange();
              
              // Get all the blank cells.
              let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);
              // Highlight the blank cells with a yellow background.
              blankCells.getFormat().getFill().setColor("yellow");
          }
          ```
  - name: getSpillingToRange()
    uid: 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
    package: ExcelScript!
    fullName: getSpillingToRange()
    summary: >-
      Gets the range object containing the spill range when called on an anchor cell. If the range isn't an anchor cell
      or the spill range can't be found, then this function will return an object with its `isNullObject` property set
      to `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillingToRange(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSpillParent()
    uid: 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
    package: ExcelScript!
    fullName: getSpillParent()
    summary: >-
      Gets the range object containing the anchor cell for the cell getting spilled into. If it's not a spilled cell, or
      more than one cell is given, then this function will return an object with its `isNullObject` property set to
      `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillParent(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSurroundingRegion()
    uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    package: ExcelScript!
    fullName: getSurroundingRegion()
    summary: >-
      Returns a `Range` object that represents the surrounding region for the top-left cell in this range. A surrounding
      region is a range bounded by any combination of blank rows and blank columns relative to this range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    package: ExcelScript!
    fullName: getTables(fullyContained)
    summary: Gets a scoped collection of tables that overlap with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      parameters:
        - id: fullyContained
          description: >-
            If `true`<!-- -->, returns only tables that are fully contained within the range bounds. The default value
            is `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Table:interface" />[]'
        description: ''
  - name: getText()
    uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    package: ExcelScript!
    fullName: getText()
    summary: >-
      Represents Text value of the specified range. The Text value will not depend on the cell width. The \# sign
      substitution that happens in Excel UI will not affect the text value returned by the API. If the range contains
      multiple cells, the data from first cell (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getText(): string;'
      return:
        type: string
        description: ''
  - name: getTexts()
    uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    package: ExcelScript!
    fullName: getTexts()
    summary: >-
      Text values of the specified range. The text value will not depend on the cell width. The number sign (\#)
      substitution that happens in the Excel UI will not affect the text value returned by the API.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getTop()
    uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    package: ExcelScript!
    fullName: getTop()
    summary: 'Returns the distance in points, for 100% zoom, from the top edge of the worksheet to the top edge of the range.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTop(): number;'
      return:
        type: number
        description: ''
  - name: getUsedRange(valuesOnly)
    uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    package: ExcelScript!
    fullName: getUsedRange(valuesOnly)
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, then this function
      will return an object with its `isNullObject` property set to `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getValue()
    uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    package: ExcelScript!
    fullName: getValue()
    summary: >-
      Represents the raw value of the specified range. The data returned could be of type string, number, or a boolean.
      Cell that contain an error will return the error string. If the range contains multiple cells, the data from first
      cell (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValue(): string | number | boolean;'
      return:
        type: string | number | boolean
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - name: getValues()
    uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    package: ExcelScript!
    fullName: getValues()
    summary: >-
      Represents the raw values of the specified range. The data returned could be a string, number, or boolean. Cells
      that contain an error will return the error string. If the returned value starts with a plus ("+"), minus ("-"),
      or equal sign ("="), Excel interprets this value as a formula.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValues(): (string | number | boolean)[][];'
      return:
        type: '(string | number | boolean)[][]'
        description: ''
  - name: getValueType()
    uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    package: ExcelScript!
    fullName: getValueType()
    summary: >-
      Represents the type of data in the cell. If the range contains multiple cells, the data from first cell
      (represented by row index of 0 and column index of 0) will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />'
        description: ''
  - name: getValueTypes()
    uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    package: ExcelScript!
    fullName: getValueTypes()
    summary: Specifies the type of data in each cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]'
        description: ''
  - name: getVisibleView()
    uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    package: ExcelScript!
    fullName: getVisibleView()
    summary: Represents the visible rows of the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeView:interface" />'
        description: ''
  - name: getWidth()
    uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    package: ExcelScript!
    fullName: getWidth()
    summary: 'Returns the distance in points, for 100% zoom, from the left edge of the range to the right edge of the range.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWidth(): number;'
      return:
        type: number
        description: ''
  - name: getWorksheet()
    uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    package: ExcelScript!
    fullName: getWorksheet()
    summary: The worksheet containing the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Worksheet:interface" />'
        description: ''
  - name: group(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    package: ExcelScript!
    fullName: group(groupOption)
    summary: Groups columns and rows for an outline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: >-
            Specifies how the range can be grouped by rows or columns. An `InvalidArgument` error is thrown when the
            group option differs from the range's `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow`
            is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: hideGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    package: ExcelScript!
    fullName: hideGroupDetails(groupOption)
    summary: Hides the details of the row or column group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: Specifies whether to hide the details of grouped rows or grouped columns.
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: insert(shift)
    uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    package: ExcelScript!
    fullName: insert(shift)
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make
      space. Returns a new `Range` object at the now blank space.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See `ExcelScript.InsertShiftDirection` for details.
          type: '<xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: merge(across)
    uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    package: ExcelScript!
    fullName: merge(across)
    summary: Merge the range cells into one region in the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'merge(across?: boolean): void;'
      parameters:
        - id: across
          description: >-
            Optional. Set `true` to merge cells in each row of the specified range as separate merged cells. The default
            value is `false`<!-- -->.
          type: boolean
      return:
        type: void
        description: ''
  - name: moveTo(destinationRange)
    uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    package: ExcelScript!
    fullName: moveTo(destinationRange)
    summary: >-
      Moves cell values, formatting, and formulas from current range to the destination range, replacing the old
      information in those cells. The destination range will be expanded automatically if it is smaller than the current
      range. Any cells in the destination range that are outside of the original range's area are not changed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      parameters:
        - id: destinationRange
          description: destinationRange Specifies the range to where the information in this range will be moved.
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: void
        description: ''
  - name: 'removeDuplicates(columns, includesHeader)'
    uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    package: ExcelScript!
    fullName: 'removeDuplicates(columns, includesHeader)'
    summary: Removes duplicate values from the range specified by the columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      parameters:
        - id: columns
          description: >-
            The columns inside the range that may contain duplicates. At least one column needs to be specified.
            Zero-indexed.
          type: 'number[]'
        - id: includesHeader
          description: True if the input data contains header. Default is false.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />'
        description: ''
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    package: ExcelScript!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: Finds and replaces the given string based on the criteria specified within the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      parameters:
        - id: text
          description: String to find.
          type: string
        - id: replacement
          description: The string that replaces the original string.
          type: string
        - id: criteria
          description: Additional replacement criteria.
          type: '<xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />'
      return:
        type: number
        description: ''
  - name: select()
    uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    package: ExcelScript!
    fullName: select()
    summary: Selects the specified range in the Excel UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(): void;'
      return:
        type: void
        description: ''
  - name: setColumnHidden(columnHidden)
    uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    package: ExcelScript!
    fullName: setColumnHidden(columnHidden)
    summary: Represents if all columns of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      parameters:
        - id: columnHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setDirty()
    uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    package: ExcelScript!
    fullName: setDirty()
    summary: Set a range to be recalculated when the next recalculation occurs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: setFormula(formula)
    uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    package: ExcelScript!
    fullName: setFormula(formula)
    summary: >-
      Sets the cell formula in A1-style notation. If the range contains multiple cells, each cell in the given range
      will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormula(formula: string): void;'
      parameters:
        - id: formula
          description: ''
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: setFormulaLocal(formulaLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulaLocal(formulaLocal)
    summary: >-
      Set the cell formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If the range contains multiple cells,
      each cell in the given range will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      parameters:
        - id: formulaLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulaR1C1(formulaR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulaR1C1(formulaR1C1)
    summary: >-
      Sets the cell formula in R1C1-style notation. If the range contains multiple cells, each cell in the given range
      will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      parameters:
        - id: formulaR1C1
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulas(formulas)
    uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    package: ExcelScript!
    fullName: setFormulas(formulas)
    summary: 'Represents the formula in A1-style notation. If a cell has no formula, its value is returned instead.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      parameters:
        - id: formulas
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasLocal(formulasLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulasLocal(formulasLocal)
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. If a cell has no formula, its value is
      returned instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      parameters:
        - id: formulasLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasR1C1(formulasR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulasR1C1(formulasR1C1)
    summary: 'Represents the formula in R1C1-style notation. If a cell has no formula, its value is returned instead.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      parameters:
        - id: formulasR1C1
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setHyperlink(hyperlink)
    uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    package: ExcelScript!
    fullName: setHyperlink(hyperlink)
    summary: Represents the hyperlink for the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      parameters:
        - id: hyperlink
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /** 
           * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let cell = workbook.getActiveCell();

            // Get the last worksheet in the workbook.
            // Note that this might be the current sheet if there's only one worksheet.
            let lastSheet = workbook.getLastWorksheet();

            // Get sheet name. 
            let linkedSheetName = lastSheet.getName();
            console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

            // Set the text for the hyperlink.
            let value = `Click to go to: ${linkedSheetName}`;

            // Create the hyperlink using that cell's value.
            cell.setHyperlink({
              textToDisplay: value.toString(),
              screenTip: `Navigate to ${linkedSheetName}`,
              documentReference: `${linkedSheetName}!A1`
            });
          }
          ```
  - name: setNumberFormat(numberFormat)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    package: ExcelScript!
    fullName: setNumberFormat(numberFormat)
    summary: >-
      Sets cell Excel number format code for the given range. If the range contains multiple cells, each cell in the
      given range will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      parameters:
        - id: numberFormat
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormatLocal(numberFormatLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatLocal(numberFormatLocal)
    summary: >-
      Sets cell Excel number format code for the given range, based on the language settings of the user.â€‹ Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings. If the range
      contains multiple cells, each cell in the given range will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      parameters:
        - id: numberFormatLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormats(numberFormats)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    package: ExcelScript!
    fullName: setNumberFormats(numberFormats)
    summary: Represents Excel's number format code for the given range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      parameters:
        - id: numberFormats
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setNumberFormatsLocal(numberFormatsLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    summary: >-
      Represents Excel's number format code for the given range, based on the language settings of the user. Excel does
      not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any returned
      text uses the locally-formatted strings based on the language specified in the system settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      parameters:
        - id: numberFormatsLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setPredefinedCellStyle(predefinedCellStyle)
    uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    summary: >-
      Represents the style of the current range. If the styles of the cells are inconsistent, `null` will be returned.
      For custom styles, the style name will be returned. For built-in styles, a string representing a value in the
      `BuiltInStyle` enum will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      parameters:
        - id: predefinedCellStyle
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setRowHidden(rowHidden)
    uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    package: ExcelScript!
    fullName: setRowHidden(rowHidden)
    summary: Represents if all rows of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      parameters:
        - id: rowHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setValue(value)
    uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    package: ExcelScript!
    fullName: setValue(value)
    summary: >-
      Sets the raw value of the specified range. The data being set could be of type string, number, or a boolean.
      `null` value will be ignored (not set or overwritten in Excel). If the range contains multiple cells, each cell in
      the given range will be updated with the input data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValue(value: any): void;'
      parameters:
        - id: value
          description: ''
          type: any
      return:
        type: void
        description: ''
  - name: setValues(values)
    uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    package: ExcelScript!
    fullName: setValues(values)
    summary: >-
      Represents the raw values of the specified range. The data returned could be a string, number, or boolean. Cells
      that contain an error will return the error string. If the returned value starts with a plus ("+"), minus ("-"),
      or equal sign ("="), Excel interprets this value as a formula.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValues(values: (string | number | boolean)[][]): void;'
      parameters:
        - id: values
          description: ''
          type: '(string | number | boolean)[][]'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
  - name: showCard()
    uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    package: ExcelScript!
    fullName: showCard()
    summary: Displays the card for an active cell if it has rich value content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showCard(): void;'
      return:
        type: void
        description: ''
  - name: showGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    package: ExcelScript!
    fullName: showGroupDetails(groupOption)
    summary: Shows the details of the row or column group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: Specifies whether to show the details of grouped rows or grouped columns.
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: ungroup(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    package: ExcelScript!
    fullName: ungroup(groupOption)
    summary: Ungroups columns and rows for an outline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: Specifies how the range can be ungrouped by rows or columns.
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: unmerge()
    uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    package: ExcelScript!
    fullName: unmerge()
    summary: Unmerge the range cells into separate cells.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unmerge(): void;'
      return:
        type: void
        description: ''
