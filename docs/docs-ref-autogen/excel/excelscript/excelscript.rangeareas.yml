### YamlMime:TSType
name: ExcelScript.RangeAreas
uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
package: ExcelScript!
fullName: ExcelScript.RangeAreas
summary: '`RangeAreas` represents a collection of one or more rectangular ranges in the same worksheet.'
remarks: |-


  #### Examples

  ```TypeScript
  /**
   * This script clears all the cells in the current worksheet that are displaying errors.
   */
  function main(workbook: ExcelScript.Workbook) {
    // Get the used range on the current sheet.
    const currentSheet = workbook.getActiveWorksheet();
    const usedRange = currentSheet.getUsedRange();

    // Get the RangeAreas object for each cell with a formula error.
    const errorCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas, ExcelScript.SpecialCellValueType.errors);

    // If there are any error cells, clear them.
    if (errorCells) {
      errorCells.clear();
    }
  }
  ```
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: addConditionalFormat(type)
    uid: 'ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: addConditionalFormat(type)
    summary: Adds a new conditional format to the collection at the first/top priority.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      parameters:
        - id: type
          description: The type of conditional format being added. See `ExcelScript.ConditionalFormatType` for details.
          type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: ''
  - name: calculate()
    uid: 'ExcelScript!ExcelScript.RangeAreas#calculate:member(1)'
    package: ExcelScript!
    fullName: calculate()
    summary: Calculates all cells in the `RangeAreas`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'ExcelScript!ExcelScript.RangeAreas#clear:member(1)'
    package: ExcelScript!
    fullName: clear(applyTo)
    summary: >-
      Clears values, format, fill, border, and other properties on each of the areas that comprise this `RangeAreas`
      object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See `ExcelScript.ClearApplyTo` for details. Default is "All".
          type: '<xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script clears all the cells in the current worksheet that are displaying errors.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the used range on the current sheet.
            const currentSheet = workbook.getActiveWorksheet();
            const usedRange = currentSheet.getUsedRange();

            // Get the RangeAreas object for each cell with a formula error.
            const errorCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas, ExcelScript.SpecialCellValueType.errors);

            // If there are any error cells, clear them.
            if (errorCells) {
              errorCells.clear();
            }
          }
          ```
  - name: clearAllConditionalFormats()
    uid: 'ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: clearAllConditionalFormats()
    summary: Clears all conditional formats active on the current specified range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)'
    package: ExcelScript!
    fullName: convertDataTypeToText()
    summary: Converts all cells in the `RangeAreas` with data types into text.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)'
    package: ExcelScript!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: >-
      Copies cell data or formatting from the source range or `RangeAreas` to the current `RangeAreas`<!-- -->. The
      destination `RangeAreas` can be a different size than the source range or `RangeAreas`<!-- -->. The destination
      will be expanded automatically if it is smaller than the source.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      parameters:
        - id: sourceRange
          description: >-
            The source range or `RangeAreas` to copy from. When the source `RangeAreas` has multiple ranges, their form
            must able to be created by removing full rows or columns from a rectangular range.
          type: >-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref
            uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type: '<xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />'
        - id: skipBlanks
          description: True if to skip blank cells in the source range or `RangeAreas`<!-- -->. Default is false.
          type: boolean
        - id: transpose
          description: True if to transpose the cells in the destination `RangeAreas`<!-- -->. Default is false.
          type: boolean
      return:
        type: void
        description: ''
  - name: getAddress()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)'
    package: ExcelScript!
    fullName: getAddress()
    summary: >-
      Returns the `RangeAreas` reference in A1-style. Address value will contain the worksheet name for each rectangular
      block of cells (e.g., "Sheet1!A1:B4, Sheet1!D1:D4").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddress(): string;'
      return:
        type: string
        description: ''
  - name: getAddressLocal()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)'
    package: ExcelScript!
    fullName: getAddressLocal()
    summary: Returns the `RangeAreas` reference in the user locale.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type: string
        description: ''
  - name: getAreaCount()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)'
    package: ExcelScript!
    fullName: getAreaCount()
    summary: Returns the number of rectangular ranges that comprise this `RangeAreas` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAreaCount(): number;'
      return:
        type: number
        description: ''
  - name: getAreas()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)'
    package: ExcelScript!
    fullName: getAreas()
    summary: Returns a collection of rectangular ranges that comprise this `RangeAreas` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAreas(): Range[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />[]'
        description: ''
  - name: getCellCount()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)'
    package: ExcelScript!
    fullName: getCellCount()
    summary: >-
      Returns the number of cells in the `RangeAreas` object, summing up the cell counts of all of the individual
      rectangular ranges. Returns -1 if the cell count exceeds 2^31-1 (2,147,483,647).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCellCount(): number;'
      return:
        type: number
        description: ''
  - name: getConditionalFormat(id)
    uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormat(id)
    summary: Returns a conditional format for the given ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      parameters:
        - id: id
          description: The ID of the conditional format.
          type: string
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: ''
  - name: getConditionalFormats()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormats()
    summary: Returns a collection of conditional formats that intersect with any cells in this `RangeAreas` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]'
        description: ''
  - name: getDataValidation()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)'
    package: ExcelScript!
    fullName: getDataValidation()
    summary: Returns a data validation object for all ranges in the `RangeAreas`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.DataValidation:interface" />'
        description: ''
  - name: getEntireColumn()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getEntireColumn()
    summary: >-
      Returns a `RangeAreas` object that represents the entire columns of the `RangeAreas` (for example, if the current
      `RangeAreas` represents cells "B4:E11, H2", it returns a `RangeAreas` that represents columns "B:E, H:H").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): RangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getEntireRow()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)'
    package: ExcelScript!
    fullName: getEntireRow()
    summary: >-
      Returns a `RangeAreas` object that represents the entire rows of the `RangeAreas` (for example, if the current
      `RangeAreas` represents cells "B4:E11", it returns a `RangeAreas` that represents rows "4:11").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): RangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getFormat()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)'
    package: ExcelScript!
    fullName: getFormat()
    summary: >-
      Returns a `RangeFormat` object, encapsulating the the font, fill, borders, alignment, and other properties for all
      ranges in the `RangeAreas` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script finds and highlights all the cells in the current worksheet that contain a formula.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the used range on the current sheet.
            const currentSheet = workbook.getActiveWorksheet();
            const usedRange = currentSheet.getUsedRange();

            // Get the RangeAreas object for each cell with a formula.
            const formulaCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas);

            // Add a light blue background to the cells containing formulas.
            formulaCells.getFormat().getFill().setColor("#ADD8E6");
          }
          ```
  - name: getIntersection(anotherRange)
    uid: 'ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)'
    package: ExcelScript!
    fullName: getIntersection(anotherRange)
    summary: >-
      Returns the `RangeAreas` object that represents the intersection of the given ranges or `RangeAreas`<!-- -->. If
      no intersection is found, then this method returns `undefined`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): RangeAreas;'
      parameters:
        - id: anotherRange
          description: 'The range, `RangeAreas` object, or address that will be used to determine the intersection.'
          type: >-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref
            uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getIsEntireColumn()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getIsEntireColumn()
    summary: 'Specifies if all the ranges on this `RangeAreas` object represent entire columns (e.g., "A:C, Q:Z").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getIsEntireRow()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)'
    package: ExcelScript!
    fullName: getIsEntireRow()
    summary: 'Specifies if all the ranges on this `RangeAreas` object represent entire rows (e.g., "1:3, 5:7").'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type: boolean
        description: ''
  - name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    uid: 'ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)'
    package: ExcelScript!
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    summary: >-
      Returns a `RangeAreas` object that is shifted by the specific row and column offset. The dimension of the returned
      `RangeAreas` will match the original object. If the resulting `RangeAreas` is forced outside the bounds of the
      worksheet grid, an error will be thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getOffsetRangeAreas(
                    rowOffset: number,
                    columnOffset: number
                ): RangeAreas;
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the `RangeAreas` is to be offset. Positive values are
            offset downward, and negative values are offset upward.
          type: number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the `RangeAreas` is to be offset. Positive values
            are offset to the right, and negative values are offset to the left.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getPredefinedCellStyle()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: getPredefinedCellStyle()
    summary: >-
      Represents the style for all ranges in this `RangeAreas` object. If the styles of the cells are inconsistent,
      `null` will be returned. For custom styles, the style name will be returned. For built-in styles, a string
      representing a value in the `BuiltInStyle` enum will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type: string
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)'
    package: ExcelScript!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: >-
      Returns a `RangeAreas` object that represents all the cells that match the specified type and value. If no special
      cells are found that match the criteria, then this method returns `undefined`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />'
        - id: cellValueType
          description: >-
            If `cellType` is either `constants` or `formulas`<!-- -->, this argument is used to determine which types of
            cells to include in the result. These values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the type.
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.RangeAreas#getTables:member(1)'
    package: ExcelScript!
    fullName: getTables(fullyContained)
    summary: Returns a scoped collection of tables that overlap with any range in this `RangeAreas` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      parameters:
        - id: fullyContained
          description: >-
            If `true`<!-- -->, returns only tables that are fully contained within the range bounds. Default is
            `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Table:interface" />[]'
        description: ''
  - name: getUsedRangeAreas(valuesOnly)
    uid: 'ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)'
    package: ExcelScript!
    fullName: getUsedRangeAreas(valuesOnly)
    summary: >-
      Returns the used `RangeAreas` that comprises all the used areas of individual rectangular ranges in the
      `RangeAreas` object. If there are no used cells within the `RangeAreas`<!-- -->, then this method returns
      `undefined`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): RangeAreas;'
      parameters:
        - id: valuesOnly
          description: Whether to only consider cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getWorksheet()
    uid: 'ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)'
    package: ExcelScript!
    fullName: getWorksheet()
    summary: Returns the worksheet for the current `RangeAreas`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Worksheet:interface" />'
        description: ''
  - name: setDirty()
    uid: 'ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)'
    package: ExcelScript!
    fullName: setDirty()
    summary: Sets the `RangeAreas` to be recalculated when the next recalculation occurs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: setPredefinedCellStyle(predefinedCellStyle)
    uid: 'ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    summary: >-
      Represents the style for all ranges in this `RangeAreas` object. If the styles of the cells are inconsistent,
      `null` will be returned. For custom styles, the style name will be returned. For built-in styles, a string
      representing a value in the `BuiltInStyle` enum will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      parameters:
        - id: predefinedCellStyle
          description: ''
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script sets the cell style to "warning text"
           * on every cell with a formula error.
           */ 
          function main(workbook: ExcelScript.Workbook) {
            // Get the used range in the current worksheet.
            const sheet = workbook.getActiveWorksheet();
            const usedRange = sheet.getUsedRange();

            // Get any cells that are displaying errors.
            const errorCells = usedRange.getSpecialCells(
              ExcelScript.SpecialCellType.formulas,
              ExcelScript.SpecialCellValueType.errors
            );

            // Check if there are error cells before proceeding.
            if (errorCells) {
              // Use the built-in warning text style on the error cells.
              errorCells.setPredefinedCellStyle(
                ExcelScript.BuiltInStyle.warningText.toString()
              );
            } else {
              console.log("No formula errors in the worksheet.");
            }
          }
          ```
