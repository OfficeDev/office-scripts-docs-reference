### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    summary: >-
      RangeAreas represents a collection of one or more rectangular ranges in the same worksheet. To learn how to use
      discontinguous ranges, read [Work with multiple ranges simultaneously in Excel
      add-ins](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges)<!-- -->.
    name: ExcelScript.RangeAreas
    fullName: ExcelScript.RangeAreas
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#calculate:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#clear:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#convertToLinkedDataType:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getTables:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)'
    summary: Adds a new conditional format to the collection at the first/top priority.
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: type
          description: The type of conditional format being added. See Excel.ConditionalFormatType for details.
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#calculate:member(1)'
    summary: Calculates all cells in the RangeAreas.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#clear:member(1)'
    summary: 'Clears values, format, fill, border, etc on each of the areas that comprise this RangeAreas object.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See Excel.ClearApplyTo for details. Default is "All".
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)'
    summary: Clears all conditional formats active on the current specified range.
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)'
    summary: Converts all cells in the RangeAreas with datatypes into text.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#convertToLinkedDataType:member(1)'
    summary: Converts all cells in the RangeAreas into linked datatype.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: The Service ID which will be used to query the data.
          type:
            - number
        - id: languageCulture
          description: Language Culture to query the service for.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current RangeAreas. The destination
      rangeAreas can be a different size than the source range or RangeAreas. The destination will be expanded
      automatically if it is smaller than the source.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'ExcelScript!ExcelScript.RangeAreas#copyFrom~0:complex'
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True if to skip blank cells in the source range or RangeAreas. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination RangeAreas. Default is false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)'
    summary: >-
      Returns the RangeAreas reference in A1-style. Address value will contain the worksheet name for each rectangular
      block of cells (e.g., "Sheet1!A1:B4, Sheet1!D1:D4").
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)'
    summary: Returns the RangeAreas reference in the user locale.
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)'
    summary: Returns the number of rectangular ranges that comprise this RangeAreas object.
    name: getAreaCount()
    fullName: getAreaCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAreaCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)'
    summary: Returns a collection of rectangular ranges that comprise this RangeAreas object.
    name: getAreas()
    fullName: getAreas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAreas(): Range[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas#getAreas~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)'
    summary: >-
      Returns the number of cells in the RangeAreas object, summing up the cell counts of all of the individual
      rectangular ranges. Returns -1 if the cell count exceeds 2^31-1 (2,147,483,647).
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)'
    summary: Returns a conditional format for the given ID.
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: The id of the conditional format.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)'
    summary: Returns a collection of ConditionalFormats that intersect with any cells in this RangeAreas object.
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)'
    summary: Returns a dataValidation object for all ranges in the RangeAreas.
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)'
    summary: >-
      Returns a RangeAreas object that represents the entire columns of the RangeAreas (for example, if the current
      RangeAreas represents cells "B4:E11, H2", it returns a RangeAreas that represents columns "B:E, H:H").
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)'
    summary: >-
      Returns a RangeAreas object that represents the entire rows of the RangeAreas (for example, if the current
      RangeAreas represents cells "B4:E11", it returns a RangeAreas that represents rows "4:11").
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)'
    summary: >-
      Returns a RangeFormat object, encapsulating the the font, fill, borders, alignment, and other properties for all
      ranges in the RangeAreas object.
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)'
    summary: >-
      Returns the RangeAreas object that represents the intersection of the given ranges or RangeAreas. If no
      intersection is found, a null object is returned.
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 'The range, RangeAreas, or address that will be used to determine the intersection.'
          type:
            - 'ExcelScript!ExcelScript.RangeAreas#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)'
    summary: 'Specifies if all the ranges on this RangeAreas object represent entire columns (e.g., "A:C, Q:Z").'
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)'
    summary: 'Specifies if all the ranges on this RangeAreas object represent entire rows (e.g., "1:3, 5:7").'
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)'
    summary: >-
      Returns an RangeAreas object that is shifted by the specific row and column offset. The dimension of the returned
      RangeAreas will match the original object. If the resulting RangeAreas is forced outside the bounds of the
      worksheet grid, an error will be thrown.
    name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getOffsetRangeAreas(
                    rowOffset: number,
                    columnOffset: number
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values are
            offset downward, and negative values are offset upward.
          type:
            - number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the RangeAreas is to be offset. Positive values
            are offset to the right, and negative values are offset to the left.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)'
    summary: >-
      Represents the style for all ranges in this RangeAreas object. If the styles of the cells are inconsistent, null
      will be returned. For custom styles, the style name will be returned. For built-in styles, a string representing a
      value in the BuiltInStyle enum will be returned.
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)'
    summary: >-
      Returns a RangeAreas object that represents all the cells that match the specified type and value. Returns a null
      object if no special cells are found that match the criteria.
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getTables:member(1)'
    summary: Returns a scoped collection of tables that overlap with any range in this RangeAreas object.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas#getTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'If true, returns only tables that are fully contained within the range bounds. Default is false.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)'
    summary: >-
      Returns the used RangeAreas that comprises all the used areas of individual rectangular ranges in the RangeAreas
      object. If there are no used cells within the RangeAreas, a null object will be returned.
    name: getUsedRangeAreas(valuesOnly)
    fullName: getUsedRangeAreas(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Whether to only consider cells with values as used cells.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)'
    summary: Returns the worksheet for the current RangeAreas.
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)'
    summary: Sets the RangeAreas to be recalculated when the next recalculation occurs.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)'
    summary: >-
      Represents the style for all ranges in this RangeAreas object. If the styles of the cells are inconsistent, null
      will be returned. For custom styles, the style name will be returned. For built-in styles, a string representing a
      value in the BuiltInStyle enum will be returned.
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.RangeAreas#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getAreas~0:complex'
    name: 'Range[]'
    fullName: 'ExcelScript.Range[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getIntersection~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.RangeAreas#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
