### YamlMime:TSType
name: ExcelScript.Chart
uid: 'ExcelScript!ExcelScript.Chart:interface'
package: ExcelScript!
fullName: ExcelScript.Chart
summary: Represents a chart object in a workbook.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: activate()
    uid: 'ExcelScript!ExcelScript.Chart#activate:member(1)'
    package: ExcelScript!
    fullName: activate()
    summary: Activates the chart in the Excel UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activate(): void;'
      return:
        type: void
        description: ''
  - name: 'addChartSeries(name, index)'
    uid: 'ExcelScript!ExcelScript.Chart#addChartSeries:member(1)'
    package: ExcelScript!
    fullName: 'addChartSeries(name, index)'
    summary: >-
      Add a new series to the collection. The new added series is not visible until values, x-axis values, or bubble
      sizes for it are set (depending on chart type).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addChartSeries(name?: string, index?: number): ChartSeries;'
      parameters:
        - id: name
          description: Optional. Name of the series.
          type: string
        - id: index
          description: Optional. Index value of the series to be added. Zero-indexed.
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartSeries:interface" />'
        description: ''
  - name: delete()
    uid: 'ExcelScript!ExcelScript.Chart#delete:member(1)'
    package: ExcelScript!
    fullName: delete()
    summary: Deletes the chart object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getAxes()
    uid: 'ExcelScript!ExcelScript.Chart#getAxes:member(1)'
    package: ExcelScript!
    fullName: getAxes()
    summary: Represents chart axes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAxes(): ChartAxes;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartAxes:interface" />'
        description: ''
  - name: getCategoryLabelLevel()
    uid: 'ExcelScript!ExcelScript.Chart#getCategoryLabelLevel:member(1)'
    package: ExcelScript!
    fullName: getCategoryLabelLevel()
    summary: 'Specifies a chart category label level enumeration constant, referring to the level of the source category labels.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCategoryLabelLevel(): number;'
      return:
        type: number
        description: ''
  - name: getChartType()
    uid: 'ExcelScript!ExcelScript.Chart#getChartType:member(1)'
    package: ExcelScript!
    fullName: getChartType()
    summary: Specifies the type of the chart. See `ExcelScript.ChartType` for details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getChartType(): ChartType;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartType:enum" />'
        description: ''
  - name: getDataLabels()
    uid: 'ExcelScript!ExcelScript.Chart#getDataLabels:member(1)'
    package: ExcelScript!
    fullName: getDataLabels()
    summary: Represents the data labels on the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataLabels(): ChartDataLabels;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartDataLabels:interface" />'
        description: ''
  - name: getDisplayBlanksAs()
    uid: 'ExcelScript!ExcelScript.Chart#getDisplayBlanksAs:member(1)'
    package: ExcelScript!
    fullName: getDisplayBlanksAs()
    summary: Specifies the way that blank cells are plotted on a chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDisplayBlanksAs(): ChartDisplayBlanksAs;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartDisplayBlanksAs:enum" />'
        description: ''
  - name: getFormat()
    uid: 'ExcelScript!ExcelScript.Chart#getFormat:member(1)'
    package: ExcelScript!
    fullName: getFormat()
    summary: Encapsulates the format properties for the chart area.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormat(): ChartAreaFormat;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartAreaFormat:interface" />'
        description: ''
  - name: getHeight()
    uid: 'ExcelScript!ExcelScript.Chart#getHeight:member(1)'
    package: ExcelScript!
    fullName: getHeight()
    summary: 'Specifies the height, in points, of the chart object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeight(): number;'
      return:
        type: number
        description: ''
  - name: getId()
    uid: 'ExcelScript!ExcelScript.Chart#getId:member(1)'
    package: ExcelScript!
    fullName: getId()
    summary: The unique ID of chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getId(): string;'
      return:
        type: string
        description: ''
  - name: 'getImage(width, height, fittingMode)'
    uid: 'ExcelScript!ExcelScript.Chart#getImage:member(1)'
    package: ExcelScript!
    fullName: 'getImage(width, height, fittingMode)'
    summary: >-
      Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions. The aspect ratio
      is preserved as part of the resizing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getImage(
                    width?: number,
                    height?: number,
                    fittingMode?: ImageFittingMode
                ): string;
      parameters:
        - id: width
          description: Optional. The desired width of the resulting image.
          type: number
        - id: height
          description: Optional. The desired height of the resulting image.
          type: number
        - id: fittingMode
          description: Optional. The method used to scale the chart to the specified dimensions (if both height and width are set).
          type: '<xref uid="ExcelScript!ExcelScript.ImageFittingMode:enum" />'
      return:
        type: string
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script returns an image of the first chart in the first worksheet.
           * That image is 600x400 pixels and the chart will be 
           * stretched to fill those dimensions.
           * The returned image can be used in a Power Automate flow.
           */
          function main(workbook: ExcelScript.Workbook): string {
            // Get the first chart in the first worksheet.
            const firstSheet = workbook.getFirstWorksheet();
            const firstChart = firstSheet.getCharts()[0];

            // Get an image of the chart as a base64-encoded string.
            const base64String = firstChart.getImage(
              600, /* Width */
              400, /* Height */
              ExcelScript.ImageFittingMode.fill /* Fill to match the dimensions. */
            );

            return base64String;
          }
          ```
  - name: getLeft()
    uid: 'ExcelScript!ExcelScript.Chart#getLeft:member(1)'
    package: ExcelScript!
    fullName: getLeft()
    summary: 'The distance, in points, from the left side of the chart to the worksheet origin.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLeft(): number;'
      return:
        type: number
        description: ''
  - name: getLegend()
    uid: 'ExcelScript!ExcelScript.Chart#getLegend:member(1)'
    package: ExcelScript!
    fullName: getLegend()
    summary: Represents the legend for the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLegend(): ChartLegend;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartLegend:interface" />'
        description: ''
  - name: getName()
    uid: 'ExcelScript!ExcelScript.Chart#getName:member(1)'
    package: ExcelScript!
    fullName: getName()
    summary: Specifies the name of a chart object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getName(): string;'
      return:
        type: string
        description: ''
  - name: getPivotOptions()
    uid: 'ExcelScript!ExcelScript.Chart#getPivotOptions:member(1)'
    package: ExcelScript!
    fullName: getPivotOptions()
    summary: Encapsulates the options for a pivot chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotOptions(): ChartPivotOptions;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartPivotOptions:interface" />'
        description: ''
  - name: getPlotArea()
    uid: 'ExcelScript!ExcelScript.Chart#getPlotArea:member(1)'
    package: ExcelScript!
    fullName: getPlotArea()
    summary: Represents the plot area for the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPlotArea(): ChartPlotArea;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartPlotArea:interface" />'
        description: ''
  - name: getPlotBy()
    uid: 'ExcelScript!ExcelScript.Chart#getPlotBy:member(1)'
    package: ExcelScript!
    fullName: getPlotBy()
    summary: Specifies the way columns or rows are used as data series on the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPlotBy(): ChartPlotBy;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartPlotBy:enum" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample performs the "Switch Row/Column" action on a chart named "ColumnClusteredChart".
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get an existing chart named "ColumnClusteredChart".
            let columnClusteredChart = selectedSheet.getChart("ColumnClusteredChart");
            
            // Switch the row and column for the chart's data source.
            if (columnClusteredChart.getPlotBy() === ExcelScript.ChartPlotBy.columns) {
              // If the chart is grouped by columns, switch it to rows.
              columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.rows);
            } else {
              // If the chart is grouped by rows, switch it to columns.
              columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.columns);
            }
          }
          ```
  - name: getPlotVisibleOnly()
    uid: 'ExcelScript!ExcelScript.Chart#getPlotVisibleOnly:member(1)'
    package: ExcelScript!
    fullName: getPlotVisibleOnly()
    summary: True if only visible cells are plotted. False if both visible and hidden cells are plotted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPlotVisibleOnly(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getSeries()
    uid: 'ExcelScript!ExcelScript.Chart#getSeries:member(1)'
    package: ExcelScript!
    fullName: getSeries()
    summary: Represents either a single series or collection of series in the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSeries(): ChartSeries[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartSeries:interface" />[]'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample sets the overlap of the columns in a chart named "ColumnClusteredChart".
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get an existing chart named "ColumnClusteredChart".
            let chart = selectedSheet.getChart("ColumnClusteredChart");

            // Set the overlap of every column of each series within a category.
            let seriesList = chart.getSeries();
            seriesList.forEach((series) => {
              // An overlap of 25 means the columns have 25% of their length overlapping with the adjacent columns in the same category.
              series.setOverlap(25);
            });
          }
          ```
  - name: getSeriesNameLevel()
    uid: 'ExcelScript!ExcelScript.Chart#getSeriesNameLevel:member(1)'
    package: ExcelScript!
    fullName: getSeriesNameLevel()
    summary: 'Specifies a chart series name level enumeration constant, referring to the level of the source series names.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSeriesNameLevel(): number;'
      return:
        type: number
        description: ''
  - name: getShowAllFieldButtons()
    uid: 'ExcelScript!ExcelScript.Chart#getShowAllFieldButtons:member(1)'
    package: ExcelScript!
    fullName: getShowAllFieldButtons()
    summary: Specifies whether to display all field buttons on a PivotChart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getShowAllFieldButtons(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getShowDataLabelsOverMaximum()
    uid: 'ExcelScript!ExcelScript.Chart#getShowDataLabelsOverMaximum:member(1)'
    package: ExcelScript!
    fullName: getShowDataLabelsOverMaximum()
    summary: >-
      Specifies whether to show the data labels when the value is greater than the maximum value on the value axis. If
      the value axis becomes smaller than the size of the data points, you can use this property to set whether to show
      the data labels. This property applies to 2-D charts only.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getShowDataLabelsOverMaximum(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getStyle()
    uid: 'ExcelScript!ExcelScript.Chart#getStyle:member(1)'
    package: ExcelScript!
    fullName: getStyle()
    summary: Specifies the chart style for the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getStyle(): number;'
      return:
        type: number
        description: ''
  - name: getTitle()
    uid: 'ExcelScript!ExcelScript.Chart#getTitle:member(1)'
    package: ExcelScript!
    fullName: getTitle()
    summary: >-
      Represents the title of the specified chart, including the text, visibility, position, and formatting of the
      title.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTitle(): ChartTitle;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ChartTitle:interface" />'
        description: ''
  - name: getTop()
    uid: 'ExcelScript!ExcelScript.Chart#getTop:member(1)'
    package: ExcelScript!
    fullName: getTop()
    summary: >-
      Specifies the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top
      of the chart area (on a chart).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTop(): number;'
      return:
        type: number
        description: ''
  - name: getWidth()
    uid: 'ExcelScript!ExcelScript.Chart#getWidth:member(1)'
    package: ExcelScript!
    fullName: getWidth()
    summary: 'Specifies the width, in points, of the chart object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWidth(): number;'
      return:
        type: number
        description: ''
  - name: getWorksheet()
    uid: 'ExcelScript!ExcelScript.Chart#getWorksheet:member(1)'
    package: ExcelScript!
    fullName: getWorksheet()
    summary: The worksheet containing the current chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Worksheet:interface" />'
        description: ''
  - name: setCategoryLabelLevel(categoryLabelLevel)
    uid: 'ExcelScript!ExcelScript.Chart#setCategoryLabelLevel:member(1)'
    package: ExcelScript!
    fullName: setCategoryLabelLevel(categoryLabelLevel)
    summary: 'Specifies a chart category label level enumeration constant, referring to the level of the source category labels.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setCategoryLabelLevel(categoryLabelLevel: number): void;'
      parameters:
        - id: categoryLabelLevel
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setChartType(chartType)
    uid: 'ExcelScript!ExcelScript.Chart#setChartType:member(1)'
    package: ExcelScript!
    fullName: setChartType(chartType)
    summary: Specifies the type of the chart. See `ExcelScript.ChartType` for details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setChartType(chartType: ChartType): void;'
      parameters:
        - id: chartType
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.ChartType:enum" />'
      return:
        type: void
        description: ''
  - name: 'setData(sourceData, seriesBy)'
    uid: 'ExcelScript!ExcelScript.Chart#setData:member(1)'
    package: ExcelScript!
    fullName: 'setData(sourceData, seriesBy)'
    summary: Resets the source data for the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setData(sourceData: Range, seriesBy?: ChartSeriesBy): void;'
      parameters:
        - id: sourceData
          description: The range object corresponding to the source data.
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        - id: seriesBy
          description: >-
            Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto
            (default), Rows, and Columns. See `ExcelScript.ChartSeriesBy` for details.
          type: '<xref uid="ExcelScript!ExcelScript.ChartSeriesBy:enum" />'
      return:
        type: void
        description: ''
  - name: setDisplayBlanksAs(displayBlanksAs)
    uid: 'ExcelScript!ExcelScript.Chart#setDisplayBlanksAs:member(1)'
    package: ExcelScript!
    fullName: setDisplayBlanksAs(displayBlanksAs)
    summary: Specifies the way that blank cells are plotted on a chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDisplayBlanksAs(displayBlanksAs: ChartDisplayBlanksAs): void;'
      parameters:
        - id: displayBlanksAs
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.ChartDisplayBlanksAs:enum" />'
      return:
        type: void
        description: ''
  - name: setHeight(height)
    uid: 'ExcelScript!ExcelScript.Chart#setHeight:member(1)'
    package: ExcelScript!
    fullName: setHeight(height)
    summary: 'Specifies the height, in points, of the chart object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setHeight(height: number): void;'
      parameters:
        - id: height
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setLeft(left)
    uid: 'ExcelScript!ExcelScript.Chart#setLeft:member(1)'
    package: ExcelScript!
    fullName: setLeft(left)
    summary: 'The distance, in points, from the left side of the chart to the worksheet origin.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setLeft(left: number): void;'
      parameters:
        - id: left
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setName(name)
    uid: 'ExcelScript!ExcelScript.Chart#setName:member(1)'
    package: ExcelScript!
    fullName: setName(name)
    summary: Specifies the name of a chart object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setName(name: string): void;'
      parameters:
        - id: name
          description: ''
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample creates a column-clustered chart based on the current worksheet's data.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the data range.
            let range = selectedSheet.getUsedRange();

            // Insert a chart using the data on the current worksheet.
            let chart = selectedSheet.addChart(ExcelScript.ChartType.columnClustered, range);

            // Name the chart for easy access in other scripts.
            chart.setName("ColumnChart");
          }
          ```
  - name: setPlotBy(plotBy)
    uid: 'ExcelScript!ExcelScript.Chart#setPlotBy:member(1)'
    package: ExcelScript!
    fullName: setPlotBy(plotBy)
    summary: Specifies the way columns or rows are used as data series on the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPlotBy(plotBy: ChartPlotBy): void;'
      parameters:
        - id: plotBy
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.ChartPlotBy:enum" />'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample performs the "Switch Row/Column" action on a chart named "ColumnClusteredChart".
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get an existing chart named "ColumnClusteredChart".
            let columnClusteredChart = selectedSheet.getChart("ColumnClusteredChart");
            
            // Switch the row and column for the chart's data source.
            if (columnClusteredChart.getPlotBy() === ExcelScript.ChartPlotBy.columns) {
              // If the chart is grouped by columns, switch it to rows.
              columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.rows);
            } else {
              // If the chart is grouped by rows, switch it to columns.
              columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.columns);
            }
          }
          ```
  - name: setPlotVisibleOnly(plotVisibleOnly)
    uid: 'ExcelScript!ExcelScript.Chart#setPlotVisibleOnly:member(1)'
    package: ExcelScript!
    fullName: setPlotVisibleOnly(plotVisibleOnly)
    summary: True if only visible cells are plotted. False if both visible and hidden cells are plotted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPlotVisibleOnly(plotVisibleOnly: boolean): void;'
      parameters:
        - id: plotVisibleOnly
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: 'setPosition(startCell, endCell)'
    uid: 'ExcelScript!ExcelScript.Chart#setPosition:member(1)'
    package: ExcelScript!
    fullName: 'setPosition(startCell, endCell)'
    summary: Positions the chart relative to cells on the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPosition(startCell: Range | string, endCell?: Range | string): void;'
      parameters:
        - id: startCell
          description: >-
            The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell,
            depending on the user's right-to-left display settings.
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
        - id: endCell
          description: >-
            Optional. The end cell. If specified, the chart's width and height will be set to fully cover up this
            cell/range.
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: void
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This sample moves an existing chart to a specific place on the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();
            
            // Get an existing chart named "ColumnChart".
            let chart = selectedSheet.getChart("ColumnChart");

            // Place the chart over the range "F1:L13".
            chart.setPosition("F1", "L13");
          }
          ```
  - name: setSeriesNameLevel(seriesNameLevel)
    uid: 'ExcelScript!ExcelScript.Chart#setSeriesNameLevel:member(1)'
    package: ExcelScript!
    fullName: setSeriesNameLevel(seriesNameLevel)
    summary: 'Specifies a chart series name level enumeration constant, referring to the level of the source series names.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setSeriesNameLevel(seriesNameLevel: number): void;'
      parameters:
        - id: seriesNameLevel
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setShowAllFieldButtons(showAllFieldButtons)
    uid: 'ExcelScript!ExcelScript.Chart#setShowAllFieldButtons:member(1)'
    package: ExcelScript!
    fullName: setShowAllFieldButtons(showAllFieldButtons)
    summary: Specifies whether to display all field buttons on a PivotChart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setShowAllFieldButtons(showAllFieldButtons: boolean): void;'
      parameters:
        - id: showAllFieldButtons
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setShowDataLabelsOverMaximum(showDataLabelsOverMaximum)
    uid: 'ExcelScript!ExcelScript.Chart#setShowDataLabelsOverMaximum:member(1)'
    package: ExcelScript!
    fullName: setShowDataLabelsOverMaximum(showDataLabelsOverMaximum)
    summary: >-
      Specifies whether to show the data labels when the value is greater than the maximum value on the value axis. If
      the value axis becomes smaller than the size of the data points, you can use this property to set whether to show
      the data labels. This property applies to 2-D charts only.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setShowDataLabelsOverMaximum(showDataLabelsOverMaximum: boolean): void;'
      parameters:
        - id: showDataLabelsOverMaximum
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setStyle(style)
    uid: 'ExcelScript!ExcelScript.Chart#setStyle:member(1)'
    package: ExcelScript!
    fullName: setStyle(style)
    summary: Specifies the chart style for the chart.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setStyle(style: number): void;'
      parameters:
        - id: style
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setTop(top)
    uid: 'ExcelScript!ExcelScript.Chart#setTop:member(1)'
    package: ExcelScript!
    fullName: setTop(top)
    summary: >-
      Specifies the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top
      of the chart area (on a chart).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setTop(top: number): void;'
      parameters:
        - id: top
          description: ''
          type: number
      return:
        type: void
        description: ''
  - name: setWidth(width)
    uid: 'ExcelScript!ExcelScript.Chart#setWidth:member(1)'
    package: ExcelScript!
    fullName: setWidth(width)
    summary: 'Specifies the width, in points, of the chart object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setWidth(width: number): void;'
      parameters:
        - id: width
          description: ''
          type: number
      return:
        type: void
        description: ''
