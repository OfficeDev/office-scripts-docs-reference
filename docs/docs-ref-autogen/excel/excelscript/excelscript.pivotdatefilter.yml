### YamlMime:TSType
name: ExcelScript.PivotDateFilter
uid: 'ExcelScript!ExcelScript.PivotDateFilter:interface'
package: ExcelScript!
fullName: ExcelScript.PivotDateFilter
summary: >-
  Configurable template for a date filter to apply to a PivotField. The `condition` defines what criteria need to be set
  in order for the filter to operate.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: comparator
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#comparator:member'
    package: ExcelScript!
    fullName: comparator
    summary: >-
      The comparator is the static value to which other values are compared. The type of comparison is defined by the
      condition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'comparator?: FilterDatetime;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />'
  - name: condition
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#condition:member'
    package: ExcelScript!
    fullName: condition
    summary: 'Specifies the condition for the filter, which defines the necessary filtering criteria.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'condition: DateFilterCondition;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.DateFilterCondition:enum" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script applies a filter to a PivotTable that filters out rows 
           * that aren't from this month.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the "Date Recorded" field to filter. 
            // The data in this field must be dates in order for the filter to work.
            const pivot = workbook.getPivotTables()[0];
            const rowHierarchy = pivot.getRowHierarchy("Date Recorded");
            const rowField = rowHierarchy.getFields()[0];

            // Apply the date filter.
            rowField.applyFilter({
              dateFilter: {
                // Setting the condition to `thisMonth` means items that are before or
                // after this month will not be displayed.
                condition: ExcelScript.DateFilterCondition.thisMonth
              }
            });
          }
          ```
  - name: exclusive
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#exclusive:member'
    package: ExcelScript!
    fullName: exclusive
    summary: >-
      If `true`<!-- -->, filter \*excludes\* items that meet criteria. The default is `false` (filter to include items
      that meet criteria).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exclusive?: boolean;'
      return:
        type: boolean
  - name: lowerBound
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#lowerBound:member'
    package: ExcelScript!
    fullName: lowerBound
    summary: The lower-bound of the range for the `between` filter condition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lowerBound?: FilterDatetime;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />'
        description: |-


          #### Examples

          ```TypeScript
          /**
           * This script applies a filter to a PivotTable that filters it
           * to only show rows from between June 20th, 2022 and July 10th, 2022.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the "Date Recorded" field to filter. 
            // The data in this field must be dates in order for the filter to work.
            const pivot = workbook.getPivotTables()[0];
            const rowHierarchy = pivot.getRowHierarchy("Date Recorded");
            const rowField = rowHierarchy.getFields()[0];

            // Create the filter's date boundaries.
            let earliestDate: ExcelScript.FilterDatetime = {
              date: "2022-06-20",
              specificity: ExcelScript.FilterDatetimeSpecificity.day
            };
            let latestDate: ExcelScript.FilterDatetime = {
              date: "2022-07-10",
              specificity: ExcelScript.FilterDatetimeSpecificity.day
            };

            // Apply the date filter.
            rowField.applyFilter({
              dateFilter: {
                condition: ExcelScript.DateFilterCondition.between,
                lowerBound: earliestDate,
                upperBound: latestDate
              }
            });
          }
          ```
  - name: upperBound
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#upperBound:member'
    package: ExcelScript!
    fullName: upperBound
    summary: The upper-bound of the range for the `between` filter condition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'upperBound?: FilterDatetime;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />'
  - name: wholeDays
    uid: 'ExcelScript!ExcelScript.PivotDateFilter#wholeDays:member'
    package: ExcelScript!
    fullName: wholeDays
    summary: >-
      For `equals`<!-- -->, `before`<!-- -->, `after`<!-- -->, and `between` filter conditions, indicates if comparisons
      should be made as whole days.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'wholeDays?: boolean;'
      return:
        type: boolean
