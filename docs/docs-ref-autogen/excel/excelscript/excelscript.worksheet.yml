### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    summary: >-
      An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc. To learn more about the worksheet
      object model, read [Work with worksheets using the Excel JavaScript
      API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.
    name: ExcelScript.Worksheet
    fullName: ExcelScript.Worksheet
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Worksheet#activate:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addChart:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addComment:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addGeometricShape:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addGroup:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addHorizontalPageBreak:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addImage:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addLine:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addNamedItem:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addNamedItemFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addPivotTable:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addSlicer:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addTable:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addTextBox:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#addVerticalPageBreak:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#calculate:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#copy:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#delete:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#findAll:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getAutoFilter:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getCell:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getChart:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getCharts:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getComment:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getCommentByCell:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getCommentByReplyId:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getComments:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getEnableCalculation:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getFreezePanes:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getHorizontalPageBreaks:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getId:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getName:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getNamedItem:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getNames:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getNext:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getPageLayout:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getPivotTable:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getPosition:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getPrevious:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getProtection:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getRange:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getRangeByIndexes:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getRanges:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getShape:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getShapes:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getShowGridlines:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getShowHeadings:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getSlicer:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getSlicers:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getStandardHeight:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getStandardWidth:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getTabColor:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getTable:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getUsedRange:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getVerticalPageBreaks:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#getVisibility:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#refreshAllPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#removeAllHorizontalPageBreaks:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#removeAllVerticalPageBreaks:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#replaceAll:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setEnableCalculation:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setName:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setPosition:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setShowGridlines:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setShowHeadings:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setStandardWidth:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setTabColor:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#setVisibility:member(1)'
      - 'ExcelScript!ExcelScript.Worksheet#showOutlineLevels:member(1)'
  - uid: 'ExcelScript!ExcelScript.Worksheet#activate:member(1)'
    summary: Activate the worksheet in the Excel UI.
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#addChart:member(1)'
    summary: Creates a new chart.
    name: 'addChart(type, sourceData, seriesBy)'
    fullName: 'addChart(type, sourceData, seriesBy)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addChart(
                    type: ChartType,
                    sourceData: Range,
                    seriesBy?: ChartSeriesBy
                ): Chart;
      return:
        type:
          - 'ExcelScript!ExcelScript.Chart:interface'
        description: ''
      parameters:
        - id: type
          description: Represents the type of a chart. See Excel.ChartType for details.
          type:
            - 'ExcelScript!ExcelScript.ChartType:enum'
        - id: sourceData
          description: The Range object corresponding to the source data.
          type:
            - 'ExcelScript!ExcelScript.Range:interface'
        - id: seriesBy
          description: >-
            Optional. Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy
            for details.
          type:
            - 'ExcelScript!ExcelScript.ChartSeriesBy:enum'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addComment:member(1)'
    summary: >-
      Creates a new comment with the given content on the given cell. An `InvalidArgument` error is thrown if the
      provided range is larger than one cell.
    name: 'addComment(cellAddress, content, contentType)'
    fullName: 'addComment(cellAddress, content, contentType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addComment(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType
                ): Comment;
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: >-
            The cell to which the comment is added. This can be a Range object or a string. If it's a string, it must
            contain the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided
            range is larger than one cell.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addComment~0:complex'
        - id: content
          description: >-
            The comment's content. This can be either a string or CommentRichContent object. Strings are used for plain
            text. CommentRichContent objects allow for other comment features, such as mentions.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addComment~1:complex'
        - id: contentType
          description: >-
            Optional. The type of content contained within the comment. The default value is enum
            `ContentType.Plain`<!-- -->.
          type:
            - 'ExcelScript!ExcelScript.ContentType:enum'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addGeometricShape:member(1)'
    summary: Adds a geometric shape to the worksheet. Returns a Shape object that represents the new shape.
    name: addGeometricShape(geometricShapeType)
    fullName: addGeometricShape(geometricShapeType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGeometricShape(geometricShapeType: GeometricShapeType): Shape;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: geometricShapeType
          description: Represents the type of the geometric shape. See Excel.GeometricShapeType for details.
          type:
            - 'ExcelScript!ExcelScript.GeometricShapeType:enum'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addGroup:member(1)'
    summary: >-
      Groups a subset of shapes in this collection's worksheet. Returns a Shape object that represents the new group of
      shapes.
    name: addGroup(values)
    fullName: addGroup(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addGroup(values: Array<string | Shape>): Shape;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: values
          description: An array of shape ID or shape objects.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addGroup~0:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addHorizontalPageBreak:member(1)'
    summary: Adds a page break before the top-left cell of the range specified.
    name: addHorizontalPageBreak(pageBreakRange)
    fullName: addHorizontalPageBreak(pageBreakRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHorizontalPageBreak(pageBreakRange: Range | string): PageBreak;'
      return:
        type:
          - 'ExcelScript!ExcelScript.PageBreak:interface'
        description: ''
      parameters:
        - id: pageBreakRange
          description: The range immediately after the page break to be added.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addHorizontalPageBreak~0:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addImage:member(1)'
    summary: >-
      Creates an image from a base64-encoded string and adds it to the worksheet. Returns the Shape object that
      represents the new image.
    name: addImage(base64ImageString)
    fullName: addImage(base64ImageString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addImage(base64ImageString: string): Shape;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: base64ImageString
          description: A base64-encoded string representing an image in either JPEG or PNG format.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#addLine:member(1)'
    summary: Adds a line to worksheet. Returns a Shape object that represents the new line.
    name: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    fullName: 'addLine(startLeft, startTop, endLeft, endTop, connectorType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addLine(
                    startLeft: number,
                    startTop: number,
                    endLeft: number,
                    endTop: number,
                    connectorType?: ConnectorType
                ): Shape;
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: startLeft
          description: 'The distance, in points, from the start of the line to the left side of the worksheet.'
          type:
            - number
        - id: startTop
          description: 'The distance, in points, from the start of the line to the top of the worksheet.'
          type:
            - number
        - id: endLeft
          description: 'The distance, in points, from the end of the line to the left of the worksheet.'
          type:
            - number
        - id: endTop
          description: 'The distance, in points, from the end of the line to the top of the worksheet.'
          type:
            - number
        - id: connectorType
          description: Represents the connector type. See Excel.ConnectorType for details.
          type:
            - 'ExcelScript!ExcelScript.ConnectorType:enum'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addNamedItem:member(1)'
    summary: Adds a new name to the collection of the given scope.
    name: 'addNamedItem(name, reference, comment)'
    fullName: 'addNamedItem(name, reference, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItem(
                    name: string,
                    reference: Range | string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'ExcelScript!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: The name of the named item.
          type:
            - string
        - id: reference
          description: The formula or the range that the name will refer to.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addNamedItem~0:complex'
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#addNamedItemFormulaLocal:member(1)'
    summary: Adds a new name to the collection of the given scope using the user's locale for the formula.
    name: 'addNamedItemFormulaLocal(name, formula, comment)'
    fullName: 'addNamedItemFormulaLocal(name, formula, comment)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addNamedItemFormulaLocal(
                    name: string,
                    formula: string,
                    comment?: string
                ): NamedItem;
      return:
        type:
          - 'ExcelScript!ExcelScript.NamedItem:interface'
        description: ''
      parameters:
        - id: name
          description: The "name" of the named item.
          type:
            - string
        - id: formula
          description: The formula in the user's locale that the name will refer to.
          type:
            - string
        - id: comment
          description: Optional. The comment associated with the named item.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#addPivotTable:member(1)'
    summary: Add a PivotTable based on the specified source data and insert it at the top-left cell of the destination range.
    name: 'addPivotTable(name, source, destination)'
    fullName: 'addPivotTable(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addPivotTable(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      return:
        type:
          - 'ExcelScript!ExcelScript.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: The name of the new PivotTable.
          type:
            - string
        - id: source
          description: >-
            The source data for the new PivotTable, this can either be a range (or string address including the
            worksheet name) or a table.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addPivotTable~0:complex'
        - id: destination
          description: >-
            The cell in the upper-left corner of the PivotTable report's destination range (the range on the worksheet
            where the resulting report will be placed).
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addPivotTable~1:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addSlicer:member(1)'
    summary: Adds a new slicer to the workbook.
    name: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    fullName: 'addSlicer(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        addSlicer(
                    slicerSource: string | PivotTable | Table,
                    sourceField: string | PivotField | number | TableColumn,
                    slicerDestination?: string | Worksheet
                ): Slicer;
      return:
        type:
          - 'ExcelScript!ExcelScript.Slicer:interface'
        description: ''
      parameters:
        - id: slicerSource
          description: >-
            The data source that the new slicer will be based on. It can be a PivotTable object, a Table object or a
            string. When a PivotTable object is passed, the data source is the source of the PivotTable object. When a
            Table object is passed, the data source is the Table object. When a string is passed, it is interpreted as
            the name/id of a PivotTable/Table.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addSlicer~0:complex'
        - id: sourceField
          description: >-
            The field in the data source to filter by. It can be a PivotField object, a TableColumn object, the id of a
            PivotField or the id/name of TableColumn.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addSlicer~1:complex'
        - id: slicerDestination
          description: >-
            Optional. The worksheet where the new slicer will be created in. It can be a Worksheet object or the name/id
            of a worksheet. This parameter can be omitted if the slicer collection is retrieved from worksheet.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addSlicer~2:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addTable:member(1)'
    summary: >-
      Create a new table. The range object or source address determines the worksheet under which the table will be
      added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another
      table), an error will be thrown.
    name: 'addTable(address, hasHeaders)'
    fullName: 'addTable(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Table:interface'
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample creates a table from the current worksheet's used range, then sorts it based on the first column.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Create a table with the used cells.
            let usedRange = selectedSheet.getUsedRange();
            let newTable = selectedSheet.addTable(usedRange, true);

            // Sort the table using the first column.
            newTable.getSort().apply([{ key: 0, ascending: true }]);
          }
          ```
      parameters:
        - id: address
          description: >-
            A Range object, or a string address or name of the range representing the data source. If the address does
            not contain a sheet name, the currently-active sheet is used.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addTable~0:complex'
        - id: hasHeaders
          description: >-
            Boolean value that indicates whether the data being imported has column labels. If the source does not
            contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting
            the data down by one row.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#addTextBox:member(1)'
    summary: >-
      Adds a text box to the worksheet with the provided text as the content. Returns a Shape object that represents the
      new text box.
    name: addTextBox(text)
    fullName: addTextBox(text)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addTextBox(text?: string): Shape;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: text
          description: Represents the text that will be shown in the created text box.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#addVerticalPageBreak:member(1)'
    summary: Adds a page break before the top-left cell of the range specified.
    name: addVerticalPageBreak(pageBreakRange)
    fullName: addVerticalPageBreak(pageBreakRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addVerticalPageBreak(pageBreakRange: Range | string): PageBreak;'
      return:
        type:
          - 'ExcelScript!ExcelScript.PageBreak:interface'
        description: ''
      parameters:
        - id: pageBreakRange
          description: The range immediately after the page break to be added.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#addVerticalPageBreak~0:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#calculate:member(1)'
    summary: Calculates all cells on a worksheet.
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: 'True, to mark all as dirty.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#copy:member(1)'
    summary: Copies a worksheet and places it at the specified position.
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copy(
                    positionType?: WorksheetPositionType,
                    relativeTo?: Worksheet
                ): Worksheet;
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: positionType
          description: >-
            The location in the workbook to place the newly created worksheet. The default value is "None", which
            inserts the worksheet at the beginning of the worksheet.
          type:
            - 'ExcelScript!ExcelScript.WorksheetPositionType:enum'
        - id: relativeTo
          description: >-
            The existing worksheet which determines the newly created worksheet's position. This is only needed if
            `positionType` is "Before" or "After".
          type:
            - 'ExcelScript!ExcelScript.Worksheet:interface'
  - uid: 'ExcelScript!ExcelScript.Worksheet#delete:member(1)'
    summary: >-
      Deletes the worksheet from the workbook. Note that if the worksheet's visibility is set to "VeryHidden", the
      delete operation will fail with an `InvalidOperation` exception. You should first change its visibility to hidden
      or visible before deleting it.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /**
           * The following scripts removes the first worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the first worksheet.
            let sheet = workbook.getWorksheets()[0];

            // Remove that worksheet from the workbook.
            sheet.delete();
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Worksheet#findAll:member(1)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object,
      comprising one or more rectangular ranges.
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: text
          description: The string to find.
          type:
            - string
        - id: criteria
          description: >-
            Additional search criteria, including whether the search needs to match the entire cell or be case
            sensitive.
          type:
            - 'ExcelScript!ExcelScript.WorksheetSearchCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getAutoFilter:member(1)'
    summary: Represents the AutoFilter object of the worksheet.
    name: getAutoFilter()
    fullName: getAutoFilter()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAutoFilter(): AutoFilter;'
      return:
        type:
          - 'ExcelScript!ExcelScript.AutoFilter:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCell:member(1)'
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it stays within the worksheet grid.
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: The row number of the cell to be retrieved. Zero-indexed.
          type:
            - number
        - id: column
          description: the column number of the cell to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Worksheet#getChart:member(1)'
    summary: >-
      Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned. If
      the chart does not exist, will return a null object.
    name: getChart(name)
    fullName: getChart(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getChart(name: string): Chart | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getChart~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the chart to be retrieved.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCharts:member(1)'
    summary: Returns a collection of charts that are part of the worksheet.
    name: getCharts()
    fullName: getCharts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCharts(): Chart[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getCharts~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getComment:member(1)'
    summary: Gets a comment from the collection based on its ID.
    name: getComment(commentId)
    fullName: getComment(commentId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComment(commentId: string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: commentId
          description: The identifier for the comment.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCommentByCell:member(1)'
    summary: Gets the comment from the specified cell.
    name: getCommentByCell(cellAddress)
    fullName: getCommentByCell(cellAddress)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByCell(cellAddress: Range | string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: >-
            The cell which the comment is on. This can be a Range object or a string. If it's a string, it must contain
            the full address, including the sheet name. An `InvalidArgument` error is thrown if the provided range is
            larger than one cell.
          type:
            - 'ExcelScript!ExcelScript.Worksheet#getCommentByCell~0:complex'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCommentByReplyId:member(1)'
    summary: Gets the comment to which the given reply is connected.
    name: getCommentByReplyId(replyId)
    fullName: getCommentByReplyId(replyId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCommentByReplyId(replyId: string): Comment;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Comment:interface'
        description: ''
      parameters:
        - id: replyId
          description: The identifier of comment reply.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getComments:member(1)'
    summary: Returns a collection of all the Comments objects on the worksheet.
    name: getComments()
    fullName: getComments()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComments(): Comment[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getComments~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getEnableCalculation:member(1)'
    summary: >-
      Determines if Excel should recalculate the worksheet when necessary. True if Excel recalculates the worksheet when
      necessary. False if Excel doesn't recalculate the sheet.
    name: getEnableCalculation()
    fullName: getEnableCalculation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEnableCalculation(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getFreezePanes:member(1)'
    summary: Gets an object that can be used to manipulate frozen panes on the worksheet.
    name: getFreezePanes()
    fullName: getFreezePanes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFreezePanes(): WorksheetFreezePanes;'
      return:
        type:
          - 'ExcelScript!ExcelScript.WorksheetFreezePanes:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getHorizontalPageBreaks:member(1)'
    summary: Gets the horizontal page break collection for the worksheet. This collection only contains manual page breaks.
    name: getHorizontalPageBreaks()
    fullName: getHorizontalPageBreaks()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHorizontalPageBreaks(): PageBreak[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getHorizontalPageBreaks~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getId:member(1)'
    summary: >-
      Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains
      the same even when the worksheet is renamed or moved.
    name: getId()
    fullName: getId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getId(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getName:member(1)'
    summary: The display name of the worksheet.
    name: getName()
    fullName: getName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getName(): string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample gets all the worksheet names in the workbook.
           * It then logs those names to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
              // Create an array to hold the worksheet names.
              let worksheetNames = [];

              // Iterate over the worksheet collection in the workbook.
              for (let worksheet of workbook.getWorksheets()) {
                  worksheetNames.push(worksheet.getName());
              }

              // Log the array of worksheet names.
              console.log(worksheetNames);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Worksheet#getNamedItem:member(1)'
    summary: 'Gets a NamedItem object using its name. If the nameditem object does not exist, will return a null object.'
    name: getNamedItem(name)
    fullName: getNamedItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNamedItem(name: string): NamedItem | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getNamedItem~0:complex'
        description: ''
      parameters:
        - id: name
          description: Nameditem name.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getNames:member(1)'
    summary: Collection of names scoped to the current worksheet.
    name: getNames()
    fullName: getNames()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNames(): NamedItem[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getNames~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getNext:member(1)'
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a
      null object.
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPageLayout:member(1)'
    summary: Gets the PageLayout object of the worksheet.
    name: getPageLayout()
    fullName: getPageLayout()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPageLayout(): PageLayout;'
      return:
        type:
          - 'ExcelScript!ExcelScript.PageLayout:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPivotTable:member(1)'
    summary: 'Gets a PivotTable by name. If the PivotTable does not exist, will return a null object.'
    name: getPivotTable(name)
    fullName: getPivotTable(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTable(name: string): PivotTable | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getPivotTable~0:complex'
        description: ''
      parameters:
        - id: name
          description: Name of the PivotTable to be retrieved.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPivotTables:member(1)'
    summary: Collection of PivotTables that are part of the worksheet.
    name: getPivotTables()
    fullName: getPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getPivotTables~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPosition:member(1)'
    summary: The zero-based position of the worksheet within the workbook.
    name: getPosition()
    fullName: getPosition()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPosition(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPrevious:member(1)'
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null
      objet.
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. If true, considers only visible worksheets, skipping over any hidden ones.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#getProtection:member(1)'
    summary: Returns sheet protection object for a worksheet.
    name: getProtection()
    fullName: getProtection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProtection(): WorksheetProtection;'
      return:
        type:
          - 'ExcelScript!ExcelScript.WorksheetProtection:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getRange:member(1)'
    summary: 'Gets the range object, representing a single rectangular block of cells, specified by the address or name.'
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### Examples

          ```javascript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
      parameters:
        - id: address
          description: >-
            Optional. The string representing the address or name of the range. For example, "A1:B2". If not specified,
            the entire worksheet range is returned.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getRangeByIndexes:member(1)'
    summary: >-
      Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows
      and columns.
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: startRow
          description: Start row (zero-indexed).
          type:
            - number
        - id: startColumn
          description: Start column (zero-indexed).
          type:
            - number
        - id: rowCount
          description: Number of rows to include in the range.
          type:
            - number
        - id: columnCount
          description: Number of columns to include in the range.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Worksheet#getRanges:member(1)'
    summary: >-
      Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or
      name.
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: address
          description: >-
            Optional. A string containing the comma-separated addresses or names of the individual ranges. For example,
            "A1:B2, A5:B5". If not specified, an RangeArea object for the entire worksheet is returned.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getShape:member(1)'
    summary: Gets a shape using its Name or ID.
    name: getShape(key)
    fullName: getShape(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShape(key: string): Shape;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Shape:interface'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the shape to be retrieved.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getShapes:member(1)'
    summary: Returns the collection of all the Shape objects on the worksheet.
    name: getShapes()
    fullName: getShapes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShapes(): Shape[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getShapes~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getShowGridlines:member(1)'
    summary: Specifies if gridlines are visible to the user.
    name: getShowGridlines()
    fullName: getShowGridlines()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShowGridlines(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getShowHeadings:member(1)'
    summary: Specifies if headings are visible to the user.
    name: getShowHeadings()
    fullName: getShowHeadings()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getShowHeadings(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getSlicer:member(1)'
    summary: 'Gets a slicer using its name or id. If the slicer does not exist, will return a null object.'
    name: getSlicer(key)
    fullName: getSlicer(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicer(key: string): Slicer | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getSlicer~0:complex'
        description: ''
      parameters:
        - id: key
          description: Name or Id of the slicer to be retrieved.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getSlicers:member(1)'
    summary: Returns a collection of slicers that are part of the worksheet.
    name: getSlicers()
    fullName: getSlicers()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSlicers(): Slicer[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getSlicers~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getStandardHeight:member(1)'
    summary: 'Returns the standard (default) height of all the rows in the worksheet, in points.'
    name: getStandardHeight()
    fullName: getStandardHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getStandardHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getStandardWidth:member(1)'
    summary: >-
      Specifies the standard (default) width of all the columns in the worksheet. One unit of column width is equal to
      the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is
      used.
    name: getStandardWidth()
    fullName: getStandardWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getStandardWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getTabColor:member(1)'
    summary: >-
      The tab color of the worksheet. When retrieving the tab color, if the worksheet is invisible, the value will be
      null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise,
      the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an
      "auto" color, or a real color otherwise.
    name: getTabColor()
    fullName: getTabColor()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTabColor(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getTable:member(1)'
    summary: 'Gets a table by Name or ID. If the table does not exist, will return a null object.'
    name: getTable(key)
    fullName: getTable(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(key: string): Table | undefined;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getTable~0:complex'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#getTables:member(1)'
    summary: Collection of tables that are part of the worksheet.
    name: getTables()
    fullName: getTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getTables~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getUsedRange:member(1)'
    summary: >-
      The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.
      If the entire worksheet is blank, this function will return a null object.
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Optional. Considers only cells with values as used cells.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#getVerticalPageBreaks:member(1)'
    summary: Gets the vertical page break collection for the worksheet. This collection only contains manual page breaks.
    name: getVerticalPageBreaks()
    fullName: getVerticalPageBreaks()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVerticalPageBreaks(): PageBreak[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet#getVerticalPageBreaks~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#getVisibility:member(1)'
    summary: The Visibility of the worksheet.
    name: getVisibility()
    fullName: getVisibility()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibility(): SheetVisibility;'
      return:
        type:
          - 'ExcelScript!ExcelScript.SheetVisibility:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#refreshAllPivotTables:member(1)'
    summary: Refreshes all the pivot tables in the collection.
    name: refreshAllPivotTables()
    fullName: refreshAllPivotTables()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAllPivotTables(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#removeAllHorizontalPageBreaks:member(1)'
    summary: Resets all manual page breaks in the collection.
    name: removeAllHorizontalPageBreaks()
    fullName: removeAllHorizontalPageBreaks()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAllHorizontalPageBreaks(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#removeAllVerticalPageBreaks:member(1)'
    summary: Resets all manual page breaks in the collection.
    name: removeAllVerticalPageBreaks()
    fullName: removeAllVerticalPageBreaks()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAllVerticalPageBreaks(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Worksheet#replaceAll:member(1)'
    summary: Finds and replaces the given string based on the criteria specified within the current worksheet.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: String to find.
          type:
            - string
        - id: replacement
          description: String to replace the original with.
          type:
            - string
        - id: criteria
          description: Additional Replace Criteria.
          type:
            - 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Worksheet#setEnableCalculation:member(1)'
    summary: >-
      Determines if Excel should recalculate the worksheet when necessary. True if Excel recalculates the worksheet when
      necessary. False if Excel doesn't recalculate the sheet.
    name: setEnableCalculation(enableCalculation)
    fullName: setEnableCalculation(enableCalculation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setEnableCalculation(enableCalculation: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: enableCalculation
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#setName:member(1)'
    summary: The display name of the worksheet.
    name: setName(name)
    fullName: setName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setName(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#setPosition:member(1)'
    summary: The zero-based position of the worksheet within the workbook.
    name: setPosition(position)
    fullName: setPosition(position)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPosition(position: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: position
          description: ''
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Worksheet#setShowGridlines:member(1)'
    summary: Specifies if gridlines are visible to the user.
    name: setShowGridlines(showGridlines)
    fullName: setShowGridlines(showGridlines)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShowGridlines(showGridlines: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: showGridlines
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#setShowHeadings:member(1)'
    summary: Specifies if headings are visible to the user.
    name: setShowHeadings(showHeadings)
    fullName: setShowHeadings(showHeadings)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setShowHeadings(showHeadings: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: showHeadings
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Worksheet#setStandardWidth:member(1)'
    summary: >-
      Specifies the standard (default) width of all the columns in the worksheet. One unit of column width is equal to
      the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is
      used.
    name: setStandardWidth(standardWidth)
    fullName: setStandardWidth(standardWidth)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setStandardWidth(standardWidth: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: standardWidth
          description: ''
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Worksheet#setTabColor:member(1)'
    summary: >-
      The tab color of the worksheet. When retrieving the tab color, if the worksheet is invisible, the value will be
      null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise,
      the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an
      "auto" color, or a real color otherwise.
    name: setTabColor(tabColor)
    fullName: setTabColor(tabColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTabColor(tabColor: string): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```javascript
          /**
           * This script sets the tab color of every worksheet in the workbook to red.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get all the worksheets in the workbook. 
            let sheets = workbook.getWorksheets();
            
            // Set the tab color of each worksheet to a random color.
            for (let sheet of sheets) {    
              // Set the color of the current worksheet's tab to red.
              sheet.setTabColor("red");
            }
          }
          ```
      parameters:
        - id: tabColor
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Worksheet#setVisibility:member(1)'
    summary: The Visibility of the worksheet.
    name: setVisibility(visibility)
    fullName: setVisibility(visibility)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setVisibility(visibility: SheetVisibility): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: visibility
          description: ''
          type:
            - 'ExcelScript!ExcelScript.SheetVisibility:enum'
  - uid: 'ExcelScript!ExcelScript.Worksheet#showOutlineLevels:member(1)'
    summary: >-
      Shows row or column groups by their outline levels. Outlines group and summarize a list of data in the worksheet.
      The `rowLevels` and `columnLevels` parameters specify how many levels of the outline will be displayed. The
      acceptable argument range is between 0 and 8. A value of 0 does not change the current display. A value greater
      than the current number of levels displays all the levels.
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowLevels
          description: The number of row levels of an outline to display.
          type:
            - number
        - id: columnLevels
          description: The number of column levels of an outline to display.
          type:
            - number
references:
  - uid: 'ExcelScript!ExcelScript.Chart:interface'
    name: Chart
    fullName: ExcelScript.Chart
  - uid: 'ExcelScript!ExcelScript.ChartType:enum'
    name: ChartType
    fullName: ExcelScript.ChartType
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.ChartSeriesBy:enum'
    name: ChartSeriesBy
    fullName: ExcelScript.ChartSeriesBy
  - uid: 'ExcelScript!ExcelScript.Comment:interface'
    name: Comment
    fullName: ExcelScript.Comment
  - uid: 'ExcelScript!ExcelScript.Worksheet#addComment~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addComment~1:complex'
    name: CommentRichContent | string
    fullName: ExcelScript.CommentRichContent | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.CommentRichContent:interface'
        name: CommentRichContent
        fullName: ExcelScript.CommentRichContent
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.ContentType:enum'
    name: ContentType
    fullName: ExcelScript.ContentType
  - uid: 'ExcelScript!ExcelScript.Shape:interface'
    name: Shape
    fullName: ExcelScript.Shape
  - uid: 'ExcelScript!ExcelScript.GeometricShapeType:enum'
    name: GeometricShapeType
    fullName: ExcelScript.GeometricShapeType
  - uid: 'ExcelScript!ExcelScript.Worksheet#addGroup~0:complex'
    name: Array<string | Shape>
    fullName: Array<string | ExcelScript.Shape>
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: '<string | '
        fullName: '<string | '
      - uid: 'ExcelScript!ExcelScript.Shape:interface'
        name: Shape
        fullName: ExcelScript.Shape
      - name: '>'
        fullName: '>'
  - uid: 'ExcelScript!ExcelScript.PageBreak:interface'
    name: PageBreak
    fullName: ExcelScript.PageBreak
  - uid: 'ExcelScript!ExcelScript.Worksheet#addHorizontalPageBreak~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.ConnectorType:enum'
    name: ConnectorType
    fullName: ExcelScript.ConnectorType
  - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
    name: NamedItem
    fullName: ExcelScript.NamedItem
  - uid: 'ExcelScript!ExcelScript.Worksheet#addNamedItem~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
    name: PivotTable
    fullName: ExcelScript.PivotTable
  - uid: 'ExcelScript!ExcelScript.Worksheet#addPivotTable~0:complex'
    name: Range | string | Table
    fullName: ExcelScript.Range | string | ExcelScript.Table
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Worksheet#addPivotTable~1:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'ExcelScript!ExcelScript.Slicer:interface'
    name: Slicer
    fullName: ExcelScript.Slicer
  - uid: 'ExcelScript!ExcelScript.Worksheet#addSlicer~0:complex'
    name: string | PivotTable | Table
    fullName: string | ExcelScript.PivotTable | ExcelScript.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Worksheet#addSlicer~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | ExcelScript.PivotField | number | ExcelScript.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.PivotField:interface'
        name: PivotField
        fullName: ExcelScript.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'ExcelScript!ExcelScript.TableColumn:interface'
        name: TableColumn
        fullName: ExcelScript.TableColumn
  - uid: 'ExcelScript!ExcelScript.Worksheet#addSlicer~2:complex'
    name: string | Worksheet
    fullName: string | ExcelScript.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
        name: Worksheet
        fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.Table:interface'
    name: Table
    fullName: ExcelScript.Table
  - uid: 'ExcelScript!ExcelScript.Worksheet#addTable~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Worksheet#addVerticalPageBreak~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.WorksheetPositionType:enum'
    name: WorksheetPositionType
    fullName: ExcelScript.WorksheetPositionType
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.WorksheetSearchCriteria:interface'
    name: WorksheetSearchCriteria
    fullName: ExcelScript.WorksheetSearchCriteria
  - uid: 'ExcelScript!ExcelScript.AutoFilter:interface'
    name: AutoFilter
    fullName: ExcelScript.AutoFilter
  - uid: 'ExcelScript!ExcelScript.Worksheet#getChart~0:complex'
    name: Chart | undefined
    fullName: ExcelScript.Chart | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Chart:interface'
        name: Chart
        fullName: ExcelScript.Chart
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCharts~0:complex'
    name: 'Chart[]'
    fullName: 'ExcelScript.Chart[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Chart:interface'
        name: Chart
        fullName: ExcelScript.Chart
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getCommentByCell~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getComments~0:complex'
    name: 'Comment[]'
    fullName: 'ExcelScript.Comment[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Comment:interface'
        name: Comment
        fullName: ExcelScript.Comment
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.WorksheetFreezePanes:interface'
    name: WorksheetFreezePanes
    fullName: ExcelScript.WorksheetFreezePanes
  - uid: 'ExcelScript!ExcelScript.Worksheet#getHorizontalPageBreaks~0:complex'
    name: 'PageBreak[]'
    fullName: 'ExcelScript.PageBreak[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PageBreak:interface'
        name: PageBreak
        fullName: ExcelScript.PageBreak
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getNamedItem~0:complex'
    name: NamedItem | undefined
    fullName: ExcelScript.NamedItem | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getNames~0:complex'
    name: 'NamedItem[]'
    fullName: 'ExcelScript.NamedItem[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NamedItem:interface'
        name: NamedItem
        fullName: ExcelScript.NamedItem
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.PageLayout:interface'
    name: PageLayout
    fullName: ExcelScript.PageLayout
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPivotTable~0:complex'
    name: PivotTable | undefined
    fullName: ExcelScript.PivotTable | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.WorksheetProtection:interface'
    name: WorksheetProtection
    fullName: ExcelScript.WorksheetProtection
  - uid: 'ExcelScript!ExcelScript.Worksheet#getShapes~0:complex'
    name: 'Shape[]'
    fullName: 'ExcelScript.Shape[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Shape:interface'
        name: Shape
        fullName: ExcelScript.Shape
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getSlicer~0:complex'
    name: Slicer | undefined
    fullName: ExcelScript.Slicer | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getSlicers~0:complex'
    name: 'Slicer[]'
    fullName: 'ExcelScript.Slicer[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Slicer:interface'
        name: Slicer
        fullName: ExcelScript.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getTable~0:complex'
    name: Table | undefined
    fullName: ExcelScript.Table | undefined
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.Worksheet#getVerticalPageBreaks~0:complex'
    name: 'PageBreak[]'
    fullName: 'ExcelScript.PageBreak[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PageBreak:interface'
        name: PageBreak
        fullName: ExcelScript.PageBreak
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.SheetVisibility:enum'
    name: SheetVisibility
    fullName: ExcelScript.SheetVisibility
  - uid: 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: ExcelScript.ReplaceCriteria
