### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SettingCollection:interface'
    summary: >-
      Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to
      per file and add-in (task-pane or content) combination.
    name: Excel.SettingCollection
    fullName: Excel.SettingCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.SettingCollection#add:member(1)'
      - 'excel!Excel.SettingCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SettingCollection#load:member(1)'
  - uid: 'excel!Excel.SettingCollection#add:member(1)'
    summary: Sets or adds the specified setting to the workbook.
    name: 'add(key, value)'
    fullName: 'add(key, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        add(
                    key: string,
                    value: string | number | boolean | Date | Array<any> | any
                ): Setting;
      return:
        type:
          - 'excel!Excel.Setting:interface'
        description: ''
      parameters:
        - id: key
          description: The Key of the new setting.
          type:
            - string
        - id: value
          description: The Value for the new setting.
          type:
            - 'excel!Excel.SettingCollection#add~0:complex'
  - uid: 'excel!Excel.SettingCollection#getItemOrNullObject:member(1)'
    summary: 'Gets a Setting entry via the key. If the Setting does not exist, will return a null object.'
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Setting;'
      return:
        type:
          - 'excel!Excel.Setting:interface'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let needsReview = settings.getItem("NeedsReview");
              needsReview.delete();
              needsReview = settings.getItemOrNullObject("NeedsReview");

              await context.sync();

              if (needsReview.isNullObject) {
                  console.log("The setting has been deleted");
              } else {
                  console.log("The setting was not deleted");
              }

              await context.sync();
          }
          ```
      parameters:
        - id: key
          description: The key of the setting.
          type:
            - string
  - uid: 'excel!Excel.SettingCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Setting:interface'
    name: Setting
    fullName: Excel.Setting
  - uid: 'excel!Excel.SettingCollection#add~0:complex'
    name: string | number | boolean | Date | Array<any> | any
    fullName: string | number | boolean | Date | Array<any> | any
    spec.typeScript:
      - name: 'string | number | boolean | '
        fullName: 'string | number | boolean | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | '
        fullName: ' | '
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: |-
          <any> | any
                  
        fullName: |-
          <any> | any
                  
