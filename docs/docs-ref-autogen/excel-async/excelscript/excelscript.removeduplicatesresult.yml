### YamlMime:TSType
name: Excel.RemoveDuplicatesResult
uid: 'excel!Excel.RemoveDuplicatesResult:interface'
package: excel!
fullName: Excel.RemoveDuplicatesResult
summary: Represents the results from the removeDuplicates method on range
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: removed
    uid: 'excel!Excel.RemoveDuplicatesResult#removed:member'
    package: excel!
    fullName: removed
    summary: Number of duplicated rows removed by the operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly removed: number;'
      return:
        type: number
  - name: uniqueRemaining
    uid: 'excel!Excel.RemoveDuplicatesResult#uniqueRemaining:member'
    package: excel!
    fullName: uniqueRemaining
    summary: Number of remaining unique rows present in the resulting range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly uniqueRemaining: number;'
      return:
        type: number
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:D11");

              let deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          }
          ```
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.RemoveDuplicatesResult#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
