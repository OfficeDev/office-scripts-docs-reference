### YamlMime:TSType
name: Excel.CustomXmlPart
uid: 'excel!Excel.CustomXmlPart:interface'
package: excel!
fullName: Excel.CustomXmlPart
summary: Represents a custom XML part object in a workbook.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: id
    uid: 'excel!Excel.CustomXmlPart#id:member'
    package: excel!
    fullName: id
    summary: The custom XML part's ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              let customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              let xmlBlob = customXmlPart.getXml();

              await context.sync();

              let readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              let settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          }
          ```
  - name: namespaceUri
    uid: 'excel!Excel.CustomXmlPart#namespaceUri:member'
    package: excel!
    fullName: namespaceUri
    summary: The custom XML part's namespace URI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type: string
methods:
  - name: delete()
    uid: 'excel!Excel.CustomXmlPart#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes the custom XML part.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  let xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      let readableXml = addLineBreaksToXML(xmlBlob.value);
                      let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          }
          ```
  - name: getXml()
    uid: 'excel!Excel.CustomXmlPart#getXml:member(1)'
    package: excel!
    fullName: getXml()
    summary: Gets the custom XML part's full XML content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getXml(): ClientResult<string>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;string&gt;'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              let customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              let xmlBlob = customXmlPart.getXml();

              await context.sync();

              let readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              let settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          }
          ```
  - name: load(propertyNames)
    uid: 'excel!Excel.CustomXmlPart#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: setXml(xml)
    uid: 'excel!Excel.CustomXmlPart#setXml:member(1)'
    package: excel!
    fullName: setXml(xml)
    summary: Sets the custom XML part's full XML content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setXml(xml: string): void;'
      parameters:
        - id: xml
          description: XML content for the part.
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  let xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  let readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          }
          ```
