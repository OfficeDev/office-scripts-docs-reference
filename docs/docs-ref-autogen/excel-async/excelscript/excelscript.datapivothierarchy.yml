### YamlMime:TSType
name: Excel.DataPivotHierarchy
uid: 'excel!Excel.DataPivotHierarchy:interface'
package: excel!
fullName: Excel.DataPivotHierarchy
summary: Represents the Excel DataPivotHierarchy.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: field
    uid: 'excel!Excel.DataPivotHierarchy#field:member'
    package: excel!
    fullName: field
    summary: Returns the PivotFields associated with the DataPivotHierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly field: PivotField;'
      return:
        type: '<xref uid="excel!Excel.PivotField:interface" />'
  - name: id
    uid: 'excel!Excel.DataPivotHierarchy#id:member'
    package: excel!
    fullName: id
    summary: Id of the DataPivotHierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: name
    uid: 'excel!Excel.DataPivotHierarchy#name:member'
    package: excel!
    fullName: name
    summary: Name of the DataPivotHierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let dataHierarchies = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales").dataHierarchies
              dataHierarchies.load("no-properties-needed");
              await context.sync();

              dataHierarchies.items[0].name = "Farm Sales";
              dataHierarchies.items[1].name = "Wholesale";
              await context.sync();
          }
          ```
  - name: numberFormat
    uid: 'excel!Excel.DataPivotHierarchy#numberFormat:member'
    package: excel!
    fullName: numberFormat
    summary: Number format of the DataPivotHierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberFormat: string;'
      return:
        type: string
  - name: position
    uid: 'excel!Excel.DataPivotHierarchy#position:member'
    package: excel!
    fullName: position
    summary: Position of the DataPivotHierarchy.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'position: number;'
      return:
        type: number
  - name: showAs
    uid: 'excel!Excel.DataPivotHierarchy#showAs:member'
    package: excel!
    fullName: showAs
    summary: Specifies if the data should be shown as a specific summary calculation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showAs: ShowAsRule;'
      return:
        type: '<xref uid="excel!Excel.ShowAsRule:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              let farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");        
              let wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

              farmDataHierarchy.load("showAs");
              wholesaleDataHierarchy.load("showAs");
              await context.sync();

              // show the crates of each fruit type sold at the farm as a percentage of the column's total
              let farmShowAs = farmDataHierarchy.showAs;
              farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
              farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
              farmDataHierarchy.showAs = farmShowAs;

              let wholesaleShowAs = wholesaleDataHierarchy.showAs;
              wholesaleShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
              wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
              wholesaleDataHierarchy.showAs = wholesaleShowAs;
              await context.sync();
          }
          ```
  - name: summarizeBy
    uid: 'excel!Excel.DataPivotHierarchy#summarizeBy:member'
    package: excel!
    fullName: summarizeBy
    summary: Specifies if all items of the DataPivotHierarchy are shown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        summarizeBy:
                    | AggregationFunction
                    | "Unknown"
                    | "Automatic"
                    | "Sum"
                    | "Count"
                    | "Average"
                    | "Max"
                    | "Min"
                    | "Product"
                    | "CountNumbers"
                    | "StandardDeviation"
                    | "StandardDeviationP"
                    | "Variance"
                    | "VarianceP";
      return:
        type: |-
          | <xref uid="excel!Excel.AggregationFunction:enum" />
                      | "Unknown"
                      | "Automatic"
                      | "Sum"
                      | "Count"
                      | "Average"
                      | "Max"
                      | "Min"
                      | "Product"
                      | "CountNumbers"
                      | "StandardDeviation"
                      | "StandardDeviationP"
                      | "Variance"
                      | "VarianceP"
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.DataPivotHierarchy#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: setToDefault()
    uid: 'excel!Excel.DataPivotHierarchy#setToDefault:member(1)'
    package: excel!
    fullName: setToDefault()
    summary: Reset the DataPivotHierarchy back to its default values.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setToDefault(): void;'
      return:
        type: void
        description: ''
