### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalIconCriterion:interface'
    summary: >-
      Represents an Icon Criterion which contains a type, value, an Operator, and an optional custom icon, if not using
      an iconset.
    name: Excel.ConditionalIconCriterion
    fullName: Excel.ConditionalIconCriterion
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalIconCriterion#customIcon:member'
      - 'excel!Excel.ConditionalIconCriterion#formula:member'
      - 'excel!Excel.ConditionalIconCriterion#operator:member'
      - 'excel!Excel.ConditionalIconCriterion#type:member'
  - uid: 'excel!Excel.ConditionalIconCriterion#customIcon:member'
    summary: 'The custom icon for the current criterion if different from the default IconSet, else null will be returned.'
    name: customIcon
    fullName: customIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customIcon?: Icon;'
      return:
        type:
          - 'excel!Excel.Icon:interface'
  - uid: 'excel!Excel.ConditionalIconCriterion#formula:member'
    summary: A number or a formula depending on the type.
    name: formula
    fullName: formula
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formula: string;'
      return:
        type:
          - string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalIconCriterion#operator:member'
    summary: GreaterThan or GreaterThanOrEqual for each of the rule type for the Icon conditional format.
    name: operator
    fullName: operator
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        operator:
                    | ConditionalIconCriterionOperator
                    | "Invalid"
                    | "GreaterThan"
                    | "GreaterThanOrEqual";
      return:
        type:
          - 'excel!Excel.ConditionalIconCriterion#operator~0:complex'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B16:D18");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalIconCriterion#type:member'
    summary: What the icon conditional formula should be based on.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        type:
                    | ConditionalFormatIconRuleType
                    | "Invalid"
                    | "Number"
                    | "Percent"
                    | "Formula"
                    | "Percentile";
      return:
        type:
          - 'excel!Excel.ConditionalIconCriterion#type~0:complex'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.Icon:interface'
    name: Icon
    fullName: Excel.Icon
  - uid: 'excel!Excel.ConditionalIconCriterion#operator~0:complex'
    name: |-
      | ConditionalIconCriterionOperator
                  | "Invalid"
                  | "GreaterThan"
                  | "GreaterThanOrEqual"
    fullName: |-
      | Excel.ConditionalIconCriterionOperator
                  | "Invalid"
                  | "GreaterThan"
                  | "GreaterThanOrEqual"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.ConditionalIconCriterionOperator:enum'
        name: ConditionalIconCriterionOperator
        fullName: Excel.ConditionalIconCriterionOperator
      - name: |2-

                      | "Invalid"
                      | "GreaterThan"
                      | "GreaterThanOrEqual"
        fullName: |2-

                      | "Invalid"
                      | "GreaterThan"
                      | "GreaterThanOrEqual"
  - uid: 'excel!Excel.ConditionalIconCriterion#type~0:complex'
    name: |-
      | ConditionalFormatIconRuleType
                  | "Invalid"
                  | "Number"
                  | "Percent"
                  | "Formula"
                  | "Percentile"
    fullName: |-
      | Excel.ConditionalFormatIconRuleType
                  | "Invalid"
                  | "Number"
                  | "Percent"
                  | "Formula"
                  | "Percentile"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.ConditionalFormatIconRuleType:enum'
        name: ConditionalFormatIconRuleType
        fullName: Excel.ConditionalFormatIconRuleType
      - name: |2-

                      | "Invalid"
                      | "Number"
                      | "Percent"
                      | "Formula"
                      | "Percentile"
        fullName: |2-

                      | "Invalid"
                      | "Number"
                      | "Percent"
                      | "Formula"
                      | "Percentile"
