### YamlMime:TSType
name: Excel.Slicer
uid: 'excel!Excel.Slicer:interface'
package: excel!
fullName: Excel.Slicer
summary: Represents a slicer object in the workbook.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: caption
    uid: 'excel!Excel.Slicer#caption:member'
    package: excel!
    fullName: caption
    summary: Represents the caption of slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'caption: string;'
      return:
        type: string
  - name: height
    uid: 'excel!Excel.Slicer#height:member'
    package: excel!
    fullName: height
    summary: >-
      Represents the height, in points, of the slicer. Throws an "The argument
      is invalid or missing or has an incorrect format." exception when set with
      negative value or zero as input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'height: number;'
      return:
        type: number
  - name: id
    uid: 'excel!Excel.Slicer#id:member'
    package: excel!
    fullName: id
    summary: Represents the unique id of slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: isFilterCleared
    uid: 'excel!Excel.Slicer#isFilterCleared:member'
    package: excel!
    fullName: isFilterCleared
    summary: True if all filters currently applied on the slicer are cleared.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isFilterCleared: boolean;'
      return:
        type: boolean
  - name: left
    uid: 'excel!Excel.Slicer#left:member'
    package: excel!
    fullName: left
    summary: >-
      Represents the distance, in points, from the left side of the slicer to
      the left of the worksheet. Throws an "The argument is invalid or missing
      or has an incorrect format." exception when set with negative value as
      input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'left: number;'
      return:
        type: number
  - name: name
    uid: 'excel!Excel.Slicer#name:member'
    package: excel!
    fullName: name
    summary: Represents the name of slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: slicerItems
    uid: 'excel!Excel.Slicer#slicerItems:member'
    package: excel!
    fullName: slicerItems
    summary: Represents the collection of SlicerItems that are part of the slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slicerItems: SlicerItemCollection;'
      return:
        type: '<xref uid="excel!Excel.SlicerItemCollection:interface" />'
  - name: sortBy
    uid: 'excel!Excel.Slicer#sortBy:member'
    package: excel!
    fullName: sortBy
    summary: >-
      Represents the sort order of the items in the slicer. Possible values are:
      "DataSourceOrder", "Ascending", "Descending".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sortBy: SlicerSortType | "DataSourceOrder" | "Ascending" | "Descending";'
      return:
        type: >-
          <xref uid="excel!Excel.SlicerSortType:enum" /> | "DataSourceOrder" |
          "Ascending" | "Descending"
  - name: style
    uid: 'excel!Excel.Slicer#style:member'
    package: excel!
    fullName: style
    summary: >-
      Constant value that represents the Slicer style. Possible values are:
      "SlicerStyleLight1" through "SlicerStyleLight6", "TableStyleOther1"
      through "TableStyleOther2", "SlicerStyleDark1" through "SlicerStyleDark6".
      A custom user-defined style present in the workbook can also be specified.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.style = "SlicerStyleLight6";
              await context.sync();
          }
          ```
  - name: top
    uid: 'excel!Excel.Slicer#top:member'
    package: excel!
    fullName: top
    summary: >-
      Represents the distance, in points, from the top edge of the slicer to the
      top of the worksheet. Throws an "The argument is invalid or missing or has
      an incorrect format." exception when set with negative value as input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'top: number;'
      return:
        type: number
  - name: width
    uid: 'excel!Excel.Slicer#width:member'
    package: excel!
    fullName: width
    summary: >-
      Represents the width, in points, of the slicer. Throws an "The argument is
      invalid or missing or has an incorrect format." exception when set with
      negative value or zero as input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'width: number;'
      return:
        type: number
  - name: worksheet
    uid: 'excel!Excel.Slicer#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: Represents the worksheet containing the slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
methods:
  - name: clearFilters()
    uid: 'excel!Excel.Slicer#clearFilters:member(1)'
    package: excel!
    fullName: clearFilters()
    summary: Clears all the filters currently applied on the slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearFilters(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.clearFilters();
              await context.sync();
          }
          ```
  - name: delete()
    uid: 'excel!Excel.Slicer#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes the slicer.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.slicers.getItemAt(0).delete();
              await context.sync();
          }
          ```
  - name: getSelectedItems()
    uid: 'excel!Excel.Slicer#getSelectedItems:member(1)'
    package: excel!
    fullName: getSelectedItems()
    summary: Returns an array of selected items' keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedItems(): ClientResult<string[]>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;string[]&gt;'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Slicer#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: selectItems(items)
    uid: 'excel!Excel.Slicer#selectItems:member(1)'
    package: excel!
    fullName: selectItems(items)
    summary: >-
      Selects slicer items based on their keys. The previous selections are
      cleared. All items will be selected by default if the array is empty.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selectItems(items?: string[]): void;'
      parameters:
        - id: items
          description: Optional. The specified slicer item names to be selected.
          type: 'string[]'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.selectItems(["Lemon", "Lime", "Orange"]);
              await context.sync();
          }
          ```
