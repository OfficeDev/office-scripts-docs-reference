### YamlMime:TSType
name: Excel.PivotTableCollection
uid: 'excel!Excel.PivotTableCollection:interface'
package: excel!
fullName: Excel.PivotTableCollection
summary: >-
  Represents a collection of all the PivotTables that are part of the workbook
  or worksheet.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'add(name, source, destination)'
    uid: 'excel!Excel.PivotTableCollection#add:member(1)'
    package: excel!
    fullName: 'add(name, source, destination)'
    summary: >-
      Add a PivotTable based on the specified source data and insert it at the
      top-left cell of the destination range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        add(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      parameters:
        - id: name
          description: The name of the new PivotTable.
          type: string
        - id: source
          description: >-
            The source data for the new PivotTable, this can either be a range
            (or string address including the worksheet name) or a table.
          type: >-
            <xref uid="excel!Excel.Range:interface" /> | string | <xref
            uid="excel!Excel.Table:interface" />
        - id: destination
          description: >-
            The cell in the upper-left corner of the PivotTable report's
            destination range (the range on the worksheet where the resulting
            report will be placed).
          type: |-
            <xref uid="excel!Excel.Range:interface" /> | string
                    
      return:
        type: '<xref uid="excel!Excel.PivotTable:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
              let rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
              context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

              await context.sync();
          }
          ```
  - name: getCount()
    uid: 'excel!Excel.PivotTableCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Gets the number of pivot tables in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getItem(name)
    uid: 'excel!Excel.PivotTableCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(name)
    summary: Gets a PivotTable by name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(name: string): PivotTable;'
      parameters:
        - id: name
          description: Name of the PivotTable to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.PivotTable:interface" />'
        description: ''
  - name: getItemOrNullObject(name)
    uid: 'excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(name)
    summary: >-
      Gets a PivotTable by name. If the PivotTable does not exist, will return a
      null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(name: string): PivotTable;'
      parameters:
        - id: name
          description: Name of the PivotTable to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.PivotTable:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.PivotTableCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: refreshAll()
    uid: 'excel!Excel.PivotTableCollection#refreshAll:member(1)'
    package: excel!
    fullName: refreshAll()
    summary: Refreshes all the pivot tables in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'refreshAll(): void;'
      return:
        type: void
        description: ''
