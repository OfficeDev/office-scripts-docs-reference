### YamlMime:TSType
name: Excel.WorkbookProtection
uid: 'excel!Excel.WorkbookProtection:interface'
package: excel!
fullName: Excel.WorkbookProtection
summary: Represents the protection of a workbook object.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: protected
    uid: 'excel!Excel.WorkbookProtection#protected:member'
    package: excel!
    fullName: protected
    summary: Specifies if the workbook is protected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly protected: boolean;'
      return:
        type: boolean
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.WorkbookProtection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: protect(password)
    uid: 'excel!Excel.WorkbookProtection#protect:member(1)'
    package: excel!
    fullName: protect(password)
    summary: Protects a workbook. Fails if the workbook has been protected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protect(password?: string): void;'
      parameters:
        - id: password
          description: workbook protection password.
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect();
              }
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect(password);
              }
          }
          ```
  - name: unprotect(password)
    uid: 'excel!Excel.WorkbookProtection#unprotect:member(1)'
    package: excel!
    fullName: unprotect(password)
    summary: Unprotects a workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unprotect(password?: string): void;'
      parameters:
        - id: password
          description: workbook protection password.
          type: string
      return:
        type: void
        description: |-


          #### Examples

          ```javascript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect();
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect(password);
          }
          ```
