### YamlMime:TSType
name: Excel.NamedItem
uid: 'excel!Excel.NamedItem:interface'
package: excel!
fullName: Excel.NamedItem
summary: >-
  Represents a defined name for a range of cells or value. Names can be
  primitive named objects (as seen in the type below), range object, or a
  reference to a range. This object can be used to obtain range object
  associated with names.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: arrayValues
    uid: 'excel!Excel.NamedItem#arrayValues:member'
    package: excel!
    fullName: arrayValues
    summary: Returns an object containing values and types of the named item.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly arrayValues: NamedItemArrayValues;'
      return:
        type: '<xref uid="excel!Excel.NamedItemArrayValues:interface" />'
  - name: comment
    uid: 'excel!Excel.NamedItem#comment:member'
    package: excel!
    fullName: comment
    summary: Specifies the comment associated with this name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'comment: string;'
      return:
        type: string
  - name: formula
    uid: 'excel!Excel.NamedItem#formula:member'
    package: excel!
    fullName: formula
    summary: The formula of the named item. Formula always starts with a '=' sign.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formula: any;'
      return:
        type: any
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");

              // Get the named item
              let myNamedItem = sheet.names.getItemOrNullObject("MyRange");
              myNamedItem.load("name, formula");
              await context.sync();

              if (myNamedItem.isNullObject) {
                  console.log(`There is no named item. Create it with "Add named item for a range" first.`);
              } else {                    
                  // Update named item to point to the second range
                  myNamedItem.formula = "=Sample!$B$10:$D$14";
                  sheet.getRange("B10:D14").select();
                  await context.sync();

                  console.log(`Just updated the named item "${myNamedItem.name}" -- it's now located here: ${myNamedItem.formula}`);
              }
          }
          ```
  - name: name
    uid: 'excel!Excel.NamedItem#name:member'
    package: excel!
    fullName: name
    summary: The name of the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly name: string;'
      return:
        type: string
  - name: scope
    uid: 'excel!Excel.NamedItem#scope:member'
    package: excel!
    fullName: scope
    summary: >-
      Specifies if the name is scoped to the workbook or to a specific
      worksheet. Possible values are: Worksheet, Workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly scope: NamedItemScope | "Worksheet" | "Workbook";'
      return:
        type: >-
          <xref uid="excel!Excel.NamedItemScope:enum" /> | "Worksheet" |
          "Workbook"
  - name: type
    uid: 'excel!Excel.NamedItem#type:member'
    package: excel!
    fullName: type
    summary: >-
      Specifies the type of the value returned by the name's formula. See
      Excel.NamedItemType for details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        readonly type:
                    | NamedItemType
                    | "String"
                    | "Integer"
                    | "Double"
                    | "Boolean"
                    | "Range"
                    | "Error"
                    | "Array";
      return:
        type: |-
          | <xref uid="excel!Excel.NamedItemType:enum" />
                      | "String"
                      | "Integer"
                      | "Double"
                      | "Boolean"
                      | "Range"
                      | "Error"
                      | "Array"
  - name: value
    uid: 'excel!Excel.NamedItem#value:member'
    package: excel!
    fullName: value
    summary: >-
      Represents the value computed by the name's formula. For a named range,
      will return the range address.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly value: any;'
      return:
        type: any
  - name: visible
    uid: 'excel!Excel.NamedItem#visible:member'
    package: excel!
    fullName: visible
    summary: Specifies if the object is visible.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visible: boolean;'
      return:
        type: boolean
  - name: worksheet
    uid: 'excel!Excel.NamedItem#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: >-
      Returns the worksheet on which the named item is scoped to. Throws an
      error if the item is scoped to the workbook instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
  - name: worksheetOrNullObject
    uid: 'excel!Excel.NamedItem#worksheetOrNullObject:member'
    package: excel!
    fullName: worksheetOrNullObject
    summary: >-
      Returns the worksheet on which the named item is scoped to. Returns a null
      object if the item is scoped to the workbook instead.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheetOrNullObject: Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
methods:
  - name: delete()
    uid: 'excel!Excel.NamedItem#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes the given name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let totalName = sheet.names.getItemOrNullObject("TotalAmount");
              totalName.load();
              await context.sync();

              if (totalName.value) {
                  totalName.delete();

                  // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.
                  sheet.getRange("D11").values = [["=SUM(ExpensesTable[AMOUNT])"]];
              } else {
                  console.log("No named item created for the formula.");
              }

              await context.sync();
          }
          ```
  - name: getRange()
    uid: 'excel!Excel.NamedItem#getRange:member(1)'
    package: excel!
    fullName: getRange()
    summary: >-
      Returns the range object that is associated with the name. Throws an error
      if the named item's type is not a range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRangeOrNullObject()
    uid: 'excel!Excel.NamedItem#getRangeOrNullObject:member(1)'
    package: excel!
    fullName: getRangeOrNullObject()
    summary: >-
      Returns the range object that is associated with the name. Returns a null
      object if the named item's type is not a range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRangeOrNullObject(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.NamedItem#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
