### YamlMime:TSType
name: Excel.WorksheetFreezePanes
uid: 'excel!Excel.WorksheetFreezePanes:interface'
package: excel!
fullName: Excel.WorksheetFreezePanes
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: freezeAt(frozenRange)
    uid: 'excel!Excel.WorksheetFreezePanes#freezeAt:member(1)'
    package: excel!
    fullName: freezeAt(frozenRange)
    summary: >-
      Sets the frozen cells in the active worksheet view. The range provided
      corresponds to cells that will be frozen in the top- and left-most pane.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'freezeAt(frozenRange: Range | string): void;'
      parameters:
        - id: frozenRange
          description: >-
            A range that represents the cells to be frozen, or null to remove
            all frozen panes.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the specified range in top-and-left-most pane of the worksheet.
              sheet.freezePanes.freezeAt(sheet.getRange("H2:K5"));

              await context.sync();
          }
          ```
  - name: freezeColumns(count)
    uid: 'excel!Excel.WorksheetFreezePanes#freezeColumns:member(1)'
    package: excel!
    fullName: freezeColumns(count)
    summary: Freeze the first column(s) of the worksheet in place.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'freezeColumns(count?: number): void;'
      parameters:
        - id: count
          description: >-
            Optional number of columns to freeze, or zero to unfreeze all
            columns
          type: number
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the first two columns in the worksheet.
              sheet.freezePanes.freezeColumns(2);

              await context.sync();
          }
          ```
  - name: freezeRows(count)
    uid: 'excel!Excel.WorksheetFreezePanes#freezeRows:member(1)'
    package: excel!
    fullName: freezeRows(count)
    summary: Freeze the top row(s) of the worksheet in place.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'freezeRows(count?: number): void;'
      parameters:
        - id: count
          description: 'Optional number of rows to freeze, or zero to unfreeze all rows'
          type: number
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");

              // Freeze the top two rows in the worksheet.
              sheet.freezePanes.freezeRows(2);

              await context.sync();
          }
          ```
  - name: getLocation()
    uid: 'excel!Excel.WorksheetFreezePanes#getLocation:member(1)'
    package: excel!
    fullName: getLocation()
    summary: >-
      Gets a range that describes the frozen cells in the active worksheet view.
      The frozen range is corresponds to cells that are frozen in the top- and
      left-most pane.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLocation(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getLocationOrNullObject()
    uid: 'excel!Excel.WorksheetFreezePanes#getLocationOrNullObject:member(1)'
    package: excel!
    fullName: getLocationOrNullObject()
    summary: >-
      Gets a range that describes the frozen cells in the active worksheet view.
      The frozen range is corresponds to cells that are frozen in the top- and
      left-most pane. If there is no frozen pane, returns a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLocationOrNullObject(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let frozenRange = sheet.freezePanes.getLocationOrNullObject();
              frozenRange.load("address");

              await context.sync();

              if (frozenRange.isNullObject) {
                  console.log(`The worksheet does not contain a frozen pane.`);
              } else {
                  console.log(`The address of the frozen range (cells that are frozen in the top-and-left-most pane) is "${frozenRange.address}"`);
              }
          }
          ```
  - name: load(propertyNames)
    uid: 'excel!Excel.WorksheetFreezePanes#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: unfreeze()
    uid: 'excel!Excel.WorksheetFreezePanes#unfreeze:member(1)'
    package: excel!
    fullName: unfreeze()
    summary: Removes all frozen panes in the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unfreeze(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.freezePanes.unfreeze();

              await context.sync();
          }
          ```
