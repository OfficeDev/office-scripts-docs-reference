### YamlMime:TSType
name: Excel.PivotTable
uid: 'excel!Excel.PivotTable:interface'
package: excel!
fullName: Excel.PivotTable
summary: >-
  Represents an Excel PivotTable. To learn more about the PivotTable object
  model, read [Work with PivotTables using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-pivottables)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: columnHierarchies
    uid: 'excel!Excel.PivotTable#columnHierarchies:member'
    package: excel!
    fullName: columnHierarchies
    summary: The Column Pivot Hierarchies of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnHierarchies: RowColumnPivotHierarchyCollection;'
      return:
        type: '<xref uid="excel!Excel.RowColumnPivotHierarchyCollection:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

              // check if the PivotTable already has a column
              let column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
              column.load("id");
              await context.sync();

              if (column.isNullObject) {
                  // ading the farm column to the column hierarchy automatically removes it from the row hierarchy
                  pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
              } else {
                  pivotTable.columnHierarchies.remove(column);
              }

              await context.sync();
          }
          ```
  - name: dataHierarchies
    uid: 'excel!Excel.PivotTable#dataHierarchies:member'
    package: excel!
    fullName: dataHierarchies
    summary: The Data Pivot Hierarchies of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataHierarchies: DataPivotHierarchyCollection;'
      return:
        type: '<xref uid="excel!Excel.DataPivotHierarchyCollection:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
              pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

              await context.sync();
          }
          ```
  - name: enableDataValueEditing
    uid: 'excel!Excel.PivotTable#enableDataValueEditing:member'
    package: excel!
    fullName: enableDataValueEditing
    summary: >-
      Specifies if the PivotTable allows values in the data body to be edited by
      the user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableDataValueEditing: boolean;'
      return:
        type: boolean
  - name: filterHierarchies
    uid: 'excel!Excel.PivotTable#filterHierarchies:member'
    package: excel!
    fullName: filterHierarchies
    summary: The Filter Pivot Hierarchies of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly filterHierarchies: FilterPivotHierarchyCollection;'
      return:
        type: '<xref uid="excel!Excel.FilterPivotHierarchyCollection:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function filter(functionType: Excel.AggregationFunction) {
              async function main(context: Excel.RequestContext) {
                  let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
                  let filters = pivotTable.filterHierarchies;
                  let filter = filters.getItemOrNullObject("Classification");
                  filter.load();
                  await context.sync();

                  // add the Classification hierarchy to the filter, if it's not already there
                  if (filter.isNullObject) {
                      filters.add(pivotTable.hierarchies.getItem("Classification"));
                      await context.sync();
                  }
              }
          }
          ```
  - name: hierarchies
    uid: 'excel!Excel.PivotTable#hierarchies:member'
    package: excel!
    fullName: hierarchies
    summary: The Pivot Hierarchies of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly hierarchies: PivotHierarchyCollection;'
      return:
        type: '<xref uid="excel!Excel.PivotHierarchyCollection:interface" />'
  - name: id
    uid: 'excel!Excel.PivotTable#id:member'
    package: excel!
    fullName: id
    summary: Id of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: layout
    uid: 'excel!Excel.PivotTable#layout:member'
    package: excel!
    fullName: layout
    summary: >-
      The PivotLayout describing the layout and visual structure of the
      PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly layout: PivotLayout;'
      return:
        type: '<xref uid="excel!Excel.PivotLayout:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              pivotTable.layout.load("layoutType");
              await context.sync();

              // cycle between the three layout types
              if (pivotTable.layout.layoutType === "Compact") {
                  pivotTable.layout.layoutType = "Outline";
              } else if (pivotTable.layout.layoutType === "Outline") {
                  pivotTable.layout.layoutType = "Tabular";
              } else {
                  pivotTable.layout.layoutType = "Compact";
              }
              await context.sync();
              console.log("Pivot layout is now " + pivotTable.layout.layoutType);
          }
          ```
  - name: name
    uid: 'excel!Excel.PivotTable#name:member'
    package: excel!
    fullName: name
    summary: Name of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: rowHierarchies
    uid: 'excel!Excel.PivotTable#rowHierarchies:member'
    package: excel!
    fullName: rowHierarchies
    summary: The Row Pivot Hierarchies of the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowHierarchies: RowColumnPivotHierarchyCollection;'
      return:
        type: '<xref uid="excel!Excel.RowColumnPivotHierarchyCollection:interface" />'
  - name: useCustomSortLists
    uid: 'excel!Excel.PivotTable#useCustomSortLists:member'
    package: excel!
    fullName: useCustomSortLists
    summary: Specifies if the PivotTable uses custom lists when sorting.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useCustomSortLists: boolean;'
      return:
        type: boolean
  - name: worksheet
    uid: 'excel!Excel.PivotTable#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: The worksheet containing the current PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
methods:
  - name: delete()
    uid: 'excel!Excel.PivotTable#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

              await context.sync();
          }
          ```
  - name: load(propertyNames)
    uid: 'excel!Excel.PivotTable#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: refresh()
    uid: 'excel!Excel.PivotTable#refresh:member(1)'
    package: excel!
    fullName: refresh()
    summary: Refreshes the PivotTable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'refresh(): void;'
      return:
        type: void
        description: ''
