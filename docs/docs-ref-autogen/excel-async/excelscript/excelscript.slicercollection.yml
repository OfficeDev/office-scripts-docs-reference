### YamlMime:TSType
name: Excel.SlicerCollection
uid: 'excel!Excel.SlicerCollection:interface'
package: excel!
fullName: Excel.SlicerCollection
summary: >-
  Represents a collection of all the slicer objects on the workbook or a
  worksheet.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'add(slicerSource, sourceField, slicerDestination)'
    uid: 'excel!Excel.SlicerCollection#add:member(1)'
    package: excel!
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    summary: Adds a new slicer to the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        add(
                    slicerSource: string | PivotTable | Table,
                    sourceField: string | PivotField | number | TableColumn,
                    slicerDestination?: string | Worksheet
                ): Slicer;
      parameters:
        - id: slicerSource
          description: >-
            The data source that the new slicer will be based on. It can be a
            PivotTable object, a Table object or a string. When a PivotTable
            object is passed, the data source is the source of the PivotTable
            object. When a Table object is passed, the data source is the Table
            object. When a string is passed, it is interpreted as the name/id of
            a PivotTable/Table.
          type: >-
            string | <xref uid="excel!Excel.PivotTable:interface" /> | <xref
            uid="excel!Excel.Table:interface" />
        - id: sourceField
          description: >-
            The field in the data source to filter by. It can be a PivotField
            object, a TableColumn object, the id of a PivotField or the id/name
            of TableColumn.
          type: >-
            string | <xref uid="excel!Excel.PivotField:interface" /> | number |
            <xref uid="excel!Excel.TableColumn:interface" />
        - id: slicerDestination
          description: >-
            Optional. The worksheet where the new slicer will be created in. It
            can be a Worksheet object or the name/id of a worksheet. This
            parameter can be omitted if the slicer collection is retrieved from
            worksheet.
          type: 'string | <xref uid="excel!Excel.Worksheet:interface" />'
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
  - name: getCount()
    uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Returns the number of slicers in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: Gets a slicer object using its name or id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Slicer;'
      parameters:
        - id: key
          description: The name or id of the slicer.
          type: string
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: ''
  - name: getItemAt(index)
    uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: Gets a slicer based on its position in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Slicer;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a slicer using its name or id. If the slicer does not exist, will
      return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Slicer;'
      parameters:
        - id: key
          description: Name or Id of the slicer to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.SlicerCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
