### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableCollection:interface'
    summary: >-
      Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was
      reached.
    name: Excel.TableCollection
    fullName: Excel.TableCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.TableCollection#add:member(1)'
      - 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableCollection#load:member(1)'
  - uid: 'excel!Excel.TableCollection#add:member(1)'
    summary: >-
      Create a new table. The range object or source address determines the worksheet under which the table will be
      added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another
      table), an error will be thrown.
    name: 'add(address, hasHeaders)'
    fullName: 'add(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Table;'
      return:
        type:
          - 'excel!Excel.Table:interface'
        description: ''
      parameters:
        - id: address
          description: >-
            A Range object, or a string address or name of the range representing the data source. If the address does
            not contain a sheet name, the currently-active sheet is used.
          type:
            - 'excel!Excel.TableCollection#add~0:complex'
        - id: hasHeaders
          description: >-
            Boolean value that indicates whether the data being imported has column labels. If the source does not
            contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting
            the data down by one row.
          type:
            - boolean
  - uid: 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
    summary: 'Gets a table by Name or ID. If the table does not exist, will return a null object.'
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Table;'
      return:
        type:
          - 'excel!Excel.Table:interface'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type:
            - string
  - uid: 'excel!Excel.TableCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Table:interface'
    name: Table
    fullName: Excel.Table
  - uid: 'excel!Excel.TableCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
