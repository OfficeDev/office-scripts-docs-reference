### YamlMime:TSType
name: Excel.Worksheet
uid: 'excel!Excel.Worksheet:interface'
package: excel!
fullName: Excel.Worksheet
summary: >-
  An Excel worksheet is a grid of cells. It can contain data, tables, charts,
  etc. To learn more about the worksheet object model, read [Work with
  worksheets using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: autoFilter
    uid: 'excel!Excel.Worksheet#autoFilter:member'
    package: excel!
    fullName: autoFilter
    summary: Represents the AutoFilter object of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly autoFilter: AutoFilter;'
      return:
        type: '<xref uid="excel!Excel.AutoFilter:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          }
          ```
  - name: charts
    uid: 'excel!Excel.Worksheet#charts:member'
    package: excel!
    fullName: charts
    summary: Returns a collection of charts that are part of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly charts: ChartCollection;'
      return:
        type: '<xref uid="excel!Excel.ChartCollection:interface" />'
  - name: comments
    uid: 'excel!Excel.Worksheet#comments:member'
    package: excel!
    fullName: comments
    summary: Returns a collection of all the Comments objects on the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type: '<xref uid="excel!Excel.CommentCollection:interface" />'
  - name: enableCalculation
    uid: 'excel!Excel.Worksheet#enableCalculation:member'
    package: excel!
    fullName: enableCalculation
    summary: >-
      Determines if Excel should recalculate the worksheet when necessary. True
      if Excel recalculates the worksheet when necessary. False if Excel doesn't
      recalculate the sheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type: boolean
  - name: freezePanes
    uid: 'excel!Excel.Worksheet#freezePanes:member'
    package: excel!
    fullName: freezePanes
    summary: >-
      Gets an object that can be used to manipulate frozen panes on the
      worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly freezePanes: WorksheetFreezePanes;'
      return:
        type: '<xref uid="excel!Excel.WorksheetFreezePanes:interface" />'
  - name: horizontalPageBreaks
    uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    package: excel!
    fullName: horizontalPageBreaks
    summary: >-
      Gets the horizontal page break collection for the worksheet. This
      collection only contains manual page breaks.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly horizontalPageBreaks: PageBreakCollection;'
      return:
        type: '<xref uid="excel!Excel.PageBreakCollection:interface" />'
  - name: id
    uid: 'excel!Excel.Worksheet#id:member'
    package: excel!
    fullName: id
    summary: >-
      Returns a value that uniquely identifies the worksheet in a given
      workbook. The value of the identifier remains the same even when the
      worksheet is renamed or moved.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: name
    uid: 'excel!Excel.Worksheet#name:member'
    package: excel!
    fullName: name
    summary: The display name of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: names
    uid: 'excel!Excel.Worksheet#names:member'
    package: excel!
    fullName: names
    summary: Collection of names scoped to the current worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type: '<xref uid="excel!Excel.NamedItemCollection:interface" />'
  - name: pageLayout
    uid: 'excel!Excel.Worksheet#pageLayout:member'
    package: excel!
    fullName: pageLayout
    summary: Gets the PageLayout object of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pageLayout: PageLayout;'
      return:
        type: '<xref uid="excel!Excel.PageLayout:interface" />'
  - name: pivotTables
    uid: 'excel!Excel.Worksheet#pivotTables:member'
    package: excel!
    fullName: pivotTables
    summary: Collection of PivotTables that are part of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type: '<xref uid="excel!Excel.PivotTableCollection:interface" />'
  - name: position
    uid: 'excel!Excel.Worksheet#position:member'
    package: excel!
    fullName: position
    summary: The zero-based position of the worksheet within the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'position: number;'
      return:
        type: number
  - name: protection
    uid: 'excel!Excel.Worksheet#protection:member'
    package: excel!
    fullName: protection
    summary: Returns sheet protection object for a worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly protection: WorksheetProtection;'
      return:
        type: '<xref uid="excel!Excel.WorksheetProtection:interface" />'
  - name: shapes
    uid: 'excel!Excel.Worksheet#shapes:member'
    package: excel!
    fullName: shapes
    summary: Returns the collection of all the Shape objects on the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly shapes: ShapeCollection;'
      return:
        type: '<xref uid="excel!Excel.ShapeCollection:interface" />'
  - name: showGridlines
    uid: 'excel!Excel.Worksheet#showGridlines:member'
    package: excel!
    fullName: showGridlines
    summary: Specifies if gridlines are visible to the user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type: boolean
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          }
          ```
  - name: showHeadings
    uid: 'excel!Excel.Worksheet#showHeadings:member'
    package: excel!
    fullName: showHeadings
    summary: Specifies if headings are visible to the user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type: boolean
  - name: slicers
    uid: 'excel!Excel.Worksheet#slicers:member'
    package: excel!
    fullName: slicers
    summary: Returns a collection of slicers that are part of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type: '<xref uid="excel!Excel.SlicerCollection:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
  - name: standardHeight
    uid: 'excel!Excel.Worksheet#standardHeight:member'
    package: excel!
    fullName: standardHeight
    summary: >-
      Returns the standard (default) height of all the rows in the worksheet, in
      points.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type: number
  - name: standardWidth
    uid: 'excel!Excel.Worksheet#standardWidth:member'
    package: excel!
    fullName: standardWidth
    summary: >-
      Specifies the standard (default) width of all the columns in the
      worksheet. One unit of column width is equal to the width of one character
      in the Normal style. For proportional fonts, the width of the character 0
      (zero) is used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'standardWidth: number;'
      return:
        type: number
  - name: tabColor
    uid: 'excel!Excel.Worksheet#tabColor:member'
    package: excel!
    fullName: tabColor
    summary: >-
      The tab color of the worksheet. When retrieving the tab color, if the
      worksheet is invisible, the value will be null. If the worksheet is
      visible but the tab color is set to auto, an empty string will be
      returned. Otherwise, the property will be set to a color, in the form
      "\#123456" When setting the color, use an empty-string to set an "auto"
      color, or a real color otherwise.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tabColor: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          }
          ```
  - name: tables
    uid: 'excel!Excel.Worksheet#tables:member'
    package: excel!
    fullName: tables
    summary: Collection of tables that are part of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type: '<xref uid="excel!Excel.TableCollection:interface" />'
  - name: verticalPageBreaks
    uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    package: excel!
    fullName: verticalPageBreaks
    summary: >-
      Gets the vertical page break collection for the worksheet. This collection
      only contains manual page breaks.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly verticalPageBreaks: PageBreakCollection;'
      return:
        type: '<xref uid="excel!Excel.PageBreakCollection:interface" />'
  - name: visibility
    uid: 'excel!Excel.Worksheet#visibility:member'
    package: excel!
    fullName: visibility
    summary: The Visibility of the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type: >-
          <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden"
          | "VeryHidden"
methods:
  - name: activate()
    uid: 'excel!Excel.Worksheet#activate:member(1)'
    package: excel!
    fullName: activate()
    summary: Activate the worksheet in the Excel UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activate(): void;'
      return:
        type: void
        description: ''
  - name: calculate(markAllDirty)
    uid: 'excel!Excel.Worksheet#calculate:member(1)'
    package: excel!
    fullName: calculate(markAllDirty)
    summary: Calculates all cells on a worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      parameters:
        - id: markAllDirty
          description: 'True, to mark all as dirty.'
          type: boolean
      return:
        type: void
        description: ''
  - name: 'copy(positionType, relativeTo)'
    uid: 'excel!Excel.Worksheet#copy:member(1)'
    package: excel!
    fullName: 'copy(positionType, relativeTo)'
    summary: Copies a worksheet and places it at the specified position.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copy(
                    positionType?:
                        | WorksheetPositionType
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End",
                    relativeTo?: Worksheet
                ): Worksheet;
      parameters:
        - id: positionType
          description: >-
            The location in the workbook to place the newly created worksheet.
            The default value is "None", which inserts the worksheet at the
            beginning of the worksheet.
          type: |-
            | <xref uid="excel!Excel.WorksheetPositionType:enum" />
                            | "None"
                            | "Before"
                            | "After"
                            | "Beginning"
                            | "End"
        - id: relativeTo
          description: >-
            The existing worksheet which determines the newly created
            worksheet's position. This is only needed if `positionType` is
            "Before" or "After".
          type: '<xref uid="excel!Excel.Worksheet:interface" />'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          }
          ```
  - name: delete()
    uid: 'excel!Excel.Worksheet#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: >-
      Deletes the worksheet from the workbook. Note that if the worksheet's
      visibility is set to "VeryHidden", the delete operation will fail with an
      `InvalidOperation` exception. You should first change its visibility to
      hidden or visible before deleting it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: 'findAll(text, criteria)'
    uid: 'excel!Excel.Worksheet#findAll:member(1)'
    package: excel!
    fullName: 'findAll(text, criteria)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified
      and returns them as a RangeAreas object, comprising one or more
      rectangular ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including whether the search needs to
            match the entire cell or be case sensitive.
          type: '<xref uid="excel!Excel.WorksheetSearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: 'findAllOrNullObject(text, criteria)'
    uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    package: excel!
    fullName: 'findAllOrNullObject(text, criteria)'
    summary: >-
      Finds all occurrences of the given string based on the criteria specified
      and returns them as a RangeAreas object, comprising one or more
      rectangular ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        findAllOrNullObject(
                    text: string,
                    criteria: WorksheetSearchCriteria
                ): RangeAreas;
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including whether the search needs to
            match the entire cell or be case sensitive.
          type: '<xref uid="excel!Excel.WorksheetSearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          }
          ```
  - name: 'getCell(row, column)'
    uid: 'excel!Excel.Worksheet#getCell:member(1)'
    package: excel!
    fullName: 'getCell(row, column)'
    summary: >-
      Gets the range object containing the single cell based on row and column
      numbers. The cell can be outside the bounds of its parent range, so long
      as it stays within the worksheet grid.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      parameters:
        - id: row
          description: The row number of the cell to be retrieved. Zero-indexed.
          type: number
        - id: column
          description: the column number of the cell to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getNext(visibleOnly)
    uid: 'excel!Excel.Worksheet#getNext:member(1)'
    package: excel!
    fullName: getNext(visibleOnly)
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets
      following this one, this method will throw an error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getNextOrNullObject(visibleOnly)
    uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    package: excel!
    fullName: getNextOrNullObject(visibleOnly)
    summary: >-
      Gets the worksheet that follows this one. If there are no worksheets
      following this one, this method will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getPrevious(visibleOnly)
    uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    package: excel!
    fullName: getPrevious(visibleOnly)
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous
      worksheets, this method will throw an error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getPreviousOrNullObject(visibleOnly)
    uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    package: excel!
    fullName: getPreviousOrNullObject(visibleOnly)
    summary: >-
      Gets the worksheet that precedes this one. If there are no previous
      worksheets, this method will return a null objet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getRange(address)
    uid: 'excel!Excel.Worksheet#getRange:member(1)'
    package: excel!
    fullName: getRange(address)
    summary: >-
      Gets the range object, representing a single rectangular block of cells,
      specified by the address or name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(address?: string): Range;'
      parameters:
        - id: address
          description: >-
            Optional. The string representing the address or name of the range.
            For example, "A1:B2". If not specified, the entire worksheet range
            is returned.
          type: string
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    package: excel!
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    summary: >-
      Gets the range object beginning at a particular row index and column
      index, and spanning a certain number of rows and columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      parameters:
        - id: startRow
          description: Start row (zero-indexed).
          type: number
        - id: startColumn
          description: Start column (zero-indexed).
          type: number
        - id: rowCount
          description: Number of rows to include in the range.
          type: number
        - id: columnCount
          description: Number of columns to include in the range.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRanges(address)
    uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    package: excel!
    fullName: getRanges(address)
    summary: >-
      Gets the RangeAreas object, representing one or more blocks of rectangular
      ranges, specified by the address or name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      parameters:
        - id: address
          description: >-
            Optional. A string containing the comma-separated addresses or names
            of the individual ranges. For example, "A1:B2, A5:B5". If not
            specified, an RangeArea object for the entire worksheet is returned.
          type: string
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
  - name: getUsedRange(valuesOnly)
    uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    package: excel!
    fullName: getUsedRange(valuesOnly)
    summary: >-
      The used range is the smallest range that encompasses any cells that have
      a value or formatting assigned to them. If the entire worksheet is blank,
      this function will return the top left cell (i.e. it will *not* throw an
      error).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: >-
            Optional. If true, considers only cells with values as used cells
            (ignoring formatting).
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getUsedRangeOrNullObject(valuesOnly)
    uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    package: excel!
    fullName: getUsedRangeOrNullObject(valuesOnly)
    summary: >-
      The used range is the smallest range that encompasses any cells that have
      a value or formatting assigned to them. If the entire worksheet is blank,
      this function will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: Optional. Considers only cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Worksheet#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    package: excel!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: >-
      Finds and replaces the given string based on the criteria specified within
      the current worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      parameters:
        - id: text
          description: String to find.
          type: string
        - id: replacement
          description: String to replace the original with.
          type: string
        - id: criteria
          description: Additional Replace Criteria.
          type: '<xref uid="excel!Excel.ReplaceCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: 'showOutlineLevels(rowLevels, columnLevels)'
    uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    package: excel!
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    summary: >-
      Shows row or column groups by their outline levels. Outlines group and
      summarize a list of data in the worksheet. The `rowLevels` and
      `columnLevels` parameters specify how many levels of the outline will be
      displayed. The acceptable argument range is between 0 and 8. A value of 0
      does not change the current display. A value greater than the current
      number of levels displays all the levels.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      parameters:
        - id: rowLevels
          description: The number of row levels of an outline to display.
          type: number
        - id: columnLevels
          description: The number of column levels of an outline to display.
          type: number
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This collapses the entire outline.
              sheet.showOutlineLevels(1, 1);
              await context.sync();
          }
          ```
          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This shows the top 3 outline levels; collapsing any additional sublevels.
              sheet.showOutlineLevels(3, 3);
              await context.sync();
          }
          ```
