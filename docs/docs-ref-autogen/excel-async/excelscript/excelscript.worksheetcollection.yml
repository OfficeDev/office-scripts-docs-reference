### YamlMime:TSType
name: Excel.WorksheetCollection
uid: 'excel!Excel.WorksheetCollection:interface'
package: excel!
fullName: Excel.WorksheetCollection
summary: Represents a collection of worksheet objects that are part of the workbook.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: add(name)
    uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    package: excel!
    fullName: add(name)
    summary: >-
      Adds a new worksheet to the workbook. The worksheet will be added at the
      end of existing worksheets. If you wish to activate the newly added
      worksheet, call ".activate() on it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(name?: string): Worksheet;'
      parameters:
        - id: name
          description: >-
            Optional. The name of the worksheet to be added. If specified, name
            should be unqiue. If not specified, Excel determines the name of the
            new worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getActiveWorksheet()
    uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    package: excel!
    fullName: getActiveWorksheet()
    summary: Gets the currently active worksheet in the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveWorksheet(): Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getCount(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    package: excel!
    fullName: getCount(visibleOnly)
    summary: Gets the number of worksheets in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(visibleOnly?: boolean): ClientResult<number>;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getFirst(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    package: excel!
    fullName: getFirst(visibleOnly)
    summary: Gets the first worksheet in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              let firstSheet = sheets.getFirst().getNext();
              let lastSheet = sheets.getLast();
              let firstTaxRateRange = firstSheet.getRange("B2");
              let lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          }
          ```
  - name: getItem(key)
    uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(key)
    summary: Gets a worksheet object using its Name or ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Worksheet;'
      parameters:
        - id: key
          description: The Name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a worksheet object using its Name or ID. If the worksheet does not
      exist, will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Worksheet;'
      parameters:
        - id: key
          description: The Name or ID of the worksheet.
          type: string
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: ''
  - name: getLast(visibleOnly)
    uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    package: excel!
    fullName: getLast(visibleOnly)
    summary: Gets the last worksheet in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLast(visibleOnly?: boolean): Worksheet;'
      parameters:
        - id: visibleOnly
          description: >-
            Optional. If true, considers only visible worksheets, skipping over
            any hidden ones.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              let firstSheet = sheets.getFirst().getNext();
              let lastSheet = sheets.getLast();
              let firstTaxRateRange = firstSheet.getRange("B2");
              let lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          }
          ```
  - name: load(propertyNames)
    uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
