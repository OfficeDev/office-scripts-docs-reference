### YamlMime:TSType
name: Excel.CustomXmlPartCollection
uid: 'excel!Excel.CustomXmlPartCollection:interface'
package: excel!
fullName: Excel.CustomXmlPartCollection
summary: A collection of custom XML parts.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: add(xml)
    uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    package: excel!
    fullName: add(xml)
    summary: Adds a new custom XML part to the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(xml: string): CustomXmlPart;'
      parameters:
        - id: xml
          description: XML content. Must be a valid XML fragment.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              let customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              let xmlBlob = customXmlPart.getXml();

              await context.sync();

              let readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              let settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          }
          ```
  - name: getByNamespace(namespaceUri)
    uid: 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
    package: excel!
    fullName: getByNamespace(namespaceUri)
    summary: >-
      Gets a new scoped collection of custom XML parts whose namespaces match
      the given namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getByNamespace(namespaceUri: string): CustomXmlPartScopedCollection;'
      parameters:
        - id: namespaceUri
          description: >-
            This must be a fully qualified schema URI; for example,
            "http://schemas.contoso.com/review/1.0".
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartScopedCollection:interface" />'
        description: ''
  - name: getCount()
    uid: 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Gets the number of CustomXml parts in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getItem(id)
    uid: 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(id)
    summary: Gets a custom XML part based on its ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): CustomXmlPart;'
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:interface" />'
        description: ''
  - name: getItemOrNullObject(id)
    uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    package: excel!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a custom XML part based on its ID. If the CustomXmlPart does not
      exist, the return object's isNull property will be true.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): CustomXmlPart;'
      parameters:
        - id: id
          description: ID of the object to be retrieved.
          type: string
      return:
        type: '<xref uid="excel!Excel.CustomXmlPart:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
