### YamlMime:TSType
name: Excel.Workbook
uid: 'excel!Excel.Workbook:interface'
package: excel!
fullName: Excel.Workbook
summary: >-
  Workbook is the top level object which contains related workbook objects such
  as worksheets, tables, ranges, etc. To learn more about the workbook object
  model, read [Work with workbooks using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: application
    uid: 'excel!Excel.Workbook#application:member'
    package: excel!
    fullName: application
    summary: Represents the Excel application instance that contains this workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly application: Application;'
      return:
        type: '<xref uid="excel!Excel.Application:interface" />'
  - name: autoSave
    uid: 'excel!Excel.Workbook#autoSave:member'
    package: excel!
    fullName: autoSave
    summary: Specifies if the workbook is in autosave mode.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly autoSave: boolean;'
      return:
        type: boolean
  - name: bindings
    uid: 'excel!Excel.Workbook#bindings:member'
    package: excel!
    fullName: bindings
    summary: Represents a collection of bindings that are part of the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly bindings: BindingCollection;'
      return:
        type: '<xref uid="excel!Excel.BindingCollection:interface" />'
  - name: calculationEngineVersion
    uid: 'excel!Excel.Workbook#calculationEngineVersion:member'
    package: excel!
    fullName: calculationEngineVersion
    summary: Returns a number about the version of Excel Calculation Engine.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type: number
  - name: chartDataPointTrack
    uid: 'excel!Excel.Workbook#chartDataPointTrack:member'
    package: excel!
    fullName: chartDataPointTrack
    summary: >-
      True if all charts in the workbook are tracking the actual data points to
      which they are attached. False if the charts track the index of the data
      points.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'chartDataPointTrack: boolean;'
      return:
        type: boolean
  - name: comments
    uid: 'excel!Excel.Workbook#comments:member'
    package: excel!
    fullName: comments
    summary: Represents a collection of Comments associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type: '<xref uid="excel!Excel.CommentCollection:interface" />'
  - name: customXmlParts
    uid: 'excel!Excel.Workbook#customXmlParts:member'
    package: excel!
    fullName: customXmlParts
    summary: Represents the collection of custom XML parts contained by this workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customXmlParts: CustomXmlPartCollection;'
      return:
        type: '<xref uid="excel!Excel.CustomXmlPartCollection:interface" />'
  - name: dataConnections
    uid: 'excel!Excel.Workbook#dataConnections:member'
    package: excel!
    fullName: dataConnections
    summary: Represents all data connections in the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataConnections: DataConnectionCollection;'
      return:
        type: '<xref uid="excel!Excel.DataConnectionCollection:interface" />'
  - name: isDirty
    uid: 'excel!Excel.Workbook#isDirty:member'
    package: excel!
    fullName: isDirty
    summary: >-
      Specifies if changes have been made since the workbook was last saved. You
      can set this property to true if you want to close a modified workbook
      without either saving it or being prompted to save it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isDirty: boolean;'
      return:
        type: boolean
  - name: name
    uid: 'excel!Excel.Workbook#name:member'
    package: excel!
    fullName: name
    summary: Gets the workbook name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly name: string;'
      return:
        type: string
  - name: names
    uid: 'excel!Excel.Workbook#names:member'
    package: excel!
    fullName: names
    summary: >-
      Represents a collection of workbook scoped named items (named ranges and
      constants).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type: '<xref uid="excel!Excel.NamedItemCollection:interface" />'
  - name: pivotTables
    uid: 'excel!Excel.Workbook#pivotTables:member'
    package: excel!
    fullName: pivotTables
    summary: Represents a collection of PivotTables associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type: '<xref uid="excel!Excel.PivotTableCollection:interface" />'
  - name: pivotTableStyles
    uid: 'excel!Excel.Workbook#pivotTableStyles:member'
    package: excel!
    fullName: pivotTableStyles
    summary: Represents a collection of PivotTableStyles associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pivotTableStyles: PivotTableStyleCollection;'
      return:
        type: '<xref uid="excel!Excel.PivotTableStyleCollection:interface" />'
  - name: previouslySaved
    uid: 'excel!Excel.Workbook#previouslySaved:member'
    package: excel!
    fullName: previouslySaved
    summary: Specifies if the workbook has ever been saved locally or online.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly previouslySaved: boolean;'
      return:
        type: boolean
  - name: properties
    uid: 'excel!Excel.Workbook#properties:member'
    package: excel!
    fullName: properties
    summary: Gets the workbook properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly properties: DocumentProperties;'
      return:
        type: '<xref uid="excel!Excel.DocumentProperties:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let titleValue = "Excel document properties API";
              let subjectValue = "Set and get document properties";
              let keywordsValue = "Set and get operations";
              let commentsValue = "This is an Excel document properties API code sample";
              let categoryValue = "Office Add-ins";
              let managerValue = "John";
              let companyValue = "Microsoft";

              let docProperties = context.workbook.properties;

              // Set the writeable document properties.
              docProperties.title = titleValue;
              docProperties.subject = subjectValue;
              docProperties.keywords = keywordsValue;
              docProperties.comments = commentsValue;
              docProperties.category = categoryValue;
              docProperties.manager = managerValue;
              docProperties.company = companyValue;

              await context.sync();

              console.log("Set the following document properties: title, subject, keywords, comments, category, manager, company.");
          }
          ```
  - name: protection
    uid: 'excel!Excel.Workbook#protection:member'
    package: excel!
    fullName: protection
    summary: Returns the protection object for a workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly protection: WorkbookProtection;'
      return:
        type: '<xref uid="excel!Excel.WorkbookProtection:interface" />'
  - name: readOnly
    uid: 'excel!Excel.Workbook#readOnly:member'
    package: excel!
    fullName: readOnly
    summary: True if the workbook is open in Read-only mode.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly readOnly: boolean;'
      return:
        type: boolean
  - name: slicers
    uid: 'excel!Excel.Workbook#slicers:member'
    package: excel!
    fullName: slicers
    summary: Represents a collection of Slicers associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type: '<xref uid="excel!Excel.SlicerCollection:interface" />'
  - name: slicerStyles
    uid: 'excel!Excel.Workbook#slicerStyles:member'
    package: excel!
    fullName: slicerStyles
    summary: Represents a collection of SlicerStyles associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slicerStyles: SlicerStyleCollection;'
      return:
        type: '<xref uid="excel!Excel.SlicerStyleCollection:interface" />'
  - name: styles
    uid: 'excel!Excel.Workbook#styles:member'
    package: excel!
    fullName: styles
    summary: Represents a collection of styles associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly styles: StyleCollection;'
      return:
        type: '<xref uid="excel!Excel.StyleCollection:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          }
          ```
  - name: tables
    uid: 'excel!Excel.Workbook#tables:member'
    package: excel!
    fullName: tables
    summary: Represents a collection of tables associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type: '<xref uid="excel!Excel.TableCollection:interface" />'
  - name: tableStyles
    uid: 'excel!Excel.Workbook#tableStyles:member'
    package: excel!
    fullName: tableStyles
    summary: Represents a collection of TableStyles associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tableStyles: TableStyleCollection;'
      return:
        type: '<xref uid="excel!Excel.TableStyleCollection:interface" />'
  - name: timelineStyles
    uid: 'excel!Excel.Workbook#timelineStyles:member'
    package: excel!
    fullName: timelineStyles
    summary: Represents a collection of TimelineStyles associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly timelineStyles: TimelineStyleCollection;'
      return:
        type: '<xref uid="excel!Excel.TimelineStyleCollection:interface" />'
  - name: usePrecisionAsDisplayed
    uid: 'excel!Excel.Workbook#usePrecisionAsDisplayed:member'
    package: excel!
    fullName: usePrecisionAsDisplayed
    summary: >-
      True if calculations in this workbook will be done using only the
      precision of the numbers as they're displayed. Data will permanently lose
      accuracy when switching this property from false to true.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'usePrecisionAsDisplayed: boolean;'
      return:
        type: boolean
  - name: worksheets
    uid: 'excel!Excel.Workbook#worksheets:member'
    package: excel!
    fullName: worksheets
    summary: Represents a collection of worksheets associated with the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheets: WorksheetCollection;'
      return:
        type: '<xref uid="excel!Excel.WorksheetCollection:interface" />'
methods:
  - name: getActiveCell()
    uid: 'excel!Excel.Workbook#getActiveCell:member(1)'
    package: excel!
    fullName: getActiveCell()
    summary: Gets the currently active cell from the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveCell(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {

              let myWorkbook = context.workbook;
              let activeCell = myWorkbook.getActiveCell();
              activeCell.load("address");

              await context.sync();
              
              console.log("The active cell is " + activeCell.address);
          }
          ```
  - name: getActiveChart()
    uid: 'excel!Excel.Workbook#getActiveChart:member(1)'
    package: excel!
    fullName: getActiveChart()
    summary: >-
      Gets the currently active chart in the workbook. If there is no active
      chart, an `ItemNotFound` exception is thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveChart(): Chart;'
      return:
        type: '<xref uid="excel!Excel.Chart:interface" />'
        description: ''
  - name: getActiveChartOrNullObject()
    uid: 'excel!Excel.Workbook#getActiveChartOrNullObject:member(1)'
    package: excel!
    fullName: getActiveChartOrNullObject()
    summary: >-
      Gets the currently active chart in the workbook. If there is no active
      chart, a null object is returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveChartOrNullObject(): Chart;'
      return:
        type: '<xref uid="excel!Excel.Chart:interface" />'
        description: ''
  - name: getActiveSlicer()
    uid: 'excel!Excel.Workbook#getActiveSlicer:member(1)'
    package: excel!
    fullName: getActiveSlicer()
    summary: >-
      Gets the currently active slicer in the workbook. If there is no active
      slicer, an `ItemNotFound` exception is thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveSlicer(): Slicer;'
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: ''
  - name: getActiveSlicerOrNullObject()
    uid: 'excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)'
    package: excel!
    fullName: getActiveSlicerOrNullObject()
    summary: >-
      Gets the currently active slicer in the workbook. If there is no active
      slicer, a null object is returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getActiveSlicerOrNullObject(): Slicer;'
      return:
        type: '<xref uid="excel!Excel.Slicer:interface" />'
        description: ''
  - name: getSelectedRange()
    uid: 'excel!Excel.Workbook#getSelectedRange:member(1)'
    package: excel!
    fullName: getSelectedRange()
    summary: >-
      Gets the currently selected single range from the workbook. If there are
      multiple ranges selected, this method will throw an error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedRange(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getSelectedRanges()
    uid: 'excel!Excel.Workbook#getSelectedRanges:member(1)'
    package: excel!
    fullName: getSelectedRanges()
    summary: >-
      Gets the currently selected one or more ranges from the workbook. Unlike
      getSelectedRange(), this method returns a RangeAreas object that
      represents all the selected ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelectedRanges(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {

              let selectedRanges = context.workbook.getSelectedRanges();
              selectedRanges.format.fill.color = "lightblue";

              await context.sync();
          })
          ```
  - name: load(propertyNames)
    uid: 'excel!Excel.Workbook#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
