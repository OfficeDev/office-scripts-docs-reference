### YamlMime:TSType
name: Excel.DataValidation
uid: 'excel!Excel.DataValidation:interface'
package: excel!
fullName: Excel.DataValidation
summary: >-
  Represents the data validation applied to the current range. To learn more
  about the data validation object model, read [Add data validation to Excel
  ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: errorAlert
    uid: 'excel!Excel.DataValidation#errorAlert:member'
    package: excel!
    fullName: errorAlert
    summary: Error alert when user enters invalid data.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorAlert: DataValidationErrorAlert;'
      return:
        type: '<xref uid="excel!Excel.DataValidationErrorAlert:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          }
          ```
  - name: ignoreBlanks
    uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    package: excel!
    fullName: ignoreBlanks
    summary: >-
      Specifies if data validation will be performed on blank cells, it defaults
      to true.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type: boolean
  - name: prompt
    uid: 'excel!Excel.DataValidation#prompt:member'
    package: excel!
    fullName: prompt
    summary: Prompt when users select a cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prompt: DataValidationPrompt;'
      return:
        type: '<xref uid="excel!Excel.DataValidationPrompt:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          }
          ```
  - name: rule
    uid: 'excel!Excel.DataValidation#rule:member'
    package: excel!
    fullName: rule
    summary: >-
      Data validation rule that contains different type of data validation
      criteria.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rule: DataValidationRule;'
      return:
        type: '<xref uid="excel!Excel.DataValidationRule:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          }
          ```
  - name: type
    uid: 'excel!Excel.DataValidation#type:member'
    package: excel!
    fullName: type
    summary: 'Type of the data validation, see Excel.DataValidationType for details.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        readonly type:
                    | DataValidationType
                    | "None"
                    | "WholeNumber"
                    | "Decimal"
                    | "List"
                    | "Date"
                    | "Time"
                    | "TextLength"
                    | "Custom"
                    | "Inconsistent"
                    | "MixedCriteria";
      return:
        type: |-
          | <xref uid="excel!Excel.DataValidationType:enum" />
                      | "None"
                      | "WholeNumber"
                      | "Decimal"
                      | "List"
                      | "Date"
                      | "Time"
                      | "TextLength"
                      | "Custom"
                      | "Inconsistent"
                      | "MixedCriteria"
  - name: valid
    uid: 'excel!Excel.DataValidation#valid:member'
    package: excel!
    fullName: valid
    summary: >-
      Represents if all cell values are valid according to the data validation
      rules. Returns true if all cell values are valid, or false if all cell
      values are invalid. Returns null if there are both valid and invalid cell
      values within the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type: boolean
methods:
  - name: clear()
    uid: 'excel!Excel.DataValidation#clear:member(1)'
    package: excel!
    fullName: clear()
    summary: Clears the data validation from the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(): void;'
      return:
        type: void
        description: ''
  - name: getInvalidCells()
    uid: 'excel!Excel.DataValidation#getInvalidCells:member(1)'
    package: excel!
    fullName: getInvalidCells()
    summary: >-
      Returns a RangeAreas, comprising one or more rectangular ranges, with
      invalid cell values. If all cell values are valid, this function will
      throw an ItemNotFound error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getInvalidCells(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: getInvalidCellsOrNullObject()
    uid: 'excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)'
    package: excel!
    fullName: getInvalidCellsOrNullObject()
    summary: >-
      Returns a RangeAreas, comprising one or more rectangular ranges, with
      invalid cell values. If all cell values are valid, this function will
      return null.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getInvalidCellsOrNullObject(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.DataValidation#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
