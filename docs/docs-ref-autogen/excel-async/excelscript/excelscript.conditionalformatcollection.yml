### YamlMime:TSType
name: Excel.ConditionalFormatCollection
uid: 'excel!Excel.ConditionalFormatCollection:interface'
package: excel!
fullName: Excel.ConditionalFormatCollection
summary: >-
  Represents a collection of all the conditional formats that are overlap the
  range.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: add(type)
    uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    package: excel!
    fullName: add(type)
    summary: Adds a new conditional format to the collection at the first/top priority.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        add(
                    type:
                        | ConditionalFormatType
                        | "Custom"
                        | "DataBar"
                        | "ColorScale"
                        | "IconSet"
                        | "TopBottom"
                        | "PresetCriteria"
                        | "ContainsText"
                        | "CellValue"
                ): ConditionalFormat;
      parameters:
        - id: type
          description: >-
            The type of conditional format being added. See
            Excel.ConditionalFormatType for details.
          type: |-
            | <xref uid="excel!Excel.ConditionalFormatType:enum" />
                            | "Custom"
                            | "DataBar"
                            | "ColorScale"
                            | "IconSet"
                            | "TopBottom"
                            | "PresetCriteria"
                            | "ContainsText"
                            | "CellValue"
                    
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              let criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          }
          ```
  - name: clearAll()
    uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    package: excel!
    fullName: clearAll()
    summary: Clears all conditional formats active on the current specified range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAll(): void;'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          }
          ```
  - name: getCount()
    uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Returns the number of conditional formats in the workbook.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getItem(id)
    uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(id)
    summary: Returns a conditional format for the given ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): ConditionalFormat;'
      parameters:
        - id: id
          description: The id of the conditional format.
          type: string
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:interface" />'
        description: ''
  - name: getItemAt(index)
    uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: Returns a conditional format at the given index.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): ConditionalFormat;'
      parameters:
        - id: index
          description: Index of the conditional formats to be retrieved.
          type: number
      return:
        type: '<xref uid="excel!Excel.ConditionalFormat:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
