### YamlMime:TSType
name: Excel.Range
uid: 'excel!Excel.Range:interface'
package: excel!
fullName: Excel.Range
summary: >-
  Range represents a set of one or more contiguous cells such as a cell, a row,
  a column, block of cells, etc. To learn more about how ranges are used
  throughout the API, read [Work with ranges using the Excel JavaScript
  API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)
  and [Work with ranges using the Excel JavaScript API
  (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: address
    uid: 'excel!Excel.Range#address:member'
    package: excel!
    fullName: address
    summary: >-
      Specifies the range reference in A1-style. Address value will contain the
      Sheet reference (e.g., "Sheet1!A1:B4").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly address: string;'
      return:
        type: string
  - name: addressLocal
    uid: 'excel!Excel.Range#addressLocal:member'
    package: excel!
    fullName: addressLocal
    summary: >-
      Specifies the range reference for the specified range in the language of
      the user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type: string
  - name: cellCount
    uid: 'excel!Excel.Range#cellCount:member'
    package: excel!
    fullName: cellCount
    summary: >-
      Specifies the number of cells in the range. This API will return -1 if the
      cell count exceeds 2^31-1 (2,147,483,647).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type: number
  - name: columnCount
    uid: 'excel!Excel.Range#columnCount:member'
    package: excel!
    fullName: columnCount
    summary: Specifies the total number of columns in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type: number
  - name: columnHidden
    uid: 'excel!Excel.Range#columnHidden:member'
    package: excel!
    fullName: columnHidden
    summary: Represents if all columns of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type: boolean
  - name: columnIndex
    uid: 'excel!Excel.Range#columnIndex:member'
    package: excel!
    fullName: columnIndex
    summary: Specifies the column number of the first cell in the range. Zero-indexed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type: number
  - name: conditionalFormats
    uid: 'excel!Excel.Range#conditionalFormats:member'
    package: excel!
    fullName: conditionalFormats
    summary: The collection of ConditionalFormats that intersect the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly conditionalFormats: ConditionalFormatCollection;'
      return:
        type: '<xref uid="excel!Excel.ConditionalFormatCollection:interface" />'
  - name: dataValidation
    uid: 'excel!Excel.Range#dataValidation:member'
    package: excel!
    fullName: dataValidation
    summary: Returns a data validation object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataValidation: DataValidation;'
      return:
        type: '<xref uid="excel!Excel.DataValidation:interface" />'
  - name: format
    uid: 'excel!Excel.Range#format:member'
    package: excel!
    fullName: format
    summary: >-
      Returns a format object, encapsulating the range's font, fill, borders,
      alignment, and other properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: RangeFormat;'
      return:
        type: '<xref uid="excel!Excel.RangeFormat:interface" />'
  - name: formulas
    uid: 'excel!Excel.Range#formulas:member'
    package: excel!
    fullName: formulas
    summary: Represents the formula in A1-style notation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulas: any[][];'
      return:
        type: 'any[][]'
  - name: formulasLocal
    uid: 'excel!Excel.Range#formulasLocal:member'
    package: excel!
    fullName: formulasLocal
    summary: >-
      Represents the formula in A1-style notation, in the user's language and
      number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula
      would become "=SUMME(A1; 1,5)" in German.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type: 'any[][]'
  - name: formulasR1C1
    uid: 'excel!Excel.Range#formulasR1C1:member'
    package: excel!
    fullName: formulasR1C1
    summary: Represents the formula in R1C1-style notation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type: 'any[][]'
  - name: height
    uid: 'excel!Excel.Range#height:member'
    package: excel!
    fullName: height
    summary: >-
      Returns the distance in points, for 100% zoom, from top edge of the range
      to bottom edge of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly height: number;'
      return:
        type: number
  - name: hidden
    uid: 'excel!Excel.Range#hidden:member'
    package: excel!
    fullName: hidden
    summary: Represents if all cells of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type: boolean
  - name: hyperlink
    uid: 'excel!Excel.Range#hyperlink:member'
    package: excel!
    fullName: hyperlink
    summary: Represents the hyperlink for the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hyperlink: RangeHyperlink;'
      return:
        type: '<xref uid="excel!Excel.RangeHyperlink:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - name: isEntireColumn
    uid: 'excel!Excel.Range#isEntireColumn:member'
    package: excel!
    fullName: isEntireColumn
    summary: Represents if the current range is an entire column.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type: boolean
  - name: isEntireRow
    uid: 'excel!Excel.Range#isEntireRow:member'
    package: excel!
    fullName: isEntireRow
    summary: Represents if the current range is an entire row.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type: boolean
  - name: left
    uid: 'excel!Excel.Range#left:member'
    package: excel!
    fullName: left
    summary: >-
      Returns the distance in points, for 100% zoom, from left edge of the
      worksheet to left edge of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly left: number;'
      return:
        type: number
  - name: linkedDataTypeState
    uid: 'excel!Excel.Range#linkedDataTypeState:member'
    package: excel!
    fullName: linkedDataTypeState
    summary: Represents the data type state of each cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly linkedDataTypeState: LinkedDataTypeState[][];'
      return:
        type: '<xref uid="excel!Excel.LinkedDataTypeState:enum" />[][]'
  - name: numberFormat
    uid: 'excel!Excel.Range#numberFormat:member'
    package: excel!
    fullName: numberFormat
    summary: Represents Excel's number format code for the given range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type: 'any[][]'
  - name: numberFormatLocal
    uid: 'excel!Excel.Range#numberFormatLocal:member'
    package: excel!
    fullName: numberFormatLocal
    summary: >-
      Represents Excel's number format code for the given range, based on the
      language settings of the user.â€‹ Excel does not perform any language or
      format coercion when getting or setting the `numberFormatLocal` property.
      Any returned text uses the locally-formatted strings based on the language
      specified in the system settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type: 'any[][]'
  - name: rowCount
    uid: 'excel!Excel.Range#rowCount:member'
    package: excel!
    fullName: rowCount
    summary: Returns the total number of rows in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type: number
  - name: rowHidden
    uid: 'excel!Excel.Range#rowHidden:member'
    package: excel!
    fullName: rowHidden
    summary: Represents if all rows of the current range are hidden.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type: boolean
  - name: rowIndex
    uid: 'excel!Excel.Range#rowIndex:member'
    package: excel!
    fullName: rowIndex
    summary: Returns the row number of the first cell in the range. Zero-indexed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type: number
  - name: sort
    uid: 'excel!Excel.Range#sort:member'
    package: excel!
    fullName: sort
    summary: Represents the range sort of the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly sort: RangeSort;'
      return:
        type: '<xref uid="excel!Excel.RangeSort:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let range = sheet.getRange("A1:E5");

              // Find the column header that provides the sort criteria.
              let header = range.find(criteria, {});
              header.load("columnIndex");
              await context.sync();

              range.sort.apply(
                  [
                      {
                          key: header.columnIndex,
                          sortOn: Excel.SortOn.value
                      }
                  ],
                  false /*matchCase*/,
                  true /*hasHeaders*/,
                  Excel.SortOrientation.rows
              );
              await context.sync();
          }
          ```
  - name: style
    uid: 'excel!Excel.Range#style:member'
    package: excel!
    fullName: style
    summary: >-
      Represents the style of the current range. If the styles of the cells are
      inconsistent, null will be returned. For custom styles, the style name
      will be returned. For built-in styles, a string representing a value in
      the BuiltInStyle enum will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          }
          ```
  - name: text
    uid: 'excel!Excel.Range#text:member'
    package: excel!
    fullName: text
    summary: >-
      Text values of the specified range. The Text value will not depend on the
      cell width. The \# sign substitution that happens in Excel UI will not
      affect the text value returned by the API.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly text: string[][];'
      return:
        type: 'string[][]'
  - name: top
    uid: 'excel!Excel.Range#top:member'
    package: excel!
    fullName: top
    summary: >-
      Returns the distance in points, for 100% zoom, from top edge of the
      worksheet to top edge of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly top: number;'
      return:
        type: number
  - name: values
    uid: 'excel!Excel.Range#values:member'
    package: excel!
    fullName: values
    summary: >-
      Represents the raw values of the specified range. The data returned could
      be of type string, number, or a boolean. Cells that contain an error will
      return the error string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'values: any[][];'
      return:
        type: 'any[][]'
  - name: valueTypes
    uid: 'excel!Excel.Range#valueTypes:member'
    package: excel!
    fullName: valueTypes
    summary: Specifies the type of data in each cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly valueTypes: RangeValueType[][];'
      return:
        type: '<xref uid="excel!Excel.RangeValueType:enum" />[][]'
  - name: width
    uid: 'excel!Excel.Range#width:member'
    package: excel!
    fullName: width
    summary: >-
      Returns the distance in points, for 100% zoom, from left edge of the range
      to right edge of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly width: number;'
      return:
        type: number
  - name: worksheet
    uid: 'excel!Excel.Range#worksheet:member'
    package: excel!
    fullName: worksheet
    summary: The worksheet containing the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type: '<xref uid="excel!Excel.Worksheet:interface" />'
methods:
  - name: 'autoFill(destinationRange, autoFillType)'
    uid: 'excel!Excel.Range#autoFill:member(1)'
    package: excel!
    fullName: 'autoFill(destinationRange, autoFillType)'
    summary: >-
      Fills range from the current range to the destination range using the
      specified AutoFill logic. The destination range can be null, or can extend
      the source either horizontally or vertically. Discontiguous ranges are not
      supported.


      For more information, read [Use AutoFill and Flash
      Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!--
      -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?:
                        | AutoFillType
                        | "FillDefault"
                        | "FillCopy"
                        | "FillSeries"
                        | "FillFormats"
                        | "FillValues"
                        | "FillDays"
                        | "FillWeekdays"
                        | "FillMonths"
                        | "FillYears"
                        | "LinearTrend"
                        | "GrowthTrend"
                        | "FlashFill"
                ): void;
      parameters:
        - id: destinationRange
          description: >-
            The destination range to autofill. If the destination range is null,
            data is filled out based on the surrounding cells (which is the
            behavior when double-clicking the UIâ€™s range fill handle).
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
        - id: autoFillType
          description: >-
            The type of autofill. Specifies how the destination range is to be
            filled, based on the contents of the current range. Default is
            "FillDefault".
          type: |-
            | <xref uid="excel!Excel.AutoFillType:enum" />
                            | "FillDefault"
                            | "FillCopy"
                            | "FillSeries"
                            | "FillFormats"
                            | "FillValues"
                            | "FillDays"
                            | "FillWeekdays"
                            | "FillMonths"
                            | "FillYears"
                            | "LinearTrend"
                            | "GrowthTrend"
                            | "FlashFill"
                    
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
            let sheet = context.workbook.worksheets.getActiveWorksheet();
            let sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          }
          ```
  - name: calculate()
    uid: 'excel!Excel.Range#calculate:member(1)'
    package: excel!
    fullName: calculate()
    summary: Calculates a range of cells on a worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'excel!Excel.Range#clear:member(1)'
    package: excel!
    fullName: clear(applyTo)
    summary: 'Clear range values, format, fill, border, etc.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        clear(
                    applyTo?:
                        | ClearApplyTo
                        | "All"
                        | "Formats"
                        | "Contents"
                        | "Hyperlinks"
                        | "RemoveHyperlinks"
                ): void;
      parameters:
        - id: applyTo
          description: >-
            Optional. Determines the type of clear action. See
            Excel.ClearApplyTo for details.
          type: |-
            | <xref uid="excel!Excel.ClearApplyTo:enum" />
                            | "All"
                            | "Formats"
                            | "Contents"
                            | "Hyperlinks"
                            | "RemoveHyperlinks"
                    
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    package: excel!
    fullName: convertDataTypeToText()
    summary: Converts the range cells with datatypes into text.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'convertToLinkedDataType(serviceID, languageCulture)'
    uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    package: excel!
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    summary: Converts the range cells into linked datatype in the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      parameters:
        - id: serviceID
          description: The Service ID which will be used to query the data.
          type: number
        - id: languageCulture
          description: Language Culture to query the service for.
          type: string
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'excel!Excel.Range#copyFrom:member(1)'
    package: excel!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the
      current range. The destination range can be a different size than the
      source range or RangeAreas. The destination will be expanded automatically
      if it is smaller than the source.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?:
                        | RangeCopyType
                        | "All"
                        | "Formulas"
                        | "Values"
                        | "Formats",
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source
            RangeAreas has multiple ranges, their form must be able to be
            created by removing full rows or columns from a rectangular range.
          type: >-
            <xref uid="excel!Excel.Range:interface" /> | <xref
            uid="excel!Excel.RangeAreas:interface" /> | string
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type: |-
            | <xref uid="excel!Excel.RangeCopyType:enum" />
                            | "All"
                            | "Formulas"
                            | "Values"
                            | "Formats"
        - id: skipBlanks
          description: True if to skip blank cells in the source range. Default is false.
          type: boolean
        - id: transpose
          description: >-
            True if to transpose the cells in the destination range. Default is
            false.
          type: boolean
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          }
          ```
  - name: delete(shift)
    uid: 'excel!Excel.Range#delete:member(1)'
    package: excel!
    fullName: delete(shift)
    summary: Deletes the cells associated with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shift: DeleteShiftDirection | "Up" | "Left"): void;'
      parameters:
        - id: shift
          description: >-
            Specifies which way to shift the cells. See
            Excel.DeleteShiftDirection for details.
          type: '<xref uid="excel!Excel.DeleteShiftDirection:enum" /> | "Up" | "Left"'
      return:
        type: void
        description: ''
  - name: 'find(text, criteria)'
    uid: 'excel!Excel.Range#find:member(1)'
    package: excel!
    fullName: 'find(text, criteria)'
    summary: >-
      Finds the given string based on the criteria specified. If the current
      range is larger than a single cell, then the search will be limited to
      that range, else the search will cover the entire sheet starting after
      that cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and
            whether the search needs to match the entire cell or be case
            sensitive.
          type: '<xref uid="excel!Excel.SearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: 'findOrNullObject(text, criteria)'
    uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    package: excel!
    fullName: 'findOrNullObject(text, criteria)'
    summary: >-
      Finds the given string based on the criteria specified. If the current
      range is larger than a single cell, then the search will be limited to
      that range, else the search will cover the entire sheet starting after
      that cell. If there are no matches, this function will return a null
      object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'findOrNullObject(text: string, criteria: SearchCriteria): Range;'
      parameters:
        - id: text
          description: The string to find.
          type: string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and
            whether the search needs to match the entire cell or be case
            sensitive.
          type: '<xref uid="excel!Excel.SearchCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let table = sheet.tables.getItem("ExpensesTable");
              let searchRange = table.getRange();
              let foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          }
          ```
  - name: flashFill()
    uid: 'excel!Excel.Range#flashFill:member(1)'
    package: excel!
    fullName: flashFill()
    summary: >-
      Does FlashFill to current range.Flash Fill will automatically fills data
      when it senses a pattern, so the range must be single column range and
      have data around in order to find pattern.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'flashFill(): void;'
      return:
        type: void
        description: ''
  - name: 'getAbsoluteResizedRange(numRows, numColumns)'
    uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    package: excel!
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    summary: >-
      Gets a Range object with the same top-left cell as the current Range
      object, but with the specified numbers of rows and columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      parameters:
        - id: numRows
          description: The number of rows of the new range size.
          type: number
        - id: numColumns
          description: The number of columns of the new range size.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getBoundingRect(anotherRange)
    uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    package: excel!
    fullName: getBoundingRect(anotherRange)
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For
      example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: The range object or address or range name.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: 'getCell(row, column)'
    uid: 'excel!Excel.Range#getCell:member(1)'
    package: excel!
    fullName: 'getCell(row, column)'
    summary: >-
      Gets the range object containing the single cell based on row and column
      numbers. The cell can be outside the bounds of its parent range, so long
      as it stays within the worksheet grid. The returned cell is located
      relative to the top left cell of the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type: number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getColumn(column)
    uid: 'excel!Excel.Range#getColumn:member(1)'
    package: excel!
    fullName: getColumn(column)
    summary: Gets a column contained in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumn(column: number): Range;'
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getColumnsAfter(count)
    uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    package: excel!
    fullName: getColumnsAfter(count)
    summary: Gets a certain number of columns to the right of the current Range object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range.
            In general, use a positive number to create a range outside the
            current range. You can also use a negative number to create a range
            within the current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getColumnsBefore(count)
    uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    package: excel!
    fullName: getColumnsBefore(count)
    summary: Gets a certain number of columns to the left of the current Range object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range.
            In general, use a positive number to create a range outside the
            current range. You can also use a negative number to create a range
            within the current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getEntireColumn()
    uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    package: excel!
    fullName: getEntireColumn()
    summary: >-
      Gets an object that represents the entire column of the range (for
      example, if the current range represents cells "B4:E11", its
      `getEntireColumn` is a range that represents columns "B:E").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getEntireRow()
    uid: 'excel!Excel.Range#getEntireRow:member(1)'
    package: excel!
    fullName: getEntireRow()
    summary: >-
      Gets an object that represents the entire row of the range (for example,
      if the current range represents cells "B4:E11", its `GetEntireRow` is a
      range that represents rows "4:11").
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getImage()
    uid: 'excel!Excel.Range#getImage:member(1)'
    package: excel!
    fullName: getImage()
    summary: Renders the range as a base64-encoded png image.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getImage(): ClientResult<string>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;string&gt;'
        description: ''
  - name: getIntersection(anotherRange)
    uid: 'excel!Excel.Range#getIntersection:member(1)'
    package: excel!
    fullName: getIntersection(anotherRange)
    summary: >-
      Gets the range object that represents the rectangular intersection of the
      given ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: >-
            The range object or range address that will be used to determine the
            intersection of ranges.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getIntersectionOrNullObject(anotherRange)
    uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    package: excel!
    fullName: getIntersectionOrNullObject(anotherRange)
    summary: >-
      Gets the range object that represents the rectangular intersection of the
      given ranges. If no intersection is found, will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: >-
            The range object or range address that will be used to determine the
            intersection of ranges.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              let usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              let currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              let asianSalesRange = sheet.getRange("A2:E4");
              let europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              let asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              let europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          }
          ```
  - name: getLastCell()
    uid: 'excel!Excel.Range#getLastCell:member(1)'
    package: excel!
    fullName: getLastCell()
    summary: >-
      Gets the last cell within the range. For example, the last cell of "B2:D5"
      is "D5".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getLastColumn()
    uid: 'excel!Excel.Range#getLastColumn:member(1)'
    package: excel!
    fullName: getLastColumn()
    summary: >-
      Gets the last column within the range. For example, the last column of
      "B2:D5" is "D2:D5".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getLastRow()
    uid: 'excel!Excel.Range#getLastRow:member(1)'
    package: excel!
    fullName: getLastRow()
    summary: >-
      Gets the last row within the range. For example, the last row of "B2:D5"
      is "B5:D5".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: 'getOffsetRange(rowOffset, columnOffset)'
    uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    package: excel!
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    summary: >-
      Gets an object which represents a range that's offset from the specified
      range. The dimension of the returned range will match this range. If the
      resulting range is forced outside the bounds of the worksheet grid, an
      error will be thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is
            to be offset. Positive values are offset downward, and negative
            values are offset upward.
          type: number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range
            is to be offset. Positive values are offset to the right, and
            negative values are offset to the left.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getPivotTables(fullyContained)
    uid: 'excel!Excel.Range#getPivotTables:member(1)'
    package: excel!
    fullName: getPivotTables(fullyContained)
    summary: Gets a scoped collection of PivotTables that overlap with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTableScopedCollection;'
      parameters:
        - id: fullyContained
          description: >-
            If true, returns only PivotTables that are fully contained within
            the range bounds. The default value is false.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.PivotTableScopedCollection:interface" />'
        description: ''
  - name: 'getResizedRange(deltaRows, deltaColumns)'
    uid: 'excel!Excel.Range#getResizedRange:member(1)'
    package: excel!
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    summary: >-
      Gets a Range object similar to the current Range object, but with its
      bottom-right corner expanded (or contracted) by some number of rows and
      columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      parameters:
        - id: deltaRows
          description: >-
            The number of rows by which to expand the bottom-right corner,
            relative to the current range. Use a positive number to expand the
            range, or a negative number to decrease it.
          type: number
        - id: deltaColumns
          description: >-
            The number of columns by which to expand the bottom-right corner,
            relative to the current range. Use a positive number to expand the
            range, or a negative number to decrease it.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRow(row)
    uid: 'excel!Excel.Range#getRow:member(1)'
    package: excel!
    fullName: getRow(row)
    summary: Gets a row contained in the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRow(row: number): Range;'
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRowsAbove(count)
    uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    package: excel!
    fullName: getRowsAbove(count)
    summary: Gets a certain number of rows above the current Range object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In
            general, use a positive number to create a range outside the current
            range. You can also use a negative number to create a range within
            the current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRowsBelow(count)
    uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    package: excel!
    fullName: getRowsBelow(count)
    summary: Gets a certain number of rows below the current Range object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In
            general, use a positive number to create a range outside the current
            range. You can also use a negative number to create a range within
            the current range. The default value is 1.
          type: number
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    package: excel!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges,
      that represents all the cells that match the specified type and value. If
      no special cells are found, an ItemNotFound error will be thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCells(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: |-
            | <xref uid="excel!Excel.SpecialCellType:enum" />
                            | "ConditionalFormats"
                            | "DataValidations"
                            | "Blanks"
                            | "Constants"
                            | "Formulas"
                            | "SameConditionalFormat"
                            | "SameDataValidation"
                            | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: |-
            | <xref uid="excel!Excel.SpecialCellValueType:enum" />
                            | "All"
                            | "Errors"
                            | "ErrorsLogical"
                            | "ErrorsNumbers"
                            | "ErrorsText"
                            | "ErrorsLogicalNumber"
                            | "ErrorsLogicalText"
                            | "ErrorsNumberText"
                            | "Logical"
                            | "LogicalNumbers"
                            | "LogicalText"
                            | "LogicalNumbersText"
                            | "Numbers"
                            | "NumbersText"
                            | "Text"
                    
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    package: excel!
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    summary: >-
      Gets the RangeAreas object, comprising one or more ranges, that represents
      all the cells that match the specified type and value. If no special cells
      are found, a null object will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCellsOrNullObject(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      parameters:
        - id: cellType
          description: The type of cells to include.
          type: |-
            | <xref uid="excel!Excel.SpecialCellType:enum" />
                            | "ConditionalFormats"
                            | "DataValidations"
                            | "Blanks"
                            | "Constants"
                            | "Formulas"
                            | "SameConditionalFormat"
                            | "SameDataValidation"
                            | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used
            to determine which types of cells to include in the result. These
            values can be combined together to return more than one type. The
            default is to select all constants or formulas, no matter what the
            type.
          type: |-
            | <xref uid="excel!Excel.SpecialCellValueType:enum" />
                            | "All"
                            | "Errors"
                            | "ErrorsLogical"
                            | "ErrorsNumbers"
                            | "ErrorsText"
                            | "ErrorsLogicalNumber"
                            | "ErrorsLogicalText"
                            | "ErrorsNumberText"
                            | "Logical"
                            | "LogicalNumbers"
                            | "LogicalText"
                            | "LogicalNumbersText"
                            | "Numbers"
                            | "NumbersText"
                            | "Text"
                    
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: getSurroundingRegion()
    uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    package: excel!
    fullName: getSurroundingRegion()
    summary: >-
      Returns a Range object that represents the surrounding region for the
      top-left cell in this range. A surrounding region is a range bounded by
      any combination of blank rows and blank columns relative to this range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'excel!Excel.Range#getTables:member(1)'
    package: excel!
    fullName: getTables(fullyContained)
    summary: Gets a scoped collection of tables that overlap with the range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): TableScopedCollection;'
      parameters:
        - id: fullyContained
          description: >-
            If true, returns only tables that are fully contained within the
            range bounds. The default value is false.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.TableScopedCollection:interface" />'
        description: ''
  - name: getUsedRange(valuesOnly)
    uid: 'excel!Excel.Range#getUsedRange:member(1)'
    package: excel!
    fullName: getUsedRange(valuesOnly)
    summary: >-
      Returns the used range of the given range object. If there are no used
      cells within the range, this function will throw an ItemNotFound error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getUsedRangeOrNullObject(valuesOnly)
    uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    package: excel!
    fullName: getUsedRangeOrNullObject(valuesOnly)
    summary: >-
      Returns the used range of the given range object. If there are no used
      cells within the range, this function will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              let usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  let chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          }
          ```
  - name: getVisibleView()
    uid: 'excel!Excel.Range#getVisibleView:member(1)'
    package: excel!
    fullName: getVisibleView()
    summary: Represents the visible rows of the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type: '<xref uid="excel!Excel.RangeView:interface" />'
        description: ''
  - name: group(groupOption)
    uid: 'excel!Excel.Range#group:member(1)'
    package: excel!
    fullName: group(groupOption)
    summary: Groups columns and rows for an outline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'group(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      parameters:
        - id: groupOption
          description: >-
            Specifies how the range can be grouped by rows or columns. An
            `InvalidArgument` error is thrown when the group option differs from
            the range's `isEntireRow` or `isEntireColumn` property (i.e.,
            `range.isEntireRow` is true and `groupOption` is "ByColumns" or
            `range.isEntireColumn` is true and `groupOption` is "ByRows").
          type: '<xref uid="excel!Excel.GroupOption:enum" /> | "ByRows" | "ByColumns"'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          }
          ```
  - name: hideGroupDetails(groupOption)
    uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    package: excel!
    fullName: hideGroupDetails(groupOption)
    summary: Hide details of the row or column group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        hideGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      parameters:
        - id: groupOption
          description: >-
            Specifies whether to hide details of grouped rows or grouped
            columns.
          type: |-
            <xref uid="excel!Excel.GroupOption:enum" /> | "ByRows" | "ByColumns"
                    
      return:
        type: void
        description: ''
  - name: insert(shift)
    uid: 'excel!Excel.Range#insert:member(1)'
    package: excel!
    fullName: insert(shift)
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this
      range, and shifts the other cells to make space. Returns a new Range
      object at the now blank space.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shift: InsertShiftDirection | "Down" | "Right"): Range;'
      parameters:
        - id: shift
          description: >-
            Specifies which way to shift the cells. See
            Excel.InsertShiftDirection for details.
          type: >-
            <xref uid="excel!Excel.InsertShiftDirection:enum" /> | "Down" |
            "Right"
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.Range#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: merge(across)
    uid: 'excel!Excel.Range#merge:member(1)'
    package: excel!
    fullName: merge(across)
    summary: Merge the range cells into one region in the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'merge(across?: boolean): void;'
      parameters:
        - id: across
          description: >-
            Optional. Set true to merge cells in each row of the specified range
            as separate merged cells. The default value is false.
          type: boolean
      return:
        type: void
        description: ''
  - name: moveTo(destinationRange)
    uid: 'excel!Excel.Range#moveTo:member(1)'
    package: excel!
    fullName: moveTo(destinationRange)
    summary: >-
      Moves cell values, formatting, and formulas from current range to the
      destination range, replacing the old information in those cells. The
      destination range will be expanded automatically if it is smaller than the
      current range. Any cells in the destination range that are outside of the
      original range's area are not changed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      parameters:
        - id: destinationRange
          description: >-
            destinationRange Specifies the range to where the information in
            this range will be moved.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: void
        description: ''
  - name: 'removeDuplicates(columns, includesHeader)'
    uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    package: excel!
    fullName: 'removeDuplicates(columns, includesHeader)'
    summary: Removes duplicate values from the range specified by the columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      parameters:
        - id: columns
          description: >-
            The columns inside the range that may contain duplicates. At least
            one column needs to be specified. Zero-indexed.
          type: 'number[]'
        - id: includesHeader
          description: True if the input data contains header. Default is false.
          type: boolean
      return:
        type: '<xref uid="excel!Excel.RemoveDuplicatesResult:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:D11");

              let deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          }
          ```
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'excel!Excel.Range#replaceAll:member(1)'
    package: excel!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: >-
      Finds and replaces the given string based on the criteria specified within
      the current range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      parameters:
        - id: text
          description: String to find.
          type: string
        - id: replacement
          description: String to replace the original with.
          type: string
        - id: criteria
          description: Additional Replace Criteria.
          type: '<xref uid="excel!Excel.ReplaceCriteria:interface" />'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: select()
    uid: 'excel!Excel.Range#select:member(1)'
    package: excel!
    fullName: select()
    summary: Selects the specified range in the Excel UI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(): void;'
      return:
        type: void
        description: ''
  - name: setDirty()
    uid: 'excel!Excel.Range#setDirty:member(1)'
    package: excel!
    fullName: setDirty()
    summary: Set a range to be recalculated when the next recalculation occurs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: showCard()
    uid: 'excel!Excel.Range#showCard:member(1)'
    package: excel!
    fullName: showCard()
    summary: Displays the card for an active cell if it has rich value content.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showCard(): void;'
      return:
        type: void
        description: ''
  - name: showGroupDetails(groupOption)
    uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    package: excel!
    fullName: showGroupDetails(groupOption)
    summary: Show details of the row or column group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        showGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      parameters:
        - id: groupOption
          description: >-
            Specifies whether to show details of grouped rows or grouped
            columns.
          type: |-
            <xref uid="excel!Excel.GroupOption:enum" /> | "ByRows" | "ByColumns"
                    
      return:
        type: void
        description: ''
  - name: ungroup(groupOption)
    uid: 'excel!Excel.Range#ungroup:member(1)'
    package: excel!
    fullName: ungroup(groupOption)
    summary: Ungroups columns and rows for an outline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ungroup(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      parameters:
        - id: groupOption
          description: Specifies how the range can be ungrouped by rows or columns.
          type: '<xref uid="excel!Excel.GroupOption:enum" /> | "ByRows" | "ByColumns"'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          }
          ```
  - name: unmerge()
    uid: 'excel!Excel.Range#unmerge:member(1)'
    package: excel!
    fullName: unmerge()
    summary: Unmerge the range cells into separate cells.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unmerge(): void;'
      return:
        type: void
        description: ''
