### YamlMime:TSType
name: Excel.ConditionalFormatRule
uid: 'excel!Excel.ConditionalFormatRule:interface'
package: excel!
fullName: Excel.ConditionalFormatRule
summary: 'Represents a rule, for all traditional rule/format pairings.'
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: formula
    uid: 'excel!Excel.ConditionalFormatRule#formula:member'
    package: excel!
    fullName: formula
    summary: 'The formula, if required, to evaluate the conditional format rule on.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formula: string;'
      return:
        type: string
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          }
          ```
  - name: formulaLocal
    uid: 'excel!Excel.ConditionalFormatRule#formulaLocal:member'
    package: excel!
    fullName: formulaLocal
    summary: >-
      The formula, if required, to evaluate the conditional format rule on in
      the user's language.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formulaLocal: string;'
      return:
        type: string
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.ConditionalFormatRule#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
