### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.PageLayout:interface'
    summary: >-
      Represents layout and print settings that are not dependent any printer-specific implementation. These settings
      include margins, orientation, page numbering, title rows, and print area.
    name: Excel.PageLayout
    fullName: Excel.PageLayout
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.PageLayout#blackAndWhite:member'
      - 'excel!Excel.PageLayout#bottomMargin:member'
      - 'excel!Excel.PageLayout#centerHorizontally:member'
      - 'excel!Excel.PageLayout#centerVertically:member'
      - 'excel!Excel.PageLayout#draftMode:member'
      - 'excel!Excel.PageLayout#firstPageNumber:member'
      - 'excel!Excel.PageLayout#footerMargin:member'
      - 'excel!Excel.PageLayout#getPrintArea:member(1)'
      - 'excel!Excel.PageLayout#getPrintAreaOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleColumns:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleColumnsOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleRows:member(1)'
      - 'excel!Excel.PageLayout#getPrintTitleRowsOrNullObject:member(1)'
      - 'excel!Excel.PageLayout#headerMargin:member'
      - 'excel!Excel.PageLayout#headersFooters:member'
      - 'excel!Excel.PageLayout#leftMargin:member'
      - 'excel!Excel.PageLayout#load:member(1)'
      - 'excel!Excel.PageLayout#orientation:member'
      - 'excel!Excel.PageLayout#paperSize:member'
      - 'excel!Excel.PageLayout#printComments:member'
      - 'excel!Excel.PageLayout#printErrors:member'
      - 'excel!Excel.PageLayout#printGridlines:member'
      - 'excel!Excel.PageLayout#printHeadings:member'
      - 'excel!Excel.PageLayout#printOrder:member'
      - 'excel!Excel.PageLayout#rightMargin:member'
      - 'excel!Excel.PageLayout#setPrintArea:member(1)'
      - 'excel!Excel.PageLayout#setPrintMargins:member(1)'
      - 'excel!Excel.PageLayout#setPrintTitleColumns:member(1)'
      - 'excel!Excel.PageLayout#setPrintTitleRows:member(1)'
      - 'excel!Excel.PageLayout#topMargin:member'
      - 'excel!Excel.PageLayout#zoom:member'
  - uid: 'excel!Excel.PageLayout#blackAndWhite:member'
    summary: The worksheet's black and white print option.
    name: blackAndWhite
    fullName: blackAndWhite
    langs:
      - typeScript
    type: property
    syntax:
      content: 'blackAndWhite: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#bottomMargin:member'
    summary: The worksheet's bottom page margin to use for printing in points.
    name: bottomMargin
    fullName: bottomMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bottomMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#centerHorizontally:member'
    summary: >-
      The worksheet's center horizontally flag. This flag determines whether the worksheet will be centered horizontally
      when it's printed.
    name: centerHorizontally
    fullName: centerHorizontally
    langs:
      - typeScript
    type: property
    syntax:
      content: 'centerHorizontally: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#centerVertically:member'
    summary: >-
      The worksheet's center vertically flag. This flag determines whether the worksheet will be centered vertically
      when it's printed.
    name: centerVertically
    fullName: centerVertically
    langs:
      - typeScript
    type: property
    syntax:
      content: 'centerVertically: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#draftMode:member'
    summary: The worksheet's draft mode option. If true the sheet will be printed without graphics.
    name: draftMode
    fullName: draftMode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'draftMode: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#firstPageNumber:member'
    summary: The worksheet's first page number to print. Null value represents "auto" page numbering.
    name: firstPageNumber
    fullName: firstPageNumber
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstPageNumber: number | "";'
      return:
        type:
          - number | ""
  - uid: 'excel!Excel.PageLayout#footerMargin:member'
    summary: 'The worksheet''s footer margin, in points, for use when printing.'
    name: footerMargin
    fullName: footerMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'footerMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#getPrintArea:member(1)'
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges, that represents the print area for the
      worksheet. If there is no print area, an ItemNotFound error will be thrown.
    name: getPrintArea()
    fullName: getPrintArea()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintArea(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintAreaOrNullObject:member(1)'
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges, that represents the print area for the
      worksheet. If there is no print area, a null object will be returned.
    name: getPrintAreaOrNullObject()
    fullName: getPrintAreaOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintAreaOrNullObject(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleColumns:member(1)'
    summary: Gets the range object representing the title columns.
    name: getPrintTitleColumns()
    fullName: getPrintTitleColumns()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleColumns(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleColumnsOrNullObject:member(1)'
    summary: 'Gets the range object representing the title columns. If not set, this will return a null object.'
    name: getPrintTitleColumnsOrNullObject()
    fullName: getPrintTitleColumnsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleColumnsOrNullObject(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleRows:member(1)'
    summary: Gets the range object representing the title rows.
    name: getPrintTitleRows()
    fullName: getPrintTitleRows()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleRows(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#getPrintTitleRowsOrNullObject:member(1)'
    summary: 'Gets the range object representing the title rows. If not set, this will return a null object.'
    name: getPrintTitleRowsOrNullObject()
    fullName: getPrintTitleRowsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrintTitleRowsOrNullObject(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.PageLayout#headerMargin:member'
    summary: 'The worksheet''s header margin, in points, for use when printing.'
    name: headerMargin
    fullName: headerMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headerMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#headersFooters:member'
    summary: Header and footer configuration for the worksheet.
    name: headersFooters
    fullName: headersFooters
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly headersFooters: HeaderFooterGroup;'
      return:
        type:
          - 'excel!Excel.HeaderFooterGroup:interface'
  - uid: 'excel!Excel.PageLayout#leftMargin:member'
    summary: 'The worksheet''s left margin, in points, for use when printing.'
    name: leftMargin
    fullName: leftMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.PageLayout#orientation:member'
    summary: The worksheet's orientation of the page.
    name: orientation
    fullName: orientation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'orientation: PageOrientation | "Portrait" | "Landscape";'
      return:
        type:
          - 'excel!Excel.PageLayout#orientation~0:complex'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.PageLayout#paperSize:member'
    summary: The worksheet's paper size of the page.
    name: paperSize
    fullName: paperSize
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        paperSize:
                    | PaperType
                    | "Letter"
                    | "LetterSmall"
                    | "Tabloid"
                    | "Ledger"
                    | "Legal"
                    | "Statement"
                    | "Executive"
                    | "A3"
                    | "A4"
                    | "A4Small"
                    | "A5"
                    | "B4"
                    | "B5"
                    | "Folio"
                    | "Quatro"
                    | "Paper10x14"
                    | "Paper11x17"
                    | "Note"
                    | "Envelope9"
                    | "Envelope10"
                    | "Envelope11"
                    | "Envelope12"
                    | "Envelope14"
                    | "Csheet"
                    | "Dsheet"
                    | "Esheet"
                    | "EnvelopeDL"
                    | "EnvelopeC5"
                    | "EnvelopeC3"
                    | "EnvelopeC4"
                    | "EnvelopeC6"
                    | "EnvelopeC65"
                    | "EnvelopeB4"
                    | "EnvelopeB5"
                    | "EnvelopeB6"
                    | "EnvelopeItaly"
                    | "EnvelopeMonarch"
                    | "EnvelopePersonal"
                    | "FanfoldUS"
                    | "FanfoldStdGerman"
                    | "FanfoldLegalGerman";
      return:
        type:
          - 'excel!Excel.PageLayout#paperSize~0:complex'
  - uid: 'excel!Excel.PageLayout#printComments:member'
    summary: Specifies if the worksheet's comments should be displayed when printing.
    name: printComments
    fullName: printComments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printComments: PrintComments | "NoComments" | "EndSheet" | "InPlace";'
      return:
        type:
          - 'excel!Excel.PageLayout#printComments~0:complex'
  - uid: 'excel!Excel.PageLayout#printErrors:member'
    summary: The worksheet's print errors option.
    name: printErrors
    fullName: printErrors
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        printErrors:
                    | PrintErrorType
                    | "AsDisplayed"
                    | "Blank"
                    | "Dash"
                    | "NotAvailable";
      return:
        type:
          - 'excel!Excel.PageLayout#printErrors~0:complex'
  - uid: 'excel!Excel.PageLayout#printGridlines:member'
    summary: Specifies if the worksheet's gridlines will be printed.
    name: printGridlines
    fullName: printGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printGridlines: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#printHeadings:member'
    summary: Specifies if the worksheet's headings will be printed.
    name: printHeadings
    fullName: printHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.PageLayout#printOrder:member'
    summary: The worksheet's page print order option. This specifies the order to use for processing the page number printed.
    name: printOrder
    fullName: printOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'printOrder: PrintOrder | "DownThenOver" | "OverThenDown";'
      return:
        type:
          - 'excel!Excel.PageLayout#printOrder~0:complex'
  - uid: 'excel!Excel.PageLayout#rightMargin:member'
    summary: 'The worksheet''s right margin, in points, for use when printing.'
    name: rightMargin
    fullName: rightMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#setPrintArea:member(1)'
    summary: Sets the worksheet's print area.
    name: setPrintArea(printArea)
    fullName: setPrintArea(printArea)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintArea(printArea: Range | RangeAreas | string): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintArea("A1:D41");
              await context.sync();
          }
          ```
      parameters:
        - id: printArea
          description: 'The range, or RangeAreas of the content to print.'
          type:
            - 'excel!Excel.PageLayout#setPrintArea~0:complex'
  - uid: 'excel!Excel.PageLayout#setPrintMargins:member(1)'
    summary: Sets the worksheet's page margins with units.
    name: 'setPrintMargins(unit, marginOptions)'
    fullName: 'setPrintMargins(unit, marginOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        setPrintMargins(
                    unit: PrintMarginUnit | "Points" | "Inches" | "Centimeters",
                    marginOptions: PageLayoutMarginOptions
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: unit
          description: Measurement unit for the margins provided.
          type:
            - 'excel!Excel.PageLayout#setPrintMargins~0:complex'
        - id: marginOptions
          description: 'Margin values to set, margins not provided will remain unchanged.'
          type:
            - 'excel!Excel.PageLayoutMarginOptions:interface'
  - uid: 'excel!Excel.PageLayout#setPrintTitleColumns:member(1)'
    summary: Sets the columns that contain the cells to be repeated at the left of each page of the worksheet for printing.
    name: setPrintTitleColumns(printTitleColumns)
    fullName: setPrintTitleColumns(printTitleColumns)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintTitleColumns(printTitleColumns: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: printTitleColumns
          description: 'The columns to be repeated to the left of each page, range must span the entire column to be valid.'
          type:
            - 'excel!Excel.PageLayout#setPrintTitleColumns~0:complex'
  - uid: 'excel!Excel.PageLayout#setPrintTitleRows:member(1)'
    summary: Sets the rows that contain the cells to be repeated at the top of each page of the worksheet for printing.
    name: setPrintTitleRows(printTitleRows)
    fullName: setPrintTitleRows(printTitleRows)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPrintTitleRows(printTitleRows: Range | string): void;'
      return:
        type:
          - void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintTitleRows("$1:$1");
              await context.sync();
          }
          ```
      parameters:
        - id: printTitleRows
          description: 'The rows to be repeated at the top of each page, range must span the entire row to be valid.'
          type:
            - 'excel!Excel.PageLayout#setPrintTitleRows~0:complex'
  - uid: 'excel!Excel.PageLayout#topMargin:member'
    summary: 'The worksheet''s top margin, in points, for use when printing.'
    name: topMargin
    fullName: topMargin
    langs:
      - typeScript
    type: property
    syntax:
      content: 'topMargin: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.PageLayout#zoom:member'
    summary: >-
      The worksheet's print zoom options. The `PageLayoutZoomOptions` object must be set as a JSON object (use `x.zoom =
      {...}` instead of `x.zoom.scale = ...`<!-- -->).
    name: zoom
    fullName: zoom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'zoom: PageLayoutZoomOptions;'
      return:
        type:
          - 'excel!Excel.PageLayoutZoomOptions:interface'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.zoom = { scale: 200 };
              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.HeaderFooterGroup:interface'
    name: HeaderFooterGroup
    fullName: Excel.HeaderFooterGroup
  - uid: 'excel!Excel.PageLayout#orientation~0:complex'
    name: PageOrientation | "Portrait" | "Landscape"
    fullName: Excel.PageOrientation | "Portrait" | "Landscape"
    spec.typeScript:
      - uid: 'excel!Excel.PageOrientation:enum'
        name: PageOrientation
        fullName: Excel.PageOrientation
      - name: ' | "Portrait" | "Landscape"'
        fullName: ' | "Portrait" | "Landscape"'
  - uid: 'excel!Excel.PageLayout#paperSize~0:complex'
    name: |-
      | PaperType
                  | "Letter"
                  | "LetterSmall"
                  | "Tabloid"
                  | "Ledger"
                  | "Legal"
                  | "Statement"
                  | "Executive"
                  | "A3"
                  | "A4"
                  | "A4Small"
                  | "A5"
                  | "B4"
                  | "B5"
                  | "Folio"
                  | "Quatro"
                  | "Paper10x14"
                  | "Paper11x17"
                  | "Note"
                  | "Envelope9"
                  | "Envelope10"
                  | "Envelope11"
                  | "Envelope12"
                  | "Envelope14"
                  | "Csheet"
                  | "Dsheet"
                  | "Esheet"
                  | "EnvelopeDL"
                  | "EnvelopeC5"
                  | "EnvelopeC3"
                  | "EnvelopeC4"
                  | "EnvelopeC6"
                  | "EnvelopeC65"
                  | "EnvelopeB4"
                  | "EnvelopeB5"
                  | "EnvelopeB6"
                  | "EnvelopeItaly"
                  | "EnvelopeMonarch"
                  | "EnvelopePersonal"
                  | "FanfoldUS"
                  | "FanfoldStdGerman"
                  | "FanfoldLegalGerman"
    fullName: |-
      | Excel.PaperType
                  | "Letter"
                  | "LetterSmall"
                  | "Tabloid"
                  | "Ledger"
                  | "Legal"
                  | "Statement"
                  | "Executive"
                  | "A3"
                  | "A4"
                  | "A4Small"
                  | "A5"
                  | "B4"
                  | "B5"
                  | "Folio"
                  | "Quatro"
                  | "Paper10x14"
                  | "Paper11x17"
                  | "Note"
                  | "Envelope9"
                  | "Envelope10"
                  | "Envelope11"
                  | "Envelope12"
                  | "Envelope14"
                  | "Csheet"
                  | "Dsheet"
                  | "Esheet"
                  | "EnvelopeDL"
                  | "EnvelopeC5"
                  | "EnvelopeC3"
                  | "EnvelopeC4"
                  | "EnvelopeC6"
                  | "EnvelopeC65"
                  | "EnvelopeB4"
                  | "EnvelopeB5"
                  | "EnvelopeB6"
                  | "EnvelopeItaly"
                  | "EnvelopeMonarch"
                  | "EnvelopePersonal"
                  | "FanfoldUS"
                  | "FanfoldStdGerman"
                  | "FanfoldLegalGerman"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.PaperType:enum'
        name: PaperType
        fullName: Excel.PaperType
      - name: |2-

                      | "Letter"
                      | "LetterSmall"
                      | "Tabloid"
                      | "Ledger"
                      | "Legal"
                      | "Statement"
                      | "Executive"
                      | "A3"
                      | "A4"
                      | "A4Small"
                      | "A5"
                      | "B4"
                      | "B5"
                      | "Folio"
                      | "Quatro"
                      | "Paper10x14"
                      | "Paper11x17"
                      | "Note"
                      | "Envelope9"
                      | "Envelope10"
                      | "Envelope11"
                      | "Envelope12"
                      | "Envelope14"
                      | "Csheet"
                      | "Dsheet"
                      | "Esheet"
                      | "EnvelopeDL"
                      | "EnvelopeC5"
                      | "EnvelopeC3"
                      | "EnvelopeC4"
                      | "EnvelopeC6"
                      | "EnvelopeC65"
                      | "EnvelopeB4"
                      | "EnvelopeB5"
                      | "EnvelopeB6"
                      | "EnvelopeItaly"
                      | "EnvelopeMonarch"
                      | "EnvelopePersonal"
                      | "FanfoldUS"
                      | "FanfoldStdGerman"
                      | "FanfoldLegalGerman"
        fullName: |2-

                      | "Letter"
                      | "LetterSmall"
                      | "Tabloid"
                      | "Ledger"
                      | "Legal"
                      | "Statement"
                      | "Executive"
                      | "A3"
                      | "A4"
                      | "A4Small"
                      | "A5"
                      | "B4"
                      | "B5"
                      | "Folio"
                      | "Quatro"
                      | "Paper10x14"
                      | "Paper11x17"
                      | "Note"
                      | "Envelope9"
                      | "Envelope10"
                      | "Envelope11"
                      | "Envelope12"
                      | "Envelope14"
                      | "Csheet"
                      | "Dsheet"
                      | "Esheet"
                      | "EnvelopeDL"
                      | "EnvelopeC5"
                      | "EnvelopeC3"
                      | "EnvelopeC4"
                      | "EnvelopeC6"
                      | "EnvelopeC65"
                      | "EnvelopeB4"
                      | "EnvelopeB5"
                      | "EnvelopeB6"
                      | "EnvelopeItaly"
                      | "EnvelopeMonarch"
                      | "EnvelopePersonal"
                      | "FanfoldUS"
                      | "FanfoldStdGerman"
                      | "FanfoldLegalGerman"
  - uid: 'excel!Excel.PageLayout#printComments~0:complex'
    name: PrintComments | "NoComments" | "EndSheet" | "InPlace"
    fullName: Excel.PrintComments | "NoComments" | "EndSheet" | "InPlace"
    spec.typeScript:
      - uid: 'excel!Excel.PrintComments:enum'
        name: PrintComments
        fullName: Excel.PrintComments
      - name: ' | "NoComments" | "EndSheet" | "InPlace"'
        fullName: ' | "NoComments" | "EndSheet" | "InPlace"'
  - uid: 'excel!Excel.PageLayout#printErrors~0:complex'
    name: |-
      | PrintErrorType
                  | "AsDisplayed"
                  | "Blank"
                  | "Dash"
                  | "NotAvailable"
    fullName: |-
      | Excel.PrintErrorType
                  | "AsDisplayed"
                  | "Blank"
                  | "Dash"
                  | "NotAvailable"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.PrintErrorType:enum'
        name: PrintErrorType
        fullName: Excel.PrintErrorType
      - name: |2-

                      | "AsDisplayed"
                      | "Blank"
                      | "Dash"
                      | "NotAvailable"
        fullName: |2-

                      | "AsDisplayed"
                      | "Blank"
                      | "Dash"
                      | "NotAvailable"
  - uid: 'excel!Excel.PageLayout#printOrder~0:complex'
    name: PrintOrder | "DownThenOver" | "OverThenDown"
    fullName: Excel.PrintOrder | "DownThenOver" | "OverThenDown"
    spec.typeScript:
      - uid: 'excel!Excel.PrintOrder:enum'
        name: PrintOrder
        fullName: Excel.PrintOrder
      - name: ' | "DownThenOver" | "OverThenDown"'
        fullName: ' | "DownThenOver" | "OverThenDown"'
  - uid: 'excel!Excel.PageLayout#setPrintArea~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PageLayout#setPrintMargins~0:complex'
    name: PrintMarginUnit | "Points" | "Inches" | "Centimeters"
    fullName: Excel.PrintMarginUnit | "Points" | "Inches" | "Centimeters"
    spec.typeScript:
      - uid: 'excel!Excel.PrintMarginUnit:enum'
        name: PrintMarginUnit
        fullName: Excel.PrintMarginUnit
      - name: ' | "Points" | "Inches" | "Centimeters"'
        fullName: ' | "Points" | "Inches" | "Centimeters"'
  - uid: 'excel!Excel.PageLayoutMarginOptions:interface'
    name: PageLayoutMarginOptions
    fullName: Excel.PageLayoutMarginOptions
  - uid: 'excel!Excel.PageLayout#setPrintTitleColumns~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PageLayout#setPrintTitleRows~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PageLayoutZoomOptions:interface'
    name: PageLayoutZoomOptions
    fullName: Excel.PageLayoutZoomOptions
