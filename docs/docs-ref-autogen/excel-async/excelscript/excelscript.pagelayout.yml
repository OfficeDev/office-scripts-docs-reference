### YamlMime:TSType
name: Excel.PageLayout
uid: 'excel!Excel.PageLayout:interface'
package: excel!
fullName: Excel.PageLayout
summary: >-
  Represents layout and print settings that are not dependent any
  printer-specific implementation. These settings include margins, orientation,
  page numbering, title rows, and print area.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: blackAndWhite
    uid: 'excel!Excel.PageLayout#blackAndWhite:member'
    package: excel!
    fullName: blackAndWhite
    summary: The worksheet's black and white print option.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'blackAndWhite: boolean;'
      return:
        type: boolean
  - name: bottomMargin
    uid: 'excel!Excel.PageLayout#bottomMargin:member'
    package: excel!
    fullName: bottomMargin
    summary: The worksheet's bottom page margin to use for printing in points.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'bottomMargin: number;'
      return:
        type: number
  - name: centerHorizontally
    uid: 'excel!Excel.PageLayout#centerHorizontally:member'
    package: excel!
    fullName: centerHorizontally
    summary: >-
      The worksheet's center horizontally flag. This flag determines whether the
      worksheet will be centered horizontally when it's printed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'centerHorizontally: boolean;'
      return:
        type: boolean
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - name: centerVertically
    uid: 'excel!Excel.PageLayout#centerVertically:member'
    package: excel!
    fullName: centerVertically
    summary: >-
      The worksheet's center vertically flag. This flag determines whether the
      worksheet will be centered vertically when it's printed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'centerVertically: boolean;'
      return:
        type: boolean
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.centerHorizontally = true;
              farmSheet.pageLayout.centerVertically = true;
              await context.sync();
          }
          ```
  - name: draftMode
    uid: 'excel!Excel.PageLayout#draftMode:member'
    package: excel!
    fullName: draftMode
    summary: >-
      The worksheet's draft mode option. If true the sheet will be printed
      without graphics.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'draftMode: boolean;'
      return:
        type: boolean
  - name: firstPageNumber
    uid: 'excel!Excel.PageLayout#firstPageNumber:member'
    package: excel!
    fullName: firstPageNumber
    summary: >-
      The worksheet's first page number to print. Null value represents "auto"
      page numbering.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'firstPageNumber: number | "";'
      return:
        type: number | ""
  - name: footerMargin
    uid: 'excel!Excel.PageLayout#footerMargin:member'
    package: excel!
    fullName: footerMargin
    summary: 'The worksheet''s footer margin, in points, for use when printing.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'footerMargin: number;'
      return:
        type: number
  - name: headerMargin
    uid: 'excel!Excel.PageLayout#headerMargin:member'
    package: excel!
    fullName: headerMargin
    summary: 'The worksheet''s header margin, in points, for use when printing.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'headerMargin: number;'
      return:
        type: number
  - name: headersFooters
    uid: 'excel!Excel.PageLayout#headersFooters:member'
    package: excel!
    fullName: headersFooters
    summary: Header and footer configuration for the worksheet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly headersFooters: HeaderFooterGroup;'
      return:
        type: '<xref uid="excel!Excel.HeaderFooterGroup:interface" />'
  - name: leftMargin
    uid: 'excel!Excel.PageLayout#leftMargin:member'
    package: excel!
    fullName: leftMargin
    summary: 'The worksheet''s left margin, in points, for use when printing.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'leftMargin: number;'
      return:
        type: number
  - name: orientation
    uid: 'excel!Excel.PageLayout#orientation:member'
    package: excel!
    fullName: orientation
    summary: The worksheet's orientation of the page.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'orientation: PageOrientation | "Portrait" | "Landscape";'
      return:
        type: >-
          <xref uid="excel!Excel.PageOrientation:enum" /> | "Portrait" |
          "Landscape"
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.orientation = Excel.PageOrientation.landscape;
              await context.sync();
          }
          ```
  - name: paperSize
    uid: 'excel!Excel.PageLayout#paperSize:member'
    package: excel!
    fullName: paperSize
    summary: The worksheet's paper size of the page.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        paperSize:
                    | PaperType
                    | "Letter"
                    | "LetterSmall"
                    | "Tabloid"
                    | "Ledger"
                    | "Legal"
                    | "Statement"
                    | "Executive"
                    | "A3"
                    | "A4"
                    | "A4Small"
                    | "A5"
                    | "B4"
                    | "B5"
                    | "Folio"
                    | "Quatro"
                    | "Paper10x14"
                    | "Paper11x17"
                    | "Note"
                    | "Envelope9"
                    | "Envelope10"
                    | "Envelope11"
                    | "Envelope12"
                    | "Envelope14"
                    | "Csheet"
                    | "Dsheet"
                    | "Esheet"
                    | "EnvelopeDL"
                    | "EnvelopeC5"
                    | "EnvelopeC3"
                    | "EnvelopeC4"
                    | "EnvelopeC6"
                    | "EnvelopeC65"
                    | "EnvelopeB4"
                    | "EnvelopeB5"
                    | "EnvelopeB6"
                    | "EnvelopeItaly"
                    | "EnvelopeMonarch"
                    | "EnvelopePersonal"
                    | "FanfoldUS"
                    | "FanfoldStdGerman"
                    | "FanfoldLegalGerman";
      return:
        type: |-
          | <xref uid="excel!Excel.PaperType:enum" />
                      | "Letter"
                      | "LetterSmall"
                      | "Tabloid"
                      | "Ledger"
                      | "Legal"
                      | "Statement"
                      | "Executive"
                      | "A3"
                      | "A4"
                      | "A4Small"
                      | "A5"
                      | "B4"
                      | "B5"
                      | "Folio"
                      | "Quatro"
                      | "Paper10x14"
                      | "Paper11x17"
                      | "Note"
                      | "Envelope9"
                      | "Envelope10"
                      | "Envelope11"
                      | "Envelope12"
                      | "Envelope14"
                      | "Csheet"
                      | "Dsheet"
                      | "Esheet"
                      | "EnvelopeDL"
                      | "EnvelopeC5"
                      | "EnvelopeC3"
                      | "EnvelopeC4"
                      | "EnvelopeC6"
                      | "EnvelopeC65"
                      | "EnvelopeB4"
                      | "EnvelopeB5"
                      | "EnvelopeB6"
                      | "EnvelopeItaly"
                      | "EnvelopeMonarch"
                      | "EnvelopePersonal"
                      | "FanfoldUS"
                      | "FanfoldStdGerman"
                      | "FanfoldLegalGerman"
  - name: printComments
    uid: 'excel!Excel.PageLayout#printComments:member'
    package: excel!
    fullName: printComments
    summary: Specifies if the worksheet's comments should be displayed when printing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'printComments: PrintComments | "NoComments" | "EndSheet" | "InPlace";'
      return:
        type: >-
          <xref uid="excel!Excel.PrintComments:enum" /> | "NoComments" |
          "EndSheet" | "InPlace"
  - name: printErrors
    uid: 'excel!Excel.PageLayout#printErrors:member'
    package: excel!
    fullName: printErrors
    summary: The worksheet's print errors option.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        printErrors:
                    | PrintErrorType
                    | "AsDisplayed"
                    | "Blank"
                    | "Dash"
                    | "NotAvailable";
      return:
        type: |-
          | <xref uid="excel!Excel.PrintErrorType:enum" />
                      | "AsDisplayed"
                      | "Blank"
                      | "Dash"
                      | "NotAvailable"
  - name: printGridlines
    uid: 'excel!Excel.PageLayout#printGridlines:member'
    package: excel!
    fullName: printGridlines
    summary: Specifies if the worksheet's gridlines will be printed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'printGridlines: boolean;'
      return:
        type: boolean
  - name: printHeadings
    uid: 'excel!Excel.PageLayout#printHeadings:member'
    package: excel!
    fullName: printHeadings
    summary: Specifies if the worksheet's headings will be printed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'printHeadings: boolean;'
      return:
        type: boolean
  - name: printOrder
    uid: 'excel!Excel.PageLayout#printOrder:member'
    package: excel!
    fullName: printOrder
    summary: >-
      The worksheet's page print order option. This specifies the order to use
      for processing the page number printed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'printOrder: PrintOrder | "DownThenOver" | "OverThenDown";'
      return:
        type: >-
          <xref uid="excel!Excel.PrintOrder:enum" /> | "DownThenOver" |
          "OverThenDown"
  - name: rightMargin
    uid: 'excel!Excel.PageLayout#rightMargin:member'
    package: excel!
    fullName: rightMargin
    summary: 'The worksheet''s right margin, in points, for use when printing.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rightMargin: number;'
      return:
        type: number
  - name: topMargin
    uid: 'excel!Excel.PageLayout#topMargin:member'
    package: excel!
    fullName: topMargin
    summary: 'The worksheet''s top margin, in points, for use when printing.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'topMargin: number;'
      return:
        type: number
  - name: zoom
    uid: 'excel!Excel.PageLayout#zoom:member'
    package: excel!
    fullName: zoom
    summary: >-
      The worksheet's print zoom options. The `PageLayoutZoomOptions` object
      must be set as a JSON object (use `x.zoom = {...}` instead of
      `x.zoom.scale = ...`<!-- -->).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'zoom: PageLayoutZoomOptions;'
      return:
        type: '<xref uid="excel!Excel.PageLayoutZoomOptions:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.zoom = { scale: 200 };
              await context.sync();
          }
          ```
methods:
  - name: getPrintArea()
    uid: 'excel!Excel.PageLayout#getPrintArea:member(1)'
    package: excel!
    fullName: getPrintArea()
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges,
      that represents the print area for the worksheet. If there is no print
      area, an ItemNotFound error will be thrown.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintArea(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: getPrintAreaOrNullObject()
    uid: 'excel!Excel.PageLayout#getPrintAreaOrNullObject:member(1)'
    package: excel!
    fullName: getPrintAreaOrNullObject()
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges,
      that represents the print area for the worksheet. If there is no print
      area, a null object will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintAreaOrNullObject(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: getPrintTitleColumns()
    uid: 'excel!Excel.PageLayout#getPrintTitleColumns:member(1)'
    package: excel!
    fullName: getPrintTitleColumns()
    summary: Gets the range object representing the title columns.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintTitleColumns(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getPrintTitleColumnsOrNullObject()
    uid: 'excel!Excel.PageLayout#getPrintTitleColumnsOrNullObject:member(1)'
    package: excel!
    fullName: getPrintTitleColumnsOrNullObject()
    summary: >-
      Gets the range object representing the title columns. If not set, this
      will return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintTitleColumnsOrNullObject(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getPrintTitleRows()
    uid: 'excel!Excel.PageLayout#getPrintTitleRows:member(1)'
    package: excel!
    fullName: getPrintTitleRows()
    summary: Gets the range object representing the title rows.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintTitleRows(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getPrintTitleRowsOrNullObject()
    uid: 'excel!Excel.PageLayout#getPrintTitleRowsOrNullObject:member(1)'
    package: excel!
    fullName: getPrintTitleRowsOrNullObject()
    summary: >-
      Gets the range object representing the title rows. If not set, this will
      return a null object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPrintTitleRowsOrNullObject(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.PageLayout#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
  - name: setPrintArea(printArea)
    uid: 'excel!Excel.PageLayout#setPrintArea:member(1)'
    package: excel!
    fullName: setPrintArea(printArea)
    summary: Sets the worksheet's print area.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPrintArea(printArea: Range | RangeAreas | string): void;'
      parameters:
        - id: printArea
          description: 'The range, or RangeAreas of the content to print.'
          type: >-
            <xref uid="excel!Excel.Range:interface" /> | <xref
            uid="excel!Excel.RangeAreas:interface" /> | string
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintArea("A1:D41");
              await context.sync();
          }
          ```
  - name: 'setPrintMargins(unit, marginOptions)'
    uid: 'excel!Excel.PageLayout#setPrintMargins:member(1)'
    package: excel!
    fullName: 'setPrintMargins(unit, marginOptions)'
    summary: Sets the worksheet's page margins with units.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        setPrintMargins(
                    unit: PrintMarginUnit | "Points" | "Inches" | "Centimeters",
                    marginOptions: PageLayoutMarginOptions
                ): void;
      parameters:
        - id: unit
          description: Measurement unit for the margins provided.
          type: >-
            <xref uid="excel!Excel.PrintMarginUnit:enum" /> | "Points" |
            "Inches" | "Centimeters"
        - id: marginOptions
          description: 'Margin values to set, margins not provided will remain unchanged.'
          type: '<xref uid="excel!Excel.PageLayoutMarginOptions:interface" />'
      return:
        type: void
        description: ''
  - name: setPrintTitleColumns(printTitleColumns)
    uid: 'excel!Excel.PageLayout#setPrintTitleColumns:member(1)'
    package: excel!
    fullName: setPrintTitleColumns(printTitleColumns)
    summary: >-
      Sets the columns that contain the cells to be repeated at the left of each
      page of the worksheet for printing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPrintTitleColumns(printTitleColumns: Range | string): void;'
      parameters:
        - id: printTitleColumns
          description: >-
            The columns to be repeated to the left of each page, range must span
            the entire column to be valid.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: void
        description: ''
  - name: setPrintTitleRows(printTitleRows)
    uid: 'excel!Excel.PageLayout#setPrintTitleRows:member(1)'
    package: excel!
    fullName: setPrintTitleRows(printTitleRows)
    summary: >-
      Sets the rows that contain the cells to be repeated at the top of each
      page of the worksheet for printing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPrintTitleRows(printTitleRows: Range | string): void;'
      parameters:
        - id: printTitleRows
          description: >-
            The rows to be repeated at the top of each page, range must span the
            entire row to be valid.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: void
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let farmSheet = context.workbook.worksheets.getItem("Print");
              farmSheet.pageLayout.setPrintTitleRows("$1:$1");
              await context.sync();
          }
          ```
