### YamlMime:TSType
name: Excel.DataBarConditionalFormat
uid: 'excel!Excel.DataBarConditionalFormat:interface'
package: excel!
fullName: Excel.DataBarConditionalFormat
summary: Represents an Excel Conditional Data Bar Type.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: axisColor
    uid: 'excel!Excel.DataBarConditionalFormat#axisColor:member'
    package: excel!
    fullName: axisColor
    summary: >-
      HTML color code representing the color of the Axis line, of the form
      \#RRGGBB (e.g., "FFA500") or as a named HTML color (e.g., "orange"). ""
      (empty string) if no axis is present or set.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'axisColor: string;'
      return:
        type: string
  - name: axisFormat
    uid: 'excel!Excel.DataBarConditionalFormat#axisFormat:member'
    package: excel!
    fullName: axisFormat
    summary: Representation of how the axis is determined for an Excel data bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        axisFormat:
                    | ConditionalDataBarAxisFormat
                    | "Automatic"
                    | "None"
                    | "CellMidPoint";
      return:
        type: |-
          | <xref uid="excel!Excel.ConditionalDataBarAxisFormat:enum" />
                      | "Automatic"
                      | "None"
                      | "CellMidPoint"
  - name: barDirection
    uid: 'excel!Excel.DataBarConditionalFormat#barDirection:member'
    package: excel!
    fullName: barDirection
    summary: Specifies the direction that the data bar graphic should be based on.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        barDirection:
                    | ConditionalDataBarDirection
                    | "Context"
                    | "LeftToRight"
                    | "RightToLeft";
      return:
        type: |-
          | <xref uid="excel!Excel.ConditionalDataBarDirection:enum" />
                      | "Context"
                      | "LeftToRight"
                      | "RightToLeft"
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          }
          ```
  - name: lowerBoundRule
    uid: 'excel!Excel.DataBarConditionalFormat#lowerBoundRule:member'
    package: excel!
    fullName: lowerBoundRule
    summary: >-
      The rule for what consistutes the lower bound (and how to calculate it, if
      applicable) for a data bar. The `ConditionalDataBarRule` object must be
      set as a JSON object (use `x.lowerBoundRule = {...}` instead of
      `x.lowerBoundRule.formula = ...`<!-- -->).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lowerBoundRule: ConditionalDataBarRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarRule:interface" />'
  - name: negativeFormat
    uid: 'excel!Excel.DataBarConditionalFormat#negativeFormat:member'
    package: excel!
    fullName: negativeFormat
    summary: Representation of all values to the left of the axis in an Excel data bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly negativeFormat: ConditionalDataBarNegativeFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarNegativeFormat:interface" />'
  - name: positiveFormat
    uid: 'excel!Excel.DataBarConditionalFormat#positiveFormat:member'
    package: excel!
    fullName: positiveFormat
    summary: >-
      Representation of all values to the right of the axis in an Excel data
      bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly positiveFormat: ConditionalDataBarPositiveFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarPositiveFormat:interface" />'
  - name: showDataBarOnly
    uid: 'excel!Excel.DataBarConditionalFormat#showDataBarOnly:member'
    package: excel!
    fullName: showDataBarOnly
    summary: 'If true, hides the values from the cells where the data bar is applied.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showDataBarOnly: boolean;'
      return:
        type: boolean
  - name: upperBoundRule
    uid: 'excel!Excel.DataBarConditionalFormat#upperBoundRule:member'
    package: excel!
    fullName: upperBoundRule
    summary: >-
      The rule for what constitutes the upper bound (and how to calculate it, if
      applicable) for a data bar. The `ConditionalDataBarRule` object must be
      set as a JSON object (use `x.upperBoundRule = {...}` instead of
      `x.upperBoundRule.formula = ...`<!-- -->).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'upperBoundRule: ConditionalDataBarRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalDataBarRule:interface" />'
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.DataBarConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
