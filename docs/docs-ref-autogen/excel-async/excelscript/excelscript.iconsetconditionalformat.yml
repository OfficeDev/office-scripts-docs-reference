### YamlMime:TSType
name: Excel.IconSetConditionalFormat
uid: 'excel!Excel.IconSetConditionalFormat:interface'
package: excel!
fullName: Excel.IconSetConditionalFormat
summary: Represents an IconSet criteria for conditional formatting.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: criteria
    uid: 'excel!Excel.IconSetConditionalFormat#criteria:member'
    package: excel!
    fullName: criteria
    summary: >-
      An array of Criteria and IconSets for the rules and potential custom icons
      for conditional icons. Note that for the first criterion only the custom
      icon can be modified, while type, formula, and operator will be ignored
      when set.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'criteria: ConditionalIconCriterion[];'
      return:
        type: '<xref uid="excel!Excel.ConditionalIconCriterion:interface" />[]'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
  - name: reverseIconOrder
    uid: 'excel!Excel.IconSetConditionalFormat#reverseIconOrder:member'
    package: excel!
    fullName: reverseIconOrder
    summary: >-
      If true, reverses the icon orders for the IconSet. Note that this cannot
      be set if custom icons are used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'reverseIconOrder: boolean;'
      return:
        type: boolean
  - name: showIconOnly
    uid: 'excel!Excel.IconSetConditionalFormat#showIconOnly:member'
    package: excel!
    fullName: showIconOnly
    summary: 'If true, hides the values and only shows icons.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showIconOnly: boolean;'
      return:
        type: boolean
  - name: style
    uid: 'excel!Excel.IconSetConditionalFormat#style:member'
    package: excel!
    fullName: style
    summary: 'If set, displays the IconSet option for the conditional format.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        style:
                    | IconSet
                    | "Invalid"
                    | "ThreeArrows"
                    | "ThreeArrowsGray"
                    | "ThreeFlags"
                    | "ThreeTrafficLights1"
                    | "ThreeTrafficLights2"
                    | "ThreeSigns"
                    | "ThreeSymbols"
                    | "ThreeSymbols2"
                    | "FourArrows"
                    | "FourArrowsGray"
                    | "FourRedToBlack"
                    | "FourRating"
                    | "FourTrafficLights"
                    | "FiveArrows"
                    | "FiveArrowsGray"
                    | "FiveRating"
                    | "FiveQuarters"
                    | "ThreeStars"
                    | "ThreeTriangles"
                    | "FiveBoxes";
      return:
        type: |-
          | <xref uid="excel!Excel.IconSet:enum" />
                      | "Invalid"
                      | "ThreeArrows"
                      | "ThreeArrowsGray"
                      | "ThreeFlags"
                      | "ThreeTrafficLights1"
                      | "ThreeTrafficLights2"
                      | "ThreeSigns"
                      | "ThreeSymbols"
                      | "ThreeSymbols2"
                      | "FourArrows"
                      | "FourArrowsGray"
                      | "FourRedToBlack"
                      | "FourRating"
                      | "FourTrafficLights"
                      | "FiveArrows"
                      | "FiveArrowsGray"
                      | "FiveRating"
                      | "FiveQuarters"
                      | "ThreeStars"
                      | "ThreeTriangles"
                      | "FiveBoxes"
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.IconSetConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
