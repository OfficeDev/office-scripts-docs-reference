### YamlMime:TSType
name: Excel.CommentCollection
uid: 'excel!Excel.CommentCollection:interface'
package: excel!
fullName: Excel.CommentCollection
summary: Represents a collection of comment objects that are part of the workbook.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'add(cellAddress, content, contentType)'
    uid: 'excel!Excel.CommentCollection#add:member(1)'
    package: excel!
    fullName: 'add(cellAddress, content, contentType)'
    summary: >-
      Creates a new comment with the given content on the given cell. An
      `InvalidArgument` error is thrown if the provided range is larger than one
      cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        add(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType | "Plain" | "Mention"
                ): Comment;
      parameters:
        - id: cellAddress
          description: >-
            The cell to which the comment is added. This can be a Range object
            or a string. If it's a string, it must contain the full address,
            including the sheet name. An `InvalidArgument` error is thrown if
            the provided range is larger than one cell.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
        - id: content
          description: >-
            The comment's content. This can be either a string or
            CommentRichContent object. Strings are used for plain text.
            CommentRichContent objects allow for other comment features, such as
            mentions.
          type: '<xref uid="excel!Excel.CommentRichContent:interface" /> | string'
        - id: contentType
          description: >-
            Optional. The type of content contained within the comment. The
            default value is enum `ContentType.Plain`<!-- -->.
          type: |-
            <xref uid="excel!Excel.ContentType:enum" /> | "Plain" | "Mention"
                    
      return:
        type: '<xref uid="excel!Excel.Comment:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Comments");

              // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
              sheet.comments.add("A2", "TODO: add data.");
              await context.sync();
          }
          ```
  - name: getCount()
    uid: 'excel!Excel.CommentCollection#getCount:member(1)'
    package: excel!
    fullName: getCount()
    summary: Gets the number of comments in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type: '<xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;'
        description: ''
  - name: getItem(commentId)
    uid: 'excel!Excel.CommentCollection#getItem:member(1)'
    package: excel!
    fullName: getItem(commentId)
    summary: Gets a comment from the collection based on its ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(commentId: string): Comment;'
      parameters:
        - id: commentId
          description: The identifier for the comment.
          type: string
      return:
        type: '<xref uid="excel!Excel.Comment:interface" />'
        description: ''
  - name: getItemAt(index)
    uid: 'excel!Excel.CommentCollection#getItemAt:member(1)'
    package: excel!
    fullName: getItemAt(index)
    summary: Gets a comment from the collection based on its position.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Comment;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="excel!Excel.Comment:interface" />'
        description: ''
  - name: getItemByCell(cellAddress)
    uid: 'excel!Excel.CommentCollection#getItemByCell:member(1)'
    package: excel!
    fullName: getItemByCell(cellAddress)
    summary: Gets the comment from the specified cell.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemByCell(cellAddress: Range | string): Comment;'
      parameters:
        - id: cellAddress
          description: >-
            The cell which the comment is on. This can be a Range object or a
            string. If it's a string, it must contain the full address,
            including the sheet name. An `InvalidArgument` error is thrown if
            the provided range is larger than one cell.
          type: '<xref uid="excel!Excel.Range:interface" /> | string'
      return:
        type: '<xref uid="excel!Excel.Comment:interface" />'
        description: ''
  - name: getItemByReplyId(replyId)
    uid: 'excel!Excel.CommentCollection#getItemByReplyId:member(1)'
    package: excel!
    fullName: getItemByReplyId(replyId)
    summary: Gets the comment to which the given reply is connected.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemByReplyId(replyId: string): Comment;'
      parameters:
        - id: replyId
          description: The identifier of comment reply.
          type: string
      return:
        type: '<xref uid="excel!Excel.Comment:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.CommentCollection#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
