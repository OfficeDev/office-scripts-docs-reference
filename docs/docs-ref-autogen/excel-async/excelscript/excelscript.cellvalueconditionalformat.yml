### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CellValueConditionalFormat:interface'
    summary: Represents a cell value conditional format.
    name: Excel.CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.CellValueConditionalFormat#format:member'
      - 'excel!Excel.CellValueConditionalFormat#load:member(1)'
      - 'excel!Excel.CellValueConditionalFormat#rule:member'
  - uid: 'excel!Excel.CellValueConditionalFormat#format:member'
    summary: 'Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.'
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:interface'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.CellValueConditionalFormat#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CellValueConditionalFormat#rule:member'
    summary: Specifies the Rule object on this conditional format.
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: ConditionalCellValueRule;'
      return:
        type:
          - 'excel!Excel.ConditionalCellValueRule:interface'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.ConditionalRangeFormat:interface'
    name: ConditionalRangeFormat
    fullName: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.ConditionalCellValueRule:interface'
    name: ConditionalCellValueRule
    fullName: Excel.ConditionalCellValueRule
