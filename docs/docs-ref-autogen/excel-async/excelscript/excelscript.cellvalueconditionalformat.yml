### YamlMime:TSType
name: Excel.CellValueConditionalFormat
uid: 'excel!Excel.CellValueConditionalFormat:interface'
package: excel!
fullName: Excel.CellValueConditionalFormat
summary: Represents a cell value conditional format.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: format
    uid: 'excel!Excel.CellValueConditionalFormat#format:member'
    package: excel!
    fullName: format
    summary: >-
      Returns a format object, encapsulating the conditional formats font, fill,
      borders, and other properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: ConditionalRangeFormat;'
      return:
        type: '<xref uid="excel!Excel.ConditionalRangeFormat:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
  - name: rule
    uid: 'excel!Excel.CellValueConditionalFormat#rule:member'
    package: excel!
    fullName: rule
    summary: Specifies the Rule object on this conditional format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rule: ConditionalCellValueRule;'
      return:
        type: '<xref uid="excel!Excel.ConditionalCellValueRule:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
methods:
  - name: load(propertyNames)
    uid: 'excel!Excel.CellValueConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
