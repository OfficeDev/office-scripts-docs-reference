### YamlMime:TSType
name: Excel.ConditionalFormat
uid: 'excel!Excel.ConditionalFormat:interface'
package: excel!
fullName: Excel.ConditionalFormat
summary: >-
  An object encapsulating a conditional format's range, format, rule, and other
  properties. To learn more about the conditional formatting object model, read
  [Apply conditional formatting to Excel
  ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!--
  -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: cellValue
    uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    package: excel!
    fullName: cellValue
    summary: >-
      Returns the cell value conditional format properties if the current
      conditional format is a CellValue type. For example to format all cells
      between 5 and 10.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValue: CellValueConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CellValueConditionalFormat:interface" />'
  - name: cellValueOrNullObject
    uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    package: excel!
    fullName: cellValueOrNullObject
    summary: >-
      Returns the cell value conditional format properties if the current
      conditional format is a CellValue type. For example to format all cells
      between 5 and 10.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValueOrNullObject: CellValueConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CellValueConditionalFormat:interface" />'
  - name: colorScale
    uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    package: excel!
    fullName: colorScale
    summary: >-
      Returns the ColorScale conditional format properties if the current
      conditional format is an ColorScale type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScale: ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.ColorScaleConditionalFormat:interface" />'
  - name: colorScaleOrNullObject
    uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    package: excel!
    fullName: colorScaleOrNullObject
    summary: >-
      Returns the ColorScale conditional format properties if the current
      conditional format is an ColorScale type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScaleOrNullObject: ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.ColorScaleConditionalFormat:interface" />'
  - name: custom
    uid: 'excel!Excel.ConditionalFormat#custom:member'
    package: excel!
    fullName: custom
    summary: >-
      Returns the custom conditional format properties if the current
      conditional format is a custom type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly custom: CustomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:interface" />'
  - name: customOrNullObject
    uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    package: excel!
    fullName: customOrNullObject
    summary: >-
      Returns the custom conditional format properties if the current
      conditional format is a custom type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customOrNullObject: CustomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.CustomConditionalFormat:interface" />'
  - name: dataBar
    uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    package: excel!
    fullName: dataBar
    summary: >-
      Returns the data bar properties if the current conditional format is a
      data bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBar: DataBarConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:interface" />'
  - name: dataBarOrNullObject
    uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    package: excel!
    fullName: dataBarOrNullObject
    summary: >-
      Returns the data bar properties if the current conditional format is a
      data bar.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBarOrNullObject: DataBarConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.DataBarConditionalFormat:interface" />'
  - name: iconSet
    uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    package: excel!
    fullName: iconSet
    summary: >-
      Returns the IconSet conditional format properties if the current
      conditional format is an IconSet type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSet: IconSetConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.IconSetConditionalFormat:interface" />'
  - name: iconSetOrNullObject
    uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    package: excel!
    fullName: iconSetOrNullObject
    summary: >-
      Returns the IconSet conditional format properties if the current
      conditional format is an IconSet type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSetOrNullObject: IconSetConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.IconSetConditionalFormat:interface" />'
  - name: id
    uid: 'excel!Excel.ConditionalFormat#id:member'
    package: excel!
    fullName: id
    summary: >-
      The Priority of the Conditional Format within the current
      ConditionalFormatCollection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: preset
    uid: 'excel!Excel.ConditionalFormat#preset:member'
    package: excel!
    fullName: preset
    summary: >-
      Returns the preset criteria conditional format. See
      Excel.PresetCriteriaConditionalFormat for more details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly preset: PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.PresetCriteriaConditionalFormat:interface" />'
  - name: presetOrNullObject
    uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    package: excel!
    fullName: presetOrNullObject
    summary: >-
      Returns the preset criteria conditional format. See
      Excel.PresetCriteriaConditionalFormat for more details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly presetOrNullObject: PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.PresetCriteriaConditionalFormat:interface" />'
  - name: priority
    uid: 'excel!Excel.ConditionalFormat#priority:member'
    package: excel!
    fullName: priority
    summary: >-
      The priority (or index) within the conditional format collection that this
      conditional format currently exists in. Changing this also changes other
      conditional formats' priorities, to allow for a contiguous priority order.
      Use a negative priority to begin from the back. Priorities greater than
      than bounds will get and set to the maximum (or minimum if negative)
      priority. Also note that if you change the priority, you have to re-fetch
      a new copy of the object at that new priority location if you want to make
      further changes to it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'priority: number;'
      return:
        type: number
  - name: stopIfTrue
    uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    package: excel!
    fullName: stopIfTrue
    summary: >-
      If the conditions of this conditional format are met, no lower-priority
      formats shall take effect on that cell. Null on databars, icon sets, and
      colorscales as there's no concept of StopIfTrue for these
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type: boolean
  - name: textComparison
    uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    package: excel!
    fullName: textComparison
    summary: >-
      Returns the specific text conditional format properties if the current
      conditional format is a text type. For example to format cells matching
      the word "Text".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparison: TextConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TextConditionalFormat:interface" />'
  - name: textComparisonOrNullObject
    uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    package: excel!
    fullName: textComparisonOrNullObject
    summary: >-
      Returns the specific text conditional format properties if the current
      conditional format is a text type. For example to format cells matching
      the word "Text".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparisonOrNullObject: TextConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TextConditionalFormat:interface" />'
  - name: topBottom
    uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    package: excel!
    fullName: topBottom
    summary: >-
      Returns the Top/Bottom conditional format properties if the current
      conditional format is an TopBottom type. For example to format the top 10%
      or bottom 10 items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottom: TopBottomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TopBottomConditionalFormat:interface" />'
  - name: topBottomOrNullObject
    uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    package: excel!
    fullName: topBottomOrNullObject
    summary: >-
      Returns the Top/Bottom conditional format properties if the current
      conditional format is an TopBottom type. For example to format the top 10%
      or bottom 10 items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottomOrNullObject: TopBottomConditionalFormat;'
      return:
        type: '<xref uid="excel!Excel.TopBottomConditionalFormat:interface" />'
  - name: type
    uid: 'excel!Excel.ConditionalFormat#type:member'
    package: excel!
    fullName: type
    summary: A type of conditional format. Only one can be set at a time.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        readonly type:
                    | ConditionalFormatType
                    | "Custom"
                    | "DataBar"
                    | "ColorScale"
                    | "IconSet"
                    | "TopBottom"
                    | "PresetCriteria"
                    | "ContainsText"
                    | "CellValue";
      return:
        type: |-
          | <xref uid="excel!Excel.ConditionalFormatType:enum" />
                      | "Custom"
                      | "DataBar"
                      | "ColorScale"
                      | "IconSet"
                      | "TopBottom"
                      | "PresetCriteria"
                      | "ContainsText"
                      | "CellValue"
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
methods:
  - name: delete()
    uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    package: excel!
    fullName: delete()
    summary: Deletes this conditional format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getRange()
    uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    package: excel!
    fullName: getRange()
    summary: >-
      Returns the range the conditonal format is applied to. Throws an error if
      the conditional format is applied to multiple ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRangeOrNullObject()
    uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    package: excel!
    fullName: getRangeOrNullObject()
    summary: >-
      Returns the range the conditonal format is applied to, or a null object if
      the conditional format is applied to multiple ranges.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRangeOrNullObject(): Range;'
      return:
        type: '<xref uid="excel!Excel.Range:interface" />'
        description: ''
  - name: getRanges()
    uid: 'excel!Excel.ConditionalFormat#getRanges:member(1)'
    package: excel!
    fullName: getRanges()
    summary: >-
      Returns the RangeAreas, comprising one or more rectangular ranges, the
      conditonal format is applied to.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRanges(): RangeAreas;'
      return:
        type: '<xref uid="excel!Excel.RangeAreas:interface" />'
        description: ''
  - name: load(propertyNames)
    uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    package: excel!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You
      must call `context.sync()` before reading the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      parameters:
        - id: propertyNames
          description: >-
            A comma-delimited string or an array of strings that specify the
            properties to load.
          type: 'string | string[]'
      return:
        type: void
        description: ''
