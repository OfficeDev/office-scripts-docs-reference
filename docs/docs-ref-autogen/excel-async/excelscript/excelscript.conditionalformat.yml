### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormat:interface'
    summary: >-
      An object encapsulating a conditional format's range, format, rule, and other properties. To learn more about the
      conditional formatting object model, read [Apply conditional formatting to Excel
      ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#customOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#delete:member(1)'
      - 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
      - 'excel!Excel.ConditionalFormat#getRanges:member(1)'
      - 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#id:member'
      - 'excel!Excel.ConditionalFormat#load:member(1)'
      - 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#priority:member'
      - 'excel!Excel.ConditionalFormat#stopIfTrue:member'
      - 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#type:member'
  - uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    summary: >-
      Returns the cell value conditional format properties if the current conditional format is a CellValue type. For
      example to format all cells between 5 and 10.
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    summary: Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    summary: Returns the custom conditional format properties if the current conditional format is a custom type.
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    summary: Returns the data bar properties if the current conditional format is a data bar.
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    summary: Deletes this conditional format.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    summary: >-
      Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to
      multiple ranges.
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRanges:member(1)'
    summary: 'Returns the RangeAreas, comprising one or more rectangular ranges, the conditonal format is applied to.'
    name: getRanges()
    fullName: getRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    summary: Returns the IconSet conditional format properties if the current conditional format is an IconSet type.
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#id:member'
    summary: The Priority of the Conditional Format within the current ConditionalFormatCollection.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    summary: Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#priority:member'
    summary: >-
      The priority (or index) within the conditional format collection that this conditional format currently exists in.
      Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order. Use a
      negative priority to begin from the back. Priorities greater than than bounds will get and set to the maximum (or
      minimum if negative) priority. Also note that if you change the priority, you have to re-fetch a new copy of the
      object at that new priority location if you want to make further changes to it.
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    summary: >-
      If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.
      Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    summary: >-
      Returns the specific text conditional format properties if the current conditional format is a text type. For
      example to format cells matching the word "Text".
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    summary: >-
      Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type. For
      example to format the top 10% or bottom 10 items.
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:interface'
  - uid: 'excel!Excel.ConditionalFormat#type:member'
    summary: A type of conditional format. Only one can be set at a time.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: ConditionalFormatType;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatType:enum'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
references:
  - uid: 'excel!Excel.CellValueConditionalFormat:interface'
    name: CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.ColorScaleConditionalFormat:interface'
    name: ColorScaleConditionalFormat
    fullName: Excel.ColorScaleConditionalFormat
  - uid: 'excel!Excel.CustomConditionalFormat:interface'
    name: CustomConditionalFormat
    fullName: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.DataBarConditionalFormat:interface'
    name: DataBarConditionalFormat
    fullName: Excel.DataBarConditionalFormat
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.IconSetConditionalFormat:interface'
    name: IconSetConditionalFormat
    fullName: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:interface'
    name: PresetCriteriaConditionalFormat
    fullName: Excel.PresetCriteriaConditionalFormat
  - uid: 'excel!Excel.TextConditionalFormat:interface'
    name: TextConditionalFormat
    fullName: Excel.TextConditionalFormat
  - uid: 'excel!Excel.TopBottomConditionalFormat:interface'
    name: TopBottomConditionalFormat
    fullName: Excel.TopBottomConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: Excel.ConditionalFormatType
