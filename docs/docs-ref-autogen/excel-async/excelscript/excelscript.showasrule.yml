### YamlMime:TSType
name: Excel.ShowAsRule
uid: 'excel!Excel.ShowAsRule:interface'
package: excel!
fullName: Excel.ShowAsRule
summary: ''
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: baseField
    uid: 'excel!Excel.ShowAsRule#baseField:member'
    package: excel!
    fullName: baseField
    summary: >-
      The base PivotField to base the ShowAs calculation, if applicable based on
      the ShowAsCalculation type, else null.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'baseField?: PivotField;'
      return:
        type: '<xref uid="excel!Excel.PivotField:interface" />'
  - name: baseItem
    uid: 'excel!Excel.ShowAsRule#baseItem:member'
    package: excel!
    fullName: baseItem
    summary: >-
      The base Item to base the ShowAs calculation on, if applicable based on
      the ShowAsCalculation type, else null.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'baseItem?: PivotItem;'
      return:
        type: '<xref uid="excel!Excel.PivotItem:interface" />'
        description: |-


          #### Examples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              let farmDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold at Farm");
              let wholesaleDataHierarchy: Excel.DataPivotHierarchy = pivotTable.dataHierarchies.getItem("Sum of Crates Sold Wholesale");

              farmDataHierarchy.load("showAs");
              wholesaleDataHierarchy.load("showAs");
              await context.sync();

              // show the difference between crate sales of the "A Farms" and the other farms
              // this difference is both aggregated and shown for individual fruit types (where applicable)
              let farmShowAs = farmDataHierarchy.showAs;
              farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              farmShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              farmShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              farmDataHierarchy.showAs = farmShowAs;

              let wholesaleShowAs = wholesaleDataHierarchy.showAs;
              wholesaleShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
              wholesaleShowAs.baseField = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
              wholesaleShowAs.baseItem = pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getItem("A Farms");
              wholesaleDataHierarchy.showAs = wholesaleShowAs;
              await context.sync();
          }
          ```
  - name: calculation
    uid: 'excel!Excel.ShowAsRule#calculation:member'
    package: excel!
    fullName: calculation
    summary: >-
      The ShowAs Calculation to use for the Data PivotField. See
      Excel.ShowAsCalculation for Details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        calculation:
                    | ShowAsCalculation
                    | "Unknown"
                    | "None"
                    | "PercentOfGrandTotal"
                    | "PercentOfRowTotal"
                    | "PercentOfColumnTotal"
                    | "PercentOfParentRowTotal"
                    | "PercentOfParentColumnTotal"
                    | "PercentOfParentTotal"
                    | "PercentOf"
                    | "RunningTotal"
                    | "PercentRunningTotal"
                    | "DifferenceFrom"
                    | "PercentDifferenceFrom"
                    | "RankAscending"
                    | "RankDecending"
                    | "Index";
      return:
        type: |-
          | <xref uid="excel!Excel.ShowAsCalculation:enum" />
                      | "Unknown"
                      | "None"
                      | "PercentOfGrandTotal"
                      | "PercentOfRowTotal"
                      | "PercentOfColumnTotal"
                      | "PercentOfParentRowTotal"
                      | "PercentOfParentColumnTotal"
                      | "PercentOfParentTotal"
                      | "PercentOf"
                      | "RunningTotal"
                      | "PercentRunningTotal"
                      | "DifferenceFrom"
                      | "PercentDifferenceFrom"
                      | "RankAscending"
                      | "RankDecending"
                      | "Index"
