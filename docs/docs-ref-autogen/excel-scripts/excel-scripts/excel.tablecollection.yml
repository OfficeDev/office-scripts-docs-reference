### YamlMime:UniversalReference
items:
  - uid: 'excel-scripts!Excel.TableCollection:class'
    summary: >-
      Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was
      reached.


      \[Api set: ExcelApi 1.1\]
    name: Excel.TableCollection
    fullName: Excel.TableCollection
    langs:
      - typeScript
    type: class
    package: excel-scripts!
    children:
      - 'excel-scripts!Excel.TableCollection#add:member(1)'
      - 'excel-scripts!Excel.TableCollection#context:member'
      - 'excel-scripts!Excel.TableCollection#count:member'
      - 'excel-scripts!Excel.TableCollection#getCount:member(1)'
      - 'excel-scripts!Excel.TableCollection#getItem:member(1)'
      - 'excel-scripts!Excel.TableCollection#getItemAt:member(1)'
      - 'excel-scripts!Excel.TableCollection#getItemOrNullObject:member(1)'
      - 'excel-scripts!Excel.TableCollection#items:member'
      - 'excel-scripts!Excel.TableCollection#load:member(1)'
      - 'excel-scripts!Excel.TableCollection#toJSON:member(1)'
  - uid: 'excel-scripts!Excel.TableCollection#add:member(1)'
    summary: >-
      Create a new table. The range object or source address determines the worksheet under which the table will be
      added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another
      table), an error will be thrown.


      \[Api set: ExcelApi 1.1\]
    name: 'add(address, hasHeaders)'
    fullName: 'add(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
      return:
        type:
          - 'excel-scripts!Excel.Table:class'
        description: ''
      parameters:
        - id: address
          description: >-
            A Range object, or a string address or name of the range representing the data source. If the address does
            not contain a sheet name, the currently-active sheet is used. \[Api set: ExcelApi 1.1 / 1.3. Prior to
            ExcelApi 1.3, this parameter must be a string. Starting with Excel Api 1.3, this parameter may be a Range
            object or a string.\]
          type:
            - 'excel-scripts!Excel.TableCollection#add~0:complex'
        - id: hasHeaders
          description: >-
            Boolean value that indicates whether the data being imported has column labels. If the source does not
            contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting
            the data down by one row.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.TableCollection#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel-scripts!Excel.RequestContext:class'
  - uid: 'excel-scripts!Excel.TableCollection#count:member'
    summary: |-
      Returns the number of tables in the workbook. Read-only.

      \[Api set: ExcelApi 1.1\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.TableCollection#getCount:member(1)'
    summary: |-
      Gets the number of tables in the collection.

      \[Api set: ExcelApi 1.4\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel-scripts!Excel.TableCollection#getCount~0:complex'
        description: ''
  - uid: 'excel-scripts!Excel.TableCollection#getItem:member(1)'
    summary: |-
      Gets a table by Name or ID.

      \[Api set: ExcelApi 1.1\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Table;'
      return:
        type:
          - 'excel-scripts!Excel.Table:class'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type:
            - string
  - uid: 'excel-scripts!Excel.TableCollection#getItemAt:member(1)'
    summary: |-
      Gets a table based on its position in the collection.

      \[Api set: ExcelApi 1.1\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Table;'
      return:
        type:
          - 'excel-scripts!Excel.Table:class'
        description: ''
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'excel-scripts!Excel.TableCollection#getItemOrNullObject:member(1)'
    summary: |-
      Gets a table by Name or ID. If the table does not exist, will return a null object.

      \[Api set: ExcelApi 1.4\]
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Table;'
      return:
        type:
          - 'excel-scripts!Excel.Table:class'
        description: ''
      parameters:
        - id: key
          description: Name or ID of the table to be retrieved.
          type:
            - string
  - uid: 'excel-scripts!Excel.TableCollection#items:member'
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Table[];'
      return:
        type:
          - 'excel-scripts!Excel.TableCollection#items~0:complex'
  - uid: 'excel-scripts!Excel.TableCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableCollection;'
      return:
        type:
          - 'excel-scripts!Excel.TableCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel-scripts!Excel.TableCollection#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`<!-- -->) that contains an "items" array
      with shallow copies of any loaded properties from the collection's items.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
      return:
        type:
          - 'excel-scripts!Excel.Interfaces.TableCollectionData:interface'
        description: ''
references:
  - uid: 'excel-scripts!Excel.Table:class'
    name: Excel.Table
  - uid: 'excel-scripts!Excel.TableCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel-scripts!Excel.TableCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel-scripts!Excel.TableCollection#items~0:complex'
    name: 'Excel.Table[]'
    fullName: 'Excel.Table[]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Table:class'
        name: Excel.Table
        fullName: Excel.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'excel-scripts!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel-scripts!Excel.Interfaces.TableCollectionData:interface'
    name: Excel.Interfaces.TableCollectionData
