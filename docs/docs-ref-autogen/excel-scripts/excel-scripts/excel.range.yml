### YamlMime:UniversalReference
items:
  - uid: 'excel-scripts!Excel.Range:class'
    summary: >-
      Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To
      learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript
      API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the
      Excel JavaScript API
      (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    package: excel-scripts!
    children:
      - 'excel-scripts!Excel.Range#address:member'
      - 'excel-scripts!Excel.Range#addressLocal:member'
      - 'excel-scripts!Excel.Range#autoFill:member(1)'
      - 'excel-scripts!Excel.Range#autoFill:member(2)'
      - 'excel-scripts!Excel.Range#calculate:member(1)'
      - 'excel-scripts!Excel.Range#cellCount:member'
      - 'excel-scripts!Excel.Range#clear:member(1)'
      - 'excel-scripts!Excel.Range#clear:member(2)'
      - 'excel-scripts!Excel.Range#columnCount:member'
      - 'excel-scripts!Excel.Range#columnHidden:member'
      - 'excel-scripts!Excel.Range#columnIndex:member'
      - 'excel-scripts!Excel.Range#conditionalFormats:member'
      - 'excel-scripts!Excel.Range#context:member'
      - 'excel-scripts!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel-scripts!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel-scripts!Excel.Range#copyFrom:member(1)'
      - 'excel-scripts!Excel.Range#copyFrom:member(2)'
      - 'excel-scripts!Excel.Range#dataValidation:member'
      - 'excel-scripts!Excel.Range#delete:member(1)'
      - 'excel-scripts!Excel.Range#delete:member(2)'
      - 'excel-scripts!Excel.Range#find:member(1)'
      - 'excel-scripts!Excel.Range#findOrNullObject:member(1)'
      - 'excel-scripts!Excel.Range#flashFill:member(1)'
      - 'excel-scripts!Excel.Range#format:member'
      - 'excel-scripts!Excel.Range#formulas:member'
      - 'excel-scripts!Excel.Range#formulasLocal:member'
      - 'excel-scripts!Excel.Range#formulasR1C1:member'
      - 'excel-scripts!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel-scripts!Excel.Range#getBoundingRect:member(1)'
      - 'excel-scripts!Excel.Range#getCell:member(1)'
      - 'excel-scripts!Excel.Range#getCellProperties:member(1)'
      - 'excel-scripts!Excel.Range#getColumn:member(1)'
      - 'excel-scripts!Excel.Range#getColumnProperties:member(1)'
      - 'excel-scripts!Excel.Range#getColumnsAfter:member(1)'
      - 'excel-scripts!Excel.Range#getColumnsBefore:member(1)'
      - 'excel-scripts!Excel.Range#getEntireColumn:member(1)'
      - 'excel-scripts!Excel.Range#getEntireRow:member(1)'
      - 'excel-scripts!Excel.Range#getImage:member(1)'
      - 'excel-scripts!Excel.Range#getIntersection:member(1)'
      - 'excel-scripts!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel-scripts!Excel.Range#getLastCell:member(1)'
      - 'excel-scripts!Excel.Range#getLastColumn:member(1)'
      - 'excel-scripts!Excel.Range#getLastRow:member(1)'
      - 'excel-scripts!Excel.Range#getOffsetRange:member(1)'
      - 'excel-scripts!Excel.Range#getResizedRange:member(1)'
      - 'excel-scripts!Excel.Range#getRow:member(1)'
      - 'excel-scripts!Excel.Range#getRowProperties:member(1)'
      - 'excel-scripts!Excel.Range#getRowsAbove:member(1)'
      - 'excel-scripts!Excel.Range#getRowsBelow:member(1)'
      - 'excel-scripts!Excel.Range#getSpecialCells:member(1)'
      - 'excel-scripts!Excel.Range#getSpecialCells:member(2)'
      - 'excel-scripts!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel-scripts!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel-scripts!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel-scripts!Excel.Range#getTables:member(1)'
      - 'excel-scripts!Excel.Range#getUsedRange:member(1)'
      - 'excel-scripts!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel-scripts!Excel.Range#getVisibleView:member(1)'
      - 'excel-scripts!Excel.Range#group:member(1)'
      - 'excel-scripts!Excel.Range#group:member(2)'
      - 'excel-scripts!Excel.Range#height:member'
      - 'excel-scripts!Excel.Range#hidden:member'
      - 'excel-scripts!Excel.Range#hideGroupDetails:member(1)'
      - 'excel-scripts!Excel.Range#hideGroupDetails:member(2)'
      - 'excel-scripts!Excel.Range#hyperlink:member'
      - 'excel-scripts!Excel.Range#insert:member(1)'
      - 'excel-scripts!Excel.Range#insert:member(2)'
      - 'excel-scripts!Excel.Range#isEntireColumn:member'
      - 'excel-scripts!Excel.Range#isEntireRow:member'
      - 'excel-scripts!Excel.Range#left:member'
      - 'excel-scripts!Excel.Range#linkedDataTypeState:member'
      - 'excel-scripts!Excel.Range#load:member(1)'
      - 'excel-scripts!Excel.Range#load:member(2)'
      - 'excel-scripts!Excel.Range#merge:member(1)'
      - 'excel-scripts!Excel.Range#moveTo:member(1)'
      - 'excel-scripts!Excel.Range#numberFormat:member'
      - 'excel-scripts!Excel.Range#numberFormatLocal:member'
      - 'excel-scripts!Excel.Range#removeDuplicates:member(1)'
      - 'excel-scripts!Excel.Range#replaceAll:member(1)'
      - 'excel-scripts!Excel.Range#rowCount:member'
      - 'excel-scripts!Excel.Range#rowHidden:member'
      - 'excel-scripts!Excel.Range#rowIndex:member'
      - 'excel-scripts!Excel.Range#select:member(1)'
      - 'excel-scripts!Excel.Range#set:member(1)'
      - 'excel-scripts!Excel.Range#setCellProperties:member(1)'
      - 'excel-scripts!Excel.Range#setColumnProperties:member(1)'
      - 'excel-scripts!Excel.Range#setDirty:member(1)'
      - 'excel-scripts!Excel.Range#setRowProperties:member(1)'
      - 'excel-scripts!Excel.Range#showCard:member(1)'
      - 'excel-scripts!Excel.Range#showGroupDetails:member(1)'
      - 'excel-scripts!Excel.Range#showGroupDetails:member(2)'
      - 'excel-scripts!Excel.Range#sort:member'
      - 'excel-scripts!Excel.Range#style:member'
      - 'excel-scripts!Excel.Range#text:member'
      - 'excel-scripts!Excel.Range#top:member'
      - 'excel-scripts!Excel.Range#track:member(1)'
      - 'excel-scripts!Excel.Range#ungroup:member(1)'
      - 'excel-scripts!Excel.Range#ungroup:member(2)'
      - 'excel-scripts!Excel.Range#unmerge:member(1)'
      - 'excel-scripts!Excel.Range#untrack:member(1)'
      - 'excel-scripts!Excel.Range#values:member'
      - 'excel-scripts!Excel.Range#valueTypes:member'
      - 'excel-scripts!Excel.Range#width:member'
      - 'excel-scripts!Excel.Range#worksheet:member'
  - uid: 'excel-scripts!Excel.Range#address:member'
    summary: >-
      Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").
      Read-only.
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel-scripts!Excel.Range#addressLocal:member'
    summary: Represents range reference for the specified range in the language of the user. Read-only.
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel-scripts!Excel.Range#autoFill:member(1)'
    summary: >-
      Fills range from the current range to the destination range using the specified AutoFill logic. The destination
      range can be null, or can extend the source either horizontally or vertically. Discontiguous ranges are not
      supported.


      For more information, read [Use AutoFill and Flash
      Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!--
      -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: >-
            The destination range to autofill. If the destination range is null, data is filled out based on the
            surrounding cells (which is the behavior when double-clicking the UIâ€™s range fill handle).
          type:
            - 'excel-scripts!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: >-
            The type of autofill. Specifies how the destination range is to be filled, based on the contents of the
            current range. Default is "FillDefault".
          type:
            - 'excel-scripts!Excel.AutoFillType:enum'
  - uid: 'excel-scripts!Excel.Range#autoFill:member(2)'
    summary: >-
      Fills range from the current range to the destination range using the specified AutoFill logic. The destination
      range can be null, or can extend the source either horizontally or vertically. Discontiguous ranges are not
      supported.


      For more information, read [Use AutoFill and Flash
      Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!--
      -->.
    name: 'autoFill(destinationRange, autoFillTypeStringString)'
    fullName: 'autoFill(destinationRange, autoFillTypeStringString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        autoFill(destinationRange?: Range | string, autoFillTypeStringString?: "FillDefault" | "FillCopy" | "FillSeries"
        | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" |
        "GrowthTrend" | "FlashFill"): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: >-
            The destination range to autofill. If the destination range is null, data is filled out based on the
            surrounding cells (which is the behavior when double-clicking the UIâ€™s range fill handle).
          type:
            - 'excel-scripts!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeStringString
          description: >-
            The type of autofill. Specifies how the destination range is to be filled, based on the contents of the
            current range. Default is "FillDefault".
          type:
            - >-
              "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" |
              "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"
  - uid: 'excel-scripts!Excel.Range#calculate:member(1)'
    summary: Calculates a range of cells on a worksheet.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#cellCount:member'
    summary: 'Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.'
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#clear:member(1)'
    summary: 'Clear range values, format, fill, border, etc.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.
          type:
            - 'excel-scripts!Excel.ClearApplyTo:enum'
  - uid: 'excel-scripts!Excel.Range#clear:member(2)'
    summary: 'Clear range values, format, fill, border, etc.'
    name: clear(applyToStringString)
    fullName: clear(applyToStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToStringString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToStringString
          description: Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel-scripts!Excel.Range#columnCount:member'
    summary: Represents the total number of columns in the range. Read-only.
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#columnHidden:member'
    summary: Represents if all columns of the current range are hidden.
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.Range#columnIndex:member'
    summary: Represents the column number of the first cell in the range. Zero-indexed. Read-only.
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#conditionalFormats:member'
    summary: Collection of ConditionalFormats that intersect the range. Read-only.
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel-scripts!Excel.ConditionalFormatCollection:class'
  - uid: 'excel-scripts!Excel.Range#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel-scripts!Excel.RequestContext:class'
  - uid: 'excel-scripts!Excel.Range#convertDataTypeToText:member(1)'
    summary: Converts the range cells with datatypes into text.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#convertToLinkedDataType:member(1)'
    summary: Converts the range cells into linked datatype in the worksheet.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: The Service ID which will be used to query the data.
          type:
            - number
        - id: languageCulture
          description: Language Culture to query the service for.
          type:
            - string
  - uid: 'excel-scripts!Excel.Range#copyFrom:member(1)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current range. The destination range can
      be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is
      smaller than the source.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean,
        transpose?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            be able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'excel-scripts!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - 'excel-scripts!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: True if to skip blank cells in the source range. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination range. Default is false.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#copyFrom:member(2)'
    summary: >-
      Copies cell data or formatting from the source range or RangeAreas to the current range. The destination range can
      be a different size than the source range or RangeAreas. The destination will be expanded automatically if it is
      smaller than the source.
    name: 'copyFrom(sourceRange, copyTypeStringString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeStringString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        copyFrom(sourceRange: Range | RangeAreas | string, copyTypeStringString?: "All" | "Formulas" | "Values" |
        "Formats", skipBlanks?: boolean, transpose?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: >-
            The source range or RangeAreas to copy from. When the source RangeAreas has multiple ranges, their form must
            be able to be created by removing full rows or columns from a rectangular range.
          type:
            - 'excel-scripts!Excel.Range#copyFrom~1:complex'
        - id: copyTypeStringString
          description: The type of cell data or formatting to copy over. Default is "All".
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: True if to skip blank cells in the source range. Default is false.
          type:
            - boolean
        - id: transpose
          description: True if to transpose the cells in the destination range. Default is false.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#dataValidation:member'
    summary: Returns a data validation object.
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel-scripts!Excel.DataValidation:class'
  - uid: 'excel-scripts!Excel.Range#delete:member(1)'
    summary: Deletes the cells associated with the range.
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.
          type:
            - 'excel-scripts!Excel.DeleteShiftDirection:enum'
  - uid: 'excel-scripts!Excel.Range#delete:member(2)'
    summary: Deletes the cells associated with the range.
    name: delete(shiftStringString)
    fullName: delete(shiftStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftStringString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftStringString
          description: Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.
          type:
            - '"Up" | "Left"'
  - uid: 'excel-scripts!Excel.Range#find:member(1)'
    summary: >-
      Finds the given string based on the criteria specified. If the current range is larger than a single cell, then
      the search will be limited to that range, else the search will cover the entire sheet starting after that cell.
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: The Range object representing the first cell that contains a value matching the search text and criteria.
      parameters:
        - id: text
          description: The string to find.
          type:
            - string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and whether the search needs to match the entire
            cell or be case sensitive.
          type:
            - 'excel-scripts!Excel.SearchCriteria:interface'
  - uid: 'excel-scripts!Excel.Range#findOrNullObject:member(1)'
    summary: >-
      Finds the given string based on the criteria specified. If the current range is larger than a single cell, then
      the search will be limited to that range, else the search will cover the entire sheet starting after that cell. If
      there are no matches, this function will return a null object.
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: The Range which matched the search criteria.
      parameters:
        - id: text
          description: The string to find.
          type:
            - string
        - id: criteria
          description: >-
            Additional search criteria, including the search direction and whether the search needs to match the entire
            cell or be case sensitive.
          type:
            - 'excel-scripts!Excel.SearchCriteria:interface'
  - uid: 'excel-scripts!Excel.Range#flashFill:member(1)'
    summary: >-
      Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range
      must be single column range and have data around in order to find pattern.
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#format:member'
    summary: >-
      Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.
      Read-only.
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel-scripts!Excel.RangeFormat:class'
  - uid: 'excel-scripts!Excel.Range#formulas:member'
    summary: >-
      Represents the formula in A1-style notation. When setting formulas to a range, the value argument can be either a
      single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all
      cells in the range.
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#formulasLocal:member'
    summary: >-
      Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the
      English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German. When setting formulas to a range, the
      value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single
      value, it will be applied to all cells in the range.
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#formulasR1C1:member'
    summary: >-
      Represents the formula in R1C1-style notation. When setting formulas to a range, the value argument can be either
      a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all
      cells in the range.
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: >-
      Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of
      rows and columns.
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: The number of rows of the new range size.
          type:
            - number
        - id: numColumns
          description: The number of columns of the new range size.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getBoundingRect:member(1)'
    summary: >-
      Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and
      "D10:E15" is "B2:E15".
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or address or range name.
          type:
            - 'excel-scripts!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel-scripts!Excel.Range#getCell:member(1)'
    summary: >-
      Gets the range object containing the single cell based on row and column numbers. The cell can be outside the
      bounds of its parent range, so long as it stays within the worksheet grid. The returned cell is located relative
      to the top left cell of the range.
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: row
          description: Row number of the cell to be retrieved. Zero-indexed.
          type:
            - number
        - id: column
          description: Column number of the cell to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getCellProperties:member(1)'
    summary: 'Returns a 2D array, encapsulating the data for each cell''s font, fill, borders, alignment, and other properties.'
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel-scripts!Excel.Range#getCellProperties~0:complex'
        description: A 2D array where each item represents the requested properties of the corresponding cell.
      parameters:
        - id: cellPropertiesLoadOptions
          description: An object that represents which cell properties to load.
          type:
            - 'excel-scripts!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel-scripts!Excel.Range#getColumn:member(1)'
    summary: Gets a column contained in the range.
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: column
          description: Column number of the range to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getColumnProperties:member(1)'
    summary: >-
      Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and
      other properties. For properties that are not consistent across each cell within a given column, null will be
      returned.
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel-scripts!Excel.Range#getColumnProperties~0:complex'
        description: An array where each item represents the requested properties of the corresponding column.
      parameters:
        - id: columnPropertiesLoadOptions
          description: An object that represents which column properties to load.
          type:
            - 'excel-scripts!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel-scripts!Excel.Range#getColumnsAfter:member(1)'
    summary: Gets a certain number of columns to the right of the current Range object.
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getColumnsBefore:member(1)'
    summary: Gets a certain number of columns to the left of the current Range object.
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of columns to include in the resulting range. In general, use a positive number to
            create a range outside the current range. You can also use a negative number to create a range within the
            current range. The default value is 1.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getEntireColumn:member(1)'
    summary: >-
      Gets an object that represents the entire column of the range (for example, if the current range represents cells
      "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getEntireRow:member(1)'
    summary: >-
      Gets an object that represents the entire row of the range (for example, if the current range represents cells
      "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getImage:member(1)'
    summary: Renders the range as a base64-encoded png image.
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): ClientResult<string>;'
      return:
        type:
          - 'excel-scripts!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getIntersection:member(1)'
    summary: Gets the range object that represents the rectangular intersection of the given ranges.
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type:
            - 'excel-scripts!Excel.Range#getIntersection~0:complex'
  - uid: 'excel-scripts!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: >-
      Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is
      found, will return a null object.
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: anotherRange
          description: The range object or range address that will be used to determine the intersection of ranges.
          type:
            - 'excel-scripts!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel-scripts!Excel.Range#getLastCell:member(1)'
    summary: 'Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getLastColumn:member(1)'
    summary: 'Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getLastRow:member(1)'
    summary: 'Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getOffsetRange:member(1)'
    summary: >-
      Gets an object which represents a range that's offset from the specified range. The dimension of the returned
      range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error
      will be thrown.
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: rowOffset
          description: >-
            The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset
            downward, and negative values are offset upward.
          type:
            - number
        - id: columnOffset
          description: >-
            The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are
            offset to the right, and negative values are offset to the left.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getResizedRange:member(1)'
    summary: >-
      Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted)
      by some number of rows and columns.
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: >-
            The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive
            number to expand the range, or a negative number to decrease it.
          type:
            - number
        - id: deltaColumns
          description: >-
            The number of columns by which to expand the bottom-right corner, relative to the current range. Use a
            positive number to expand the range, or a negative number to decrease it.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getRow:member(1)'
    summary: Gets a row contained in the range.
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: row
          description: Row number of the range to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getRowProperties:member(1)'
    summary: >-
      Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and
      other properties. For properties that are not consistent across each cell within a given row, null will be
      returned.
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel-scripts!Excel.Range#getRowProperties~0:complex'
        description: An array where each item represents the requested properties of the corresponding row.
      parameters:
        - id: rowPropertiesLoadOptions
          description: An object that represents which row properties to load.
          type:
            - 'excel-scripts!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel-scripts!Excel.Range#getRowsAbove:member(1)'
    summary: Gets a certain number of rows above the current Range object.
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getRowsBelow:member(1)'
    summary: Gets a certain number of rows below the current Range object.
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: >-
            Optional. The number of rows to include in the resulting range. In general, use a positive number to create
            a range outside the current range. You can also use a negative number to create a range within the current
            range. The default value is 1.
          type:
            - number
  - uid: 'excel-scripts!Excel.Range#getSpecialCells:member(1)'
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match
      the specified type and value. If no special cells are found, an ItemNotFound error will be thrown.
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel-scripts!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'excel-scripts!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'excel-scripts!Excel.SpecialCellValueType:enum'
  - uid: 'excel-scripts!Excel.Range#getSpecialCells:member(2)'
    summary: >-
      Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match
      the specified type and value. If no special cells are found, an ItemNotFound error will be thrown.
    name: 'getSpecialCells(cellTypeStringString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeStringString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCells(cellTypeStringString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" |
        "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" |
        "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" |
        "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" |
        "NumbersText" | "Text"): Excel.RangeAreas;
      return:
        type:
          - 'excel-scripts!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeStringString
          description: The type of cells to include.
          type:
            - >-
              "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" |
              "SameDataValidation" | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - >-
              "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" |
              "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" |
              "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"
  - uid: 'excel-scripts!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: >-
      Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified
      type and value. If no special cells are found, a null object will be returned.
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType):
        Excel.RangeAreas;
      return:
        type:
          - 'excel-scripts!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: The type of cells to include.
          type:
            - 'excel-scripts!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - 'excel-scripts!Excel.SpecialCellValueType:enum'
  - uid: 'excel-scripts!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: >-
      Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified
      type and value. If no special cells are found, a null object will be returned.
    name: 'getSpecialCellsOrNullObject(cellTypeStringString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeStringString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        getSpecialCellsOrNullObject(cellTypeStringString: "ConditionalFormats" | "DataValidations" | "Blanks" |
        "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" |
        "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" |
        "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" |
        "NumbersText" | "Text"): Excel.RangeAreas;
      return:
        type:
          - 'excel-scripts!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeStringString
          description: The type of cells to include.
          type:
            - >-
              "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" |
              "SameDataValidation" | "Visible"
        - id: cellValueType
          description: >-
            If cellType is either Constants or Formulas, this argument is used to determine which types of cells to
            include in the result. These values can be combined together to return more than one type. The default is to
            select all constants or formulas, no matter what the type.
          type:
            - >-
              "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" |
              "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" |
              "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"
  - uid: 'excel-scripts!Excel.Range#getSurroundingRegion:member(1)'
    summary: >-
      Returns a Range object that represents the surrounding region for the top-left cell in this range. A surrounding
      region is a range bounded by any combination of blank rows and blank columns relative to this range.
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#getTables:member(1)'
    summary: Gets a scoped collection of tables that overlap with the range.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel-scripts!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: 'If true, returns only tables that are fully contained within the range bounds. The default value is false.'
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#getUsedRange:member(1)'
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, this function will
      throw an ItemNotFound error.
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: >-
      Returns the used range of the given range object. If there are no used cells within the range, this function will
      return a null object.
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: Considers only cells with values as used cells.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#getVisibleView:member(1)'
    summary: Represents the visible rows of the current range.
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel-scripts!Excel.RangeView:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#group:member(1)'
    summary: Groups columns and rows for an outline.
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: >-
            Specifies how the range can be grouped by rows or columns. An `InvalidArgument` error is thrown when the
            group option differs from the range's `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow`
            is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").
          type:
            - 'excel-scripts!Excel.GroupOption:enum'
  - uid: 'excel-scripts!Excel.Range#group:member(2)'
    summary: Groups columns and rows for an outline.
    name: group(groupOptionStringString)
    fullName: group(groupOptionStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOptionStringString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionStringString
          description: >-
            Specifies how the range can be grouped by rows or columns. An `InvalidArgument` error is thrown when the
            group option differs from the range's `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow`
            is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel-scripts!Excel.Range#height:member'
    summary: 'Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range. Read-only.'
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#hidden:member'
    summary: Represents if all cells of the current range are hidden. Read-only.
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.Range#hideGroupDetails:member(1)'
    summary: Hide details of the row or column group.
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies whether to hide details of grouped rows or grouped columns.
          type:
            - 'excel-scripts!Excel.GroupOption:enum'
  - uid: 'excel-scripts!Excel.Range#hideGroupDetails:member(2)'
    summary: Hide details of the row or column group.
    name: hideGroupDetails(groupOptionStringString)
    fullName: hideGroupDetails(groupOptionStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOptionStringString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionStringString
          description: Specifies whether to hide details of grouped rows or grouped columns.
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel-scripts!Excel.Range#hyperlink:member'
    summary: Represents the hyperlink for the current range.
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel-scripts!Excel.RangeHyperlink:interface'
  - uid: 'excel-scripts!Excel.Range#insert:member(1)'
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make
      space. Returns a new Range object at the now blank space.
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: shift
          description: Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.
          type:
            - 'excel-scripts!Excel.InsertShiftDirection:enum'
  - uid: 'excel-scripts!Excel.Range#insert:member(2)'
    summary: >-
      Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make
      space. Returns a new Range object at the now blank space.
    name: insert(shiftStringString)
    fullName: insert(shiftStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftStringString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftStringString
          description: Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.
          type:
            - '"Down" | "Right"'
  - uid: 'excel-scripts!Excel.Range#isEntireColumn:member'
    summary: Represents if the current range is an entire column. Read-only.
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.Range#isEntireRow:member'
    summary: Represents if the current range is an entire row. Read-only.
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.Range#left:member'
    summary: >-
      Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range.
      Read-only.
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#linkedDataTypeState:member'
    summary: Represents the data type state of each cell. Read-only.
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel-scripts!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel-scripts!Excel.Range#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel-scripts!Excel.Range#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Range;
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel-scripts!Excel.Range#merge:member(1)'
    summary: Merge the range cells into one region in the worksheet.
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: >-
            Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default
            value is false.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#moveTo:member(1)'
    summary: >-
      Moves cell values, formatting, and formulas from current range to the destination range, replacing the old
      information in those cells. The destination range will be expanded automatically if it is smaller than the current
      range. Any cells in the destination range that are outside of the original range's area are not changed.
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange Specifies the range to where the information in this range will be moved.
          type:
            - 'excel-scripts!Excel.Range#moveTo~0:complex'
  - uid: 'excel-scripts!Excel.Range#numberFormat:member'
    summary: >-
      Represents Excel's number format code for the given range. When setting number format to a range, the value
      argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it
      will be applied to all cells in the range.
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#numberFormatLocal:member'
    summary: >-
      Represents Excel's number format code for the given range, based on the language settings of the user.â€‹ When
      setting number format local to a range, the value argument can be either a single value (string) or a
      two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.â€‹ Excel
      does not perform any language or format coercion when getting or setting the `numberFormatLocal` property. Any
      returned text uses the locally-formatted strings based on the language specified in the system settings.
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#removeDuplicates:member(1)'
    summary: Removes duplicate values from the range specified by the columns.
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel-scripts!Excel.RemoveDuplicatesResult:class'
        description: The resulting object that contains the number of rows removed and the number of remaining unique rows.
      parameters:
        - id: columns
          description: >-
            The columns inside the range that may contain duplicates. At least one column needs to be specified.
            Zero-indexed.
          type:
            - 'number[]'
        - id: includesHeader
          description: True if the input data contains header. Default is false.
          type:
            - boolean
  - uid: 'excel-scripts!Excel.Range#replaceAll:member(1)'
    summary: Finds and replaces the given string based on the criteria specified within the current range.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): ClientResult<number>;'
      return:
        type:
          - 'excel-scripts!Excel.Range#replaceAll~0:complex'
        description: The number of replacements performed.
      parameters:
        - id: text
          description: String to find.
          type:
            - string
        - id: replacement
          description: String to replace the original with.
          type:
            - string
        - id: criteria
          description: Additional Replace Criteria.
          type:
            - 'excel-scripts!Excel.ReplaceCriteria:interface'
  - uid: 'excel-scripts!Excel.Range#rowCount:member'
    summary: Returns the total number of rows in the range. Read-only.
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#rowHidden:member'
    summary: Represents if all rows of the current range are hidden.
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.Range#rowIndex:member'
    summary: Returns the row number of the first cell in the range. Zero-indexed. Read-only.
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#select:member(1)'
    summary: Selects the specified range in the Excel UI.
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#set:member(1)'
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel-scripts!Excel.Range:class'
  - uid: 'excel-scripts!Excel.Range#setCellProperties:member(1)'
    summary: >-
      Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders,
      alignment, and so forth.
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellPropertiesData
          description: A 2D array that represents which properties to set in each cell.
          type:
            - 'excel-scripts!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel-scripts!Excel.Range#setColumnProperties:member(1)'
    summary: >-
      Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill,
      borders, alignment, and so forth.
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: An array that represents which properties to set in each column.
          type:
            - 'excel-scripts!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel-scripts!Excel.Range#setDirty:member(1)'
    summary: Set a range to be recalculated when the next recalculation occurs.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#setRowProperties:member(1)'
    summary: >-
      Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill,
      borders, alignment, and so forth.
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: An array that represents which properties to set in each row.
          type:
            - 'excel-scripts!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel-scripts!Excel.Range#showCard:member(1)'
    summary: Displays the card for an active cell if it has rich value content.
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#showGroupDetails:member(1)'
    summary: Show details of the row or column group.
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies whether to show details of grouped rows or grouped columns.
          type:
            - 'excel-scripts!Excel.GroupOption:enum'
  - uid: 'excel-scripts!Excel.Range#showGroupDetails:member(2)'
    summary: Show details of the row or column group.
    name: showGroupDetails(groupOptionStringString)
    fullName: showGroupDetails(groupOptionStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOptionStringString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionStringString
          description: Specifies whether to show details of grouped rows or grouped columns.
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel-scripts!Excel.Range#sort:member'
    summary: Represents the range sort of the current range. Read-only.
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel-scripts!Excel.RangeSort:class'
  - uid: 'excel-scripts!Excel.Range#style:member'
    summary: >-
      Represents the style of the current range. If the styles of the cells are inconsistent, null will be returned. For
      custom styles, the style name will be returned. For built-in styles, a string representing a value in the
      BuiltInStyle enum will be returned.
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'excel-scripts!Excel.Range#text:member'
    summary: >-
      Text values of the specified range. The Text value will not depend on the cell width. The \# sign substitution
      that happens in Excel UI will not affect the text value returned by the API. Read-only.
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel-scripts!Excel.Range#top:member'
    summary: 'Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range. Read-only.'
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#track:member(1)'
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for `context.trackedObjects.add(thisObject)`<!-- -->. If you are using this object across `.sync` calls and
      outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property
      or invoking a method on the object, you needed to have added the object to the tracked object collection when the
      object was first created.
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#ungroup:member(1)'
    summary: Ungroups columns and rows for an outline.
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Specifies how the range can be ungrouped by rows or columns.
          type:
            - 'excel-scripts!Excel.GroupOption:enum'
  - uid: 'excel-scripts!Excel.Range#ungroup:member(2)'
    summary: Ungroups columns and rows for an outline.
    name: ungroup(groupOptionStringString)
    fullName: ungroup(groupOptionStringString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOptionStringString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionStringString
          description: Specifies how the range can be ungrouped by rows or columns.
          type:
            - '"ByRows" | "ByColumns"'
  - uid: 'excel-scripts!Excel.Range#unmerge:member(1)'
    summary: Unmerge the range cells into separate cells.
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel-scripts!Excel.Range#untrack:member(1)'
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      `context.trackedObjects.remove(thisObject)`<!-- -->. Having many tracked objects slows down the host application,
      so please remember to free any objects you add, once you're done using them. You will need to call
      `context.sync()` before the memory release takes effect.
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel-scripts!Excel.Range:class'
        description: ''
  - uid: 'excel-scripts!Excel.Range#values:member'
    summary: >-
      Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean.
      Cells that contain an error will return the error string. When setting values to a range, the value argument can
      be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single
      value, it will be applied to all cells in the range.
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel-scripts!Excel.Range#valueTypes:member'
    summary: Represents the type of data of each cell. Read-only.
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel-scripts!Excel.Range#valueTypes~0:complex'
  - uid: 'excel-scripts!Excel.Range#width:member'
    summary: 'Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range. Read-only.'
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.Range#worksheet:member'
    summary: The worksheet containing the current range. Read-only.
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel-scripts!Excel.Worksheet:class'
references:
  - uid: 'excel-scripts!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel-scripts!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel-scripts!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel-scripts!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel-scripts!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel-scripts!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel-scripts!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel-scripts!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel-scripts!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel-scripts!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel-scripts!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel-scripts!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel-scripts!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.Range#getCellProperties~0:complex'
    name: 'ClientResult<CellProperties[][]>'
    fullName: 'Excel.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <
        fullName: <
      - uid: 'excel-scripts!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel-scripts!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel-scripts!Excel.Range#getColumnProperties~0:complex'
    name: 'ClientResult<ColumnProperties[]>'
    fullName: 'Excel.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <
        fullName: <
      - uid: 'excel-scripts!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel-scripts!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel-scripts!Excel.Range#getImage~0:complex'
    name: ClientResult<string>
    fullName: Excel.ClientResult<string>
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel-scripts!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.Range#getRowProperties~0:complex'
    name: 'ClientResult<RowProperties[]>'
    fullName: 'Excel.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <
        fullName: <
      - uid: 'excel-scripts!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel-scripts!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel-scripts!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel-scripts!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel-scripts!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel-scripts!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel-scripts!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel-scripts!Excel.GroupOption:enum'
    name: Excel.GroupOption
  - uid: 'excel-scripts!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel-scripts!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel-scripts!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel-scripts!Excel.Range#moveTo~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel-scripts!Excel.Range#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel-scripts!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel-scripts!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel-scripts!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel-scripts!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel-scripts!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel-scripts!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel-scripts!Excel.Worksheet:class'
    name: Excel.Worksheet
