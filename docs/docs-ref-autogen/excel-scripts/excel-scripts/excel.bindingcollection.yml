### YamlMime:UniversalReference
items:
  - uid: 'excel-scripts!Excel.BindingCollection:class'
    summary: |-
      Represents the collection of all the binding objects that are part of the workbook.

      \[Api set: ExcelApi 1.1\]
    name: Excel.BindingCollection
    fullName: Excel.BindingCollection
    langs:
      - typeScript
    type: class
    package: excel-scripts!
    children:
      - 'excel-scripts!Excel.BindingCollection#add:member(1)'
      - 'excel-scripts!Excel.BindingCollection#add:member(2)'
      - 'excel-scripts!Excel.BindingCollection#addFromNamedItem:member(1)'
      - 'excel-scripts!Excel.BindingCollection#addFromNamedItem:member(2)'
      - 'excel-scripts!Excel.BindingCollection#addFromSelection:member(1)'
      - 'excel-scripts!Excel.BindingCollection#addFromSelection:member(2)'
      - 'excel-scripts!Excel.BindingCollection#context:member'
      - 'excel-scripts!Excel.BindingCollection#count:member'
      - 'excel-scripts!Excel.BindingCollection#getCount:member(1)'
      - 'excel-scripts!Excel.BindingCollection#getItem:member(1)'
      - 'excel-scripts!Excel.BindingCollection#getItemAt:member(1)'
      - 'excel-scripts!Excel.BindingCollection#getItemOrNullObject:member(1)'
      - 'excel-scripts!Excel.BindingCollection#items:member'
      - 'excel-scripts!Excel.BindingCollection#load:member(1)'
      - 'excel-scripts!Excel.BindingCollection#toJSON:member(1)'
  - uid: 'excel-scripts!Excel.BindingCollection#add:member(1)'
    summary: |-
      Add a new binding to a particular Range.

      \[Api set: ExcelApi 1.3\]
    name: 'add(range, bindingType, id)'
    fullName: 'add(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full
            address, including the sheet name
          type:
            - 'excel-scripts!Excel.BindingCollection#add~0:complex'
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel-scripts!Excel.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#add:member(2)'
    summary: |-
      Add a new binding to a particular Range.

      \[Api set: ExcelApi 1.3\]
    name: 'add(range, bindingTypeStringString, id)'
    fullName: 'add(range, bindingTypeStringString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingTypeStringString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full
            address, including the sheet name
          type:
            - 'excel-scripts!Excel.BindingCollection#add~1:complex'
        - id: bindingTypeStringString
          description: Type of binding. See Excel.BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#addFromNamedItem:member(1)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      "InvalidReference" error will be returned.


      \[Api set: ExcelApi 1.3\]
    name: 'addFromNamedItem(name, bindingType, id)'
    fullName: 'addFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: Name from which to create binding.
          type:
            - string
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel-scripts!Excel.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#addFromNamedItem:member(2)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      "InvalidReference" error will be returned.


      \[Api set: ExcelApi 1.3\]
    name: 'addFromNamedItem(name, bindingTypeStringString, id)'
    fullName: 'addFromNamedItem(name, bindingTypeStringString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingTypeStringString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: name
          description: Name from which to create binding.
          type:
            - string
        - id: bindingTypeStringString
          description: Type of binding. See Excel.BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#addFromSelection:member(1)'
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the "InvalidReference"
      error will be returned.


      \[Api set: ExcelApi 1.3\]
    name: 'addFromSelection(bindingType, id)'
    fullName: 'addFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingType
          description: Type of binding. See Excel.BindingType.
          type:
            - 'excel-scripts!Excel.BindingType:enum'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#addFromSelection:member(2)'
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the "InvalidReference"
      error will be returned.


      \[Api set: ExcelApi 1.3\]
    name: 'addFromSelection(bindingTypeStringString, id)'
    fullName: 'addFromSelection(bindingTypeStringString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingTypeStringString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: bindingTypeStringString
          description: Type of binding. See Excel.BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name of binding.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel-scripts!Excel.RequestContext:class'
  - uid: 'excel-scripts!Excel.BindingCollection#count:member'
    summary: |-
      Returns the number of bindings in the collection. Read-only.

      \[Api set: ExcelApi 1.1\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.BindingCollection#getCount:member(1)'
    summary: |-
      Gets the number of bindings in the collection.

      \[Api set: ExcelApi 1.4\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel-scripts!Excel.BindingCollection#getCount~0:complex'
        description: ''
  - uid: 'excel-scripts!Excel.BindingCollection#getItem:member(1)'
    summary: |-
      Gets a binding object by ID.

      \[Api set: ExcelApi 1.1\]
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#getItemAt:member(1)'
    summary: |-
      Gets a binding object based on its position in the items array.

      \[Api set: ExcelApi 1.1\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type:
            - number
  - uid: 'excel-scripts!Excel.BindingCollection#getItemOrNullObject:member(1)'
    summary: |-
      Gets a binding object by ID. If the binding object does not exist, will return a null object.

      \[Api set: ExcelApi 1.4\]
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      return:
        type:
          - 'excel-scripts!Excel.Binding:class'
        description: ''
      parameters:
        - id: id
          description: Id of the binding object to be retrieved.
          type:
            - string
  - uid: 'excel-scripts!Excel.BindingCollection#items:member'
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type:
          - 'excel-scripts!Excel.BindingCollection#items~0:complex'
  - uid: 'excel-scripts!Excel.BindingCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      return:
        type:
          - 'excel-scripts!Excel.BindingCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel-scripts!Excel.BindingCollection#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.BindingCollection` object is an API object, the `toJSON` method returns
      a plain JavaScript object (typed as `Excel.Interfaces.BindingCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's items.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type:
          - 'excel-scripts!Excel.Interfaces.BindingCollectionData:interface'
        description: ''
references:
  - uid: 'excel-scripts!Excel.Binding:class'
    name: Excel.Binding
  - uid: 'excel-scripts!Excel.BindingCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.BindingType:enum'
    name: Excel.BindingType
  - uid: 'excel-scripts!Excel.BindingCollection#add~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel-scripts!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel-scripts!Excel.BindingCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel-scripts!Excel.BindingCollection#items~0:complex'
    name: 'Excel.Binding[]'
    fullName: 'Excel.Binding[]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Binding:class'
        name: Excel.Binding
        fullName: Excel.Binding
      - name: '[]'
        fullName: '[]'
  - uid: 'excel-scripts!Excel.BindingCollection:class'
    name: Excel.BindingCollection
  - uid: 'excel-scripts!Excel.Interfaces.BindingCollectionData:interface'
    name: Excel.Interfaces.BindingCollectionData
