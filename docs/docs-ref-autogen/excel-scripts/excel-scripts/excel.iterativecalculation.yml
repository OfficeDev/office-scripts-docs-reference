### YamlMime:UniversalReference
items:
  - uid: 'excel-scripts!Excel.IterativeCalculation:class'
    summary: Represents the Iterative Calculation settings.
    name: Excel.IterativeCalculation
    fullName: Excel.IterativeCalculation
    langs:
      - typeScript
    type: class
    package: excel-scripts!
    children:
      - 'excel-scripts!Excel.IterativeCalculation#context:member'
      - 'excel-scripts!Excel.IterativeCalculation#enabled:member'
      - 'excel-scripts!Excel.IterativeCalculation#load:member(1)'
      - 'excel-scripts!Excel.IterativeCalculation#load:member(2)'
      - 'excel-scripts!Excel.IterativeCalculation#maxChange:member'
      - 'excel-scripts!Excel.IterativeCalculation#maxIteration:member'
      - 'excel-scripts!Excel.IterativeCalculation#set:member(1)'
      - 'excel-scripts!Excel.IterativeCalculation#toJSON:member(1)'
  - uid: 'excel-scripts!Excel.IterativeCalculation#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel-scripts!Excel.RequestContext:class'
  - uid: 'excel-scripts!Excel.IterativeCalculation#enabled:member'
    summary: True if Excel will use iteration to resolve circular references.
    name: enabled
    fullName: enabled
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enabled: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel-scripts!Excel.IterativeCalculation#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.IterativeCalculation;'
      return:
        type:
          - 'excel-scripts!Excel.IterativeCalculation:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
  - uid: 'excel-scripts!Excel.IterativeCalculation#load:member(2)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.IterativeCalculation;
      return:
        type:
          - 'excel-scripts!Excel.IterativeCalculation:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel-scripts!Excel.IterativeCalculation#maxChange:member'
    summary: Returns or sets the maximum amount of change between each iteration as Excel resolves circular references.
    name: maxChange
    fullName: maxChange
    langs:
      - typeScript
    type: property
    syntax:
      content: 'maxChange: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.IterativeCalculation#maxIteration:member'
    summary: Returns or sets the maximum number of iterations that Excel can use to resolve a circular reference.
    name: maxIteration
    fullName: maxIteration
    langs:
      - typeScript
    type: property
    syntax:
      content: 'maxIteration: number;'
      return:
        type:
          - number
  - uid: 'excel-scripts!Excel.IterativeCalculation#set:member(1)'
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.IterativeCalculation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel-scripts!Excel.IterativeCalculation:class'
  - uid: 'excel-scripts!Excel.IterativeCalculation#toJSON:member(1)'
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.IterativeCalculation object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Excel.Interfaces.IterativeCalculationData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.IterativeCalculationData;'
      return:
        type:
          - 'excel-scripts!Excel.Interfaces.IterativeCalculationData:interface'
        description: ''
references:
  - uid: 'excel-scripts!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel-scripts!Excel.IterativeCalculation:class'
    name: Excel.IterativeCalculation
  - uid: 'excel-scripts!Excel.Interfaces.IterativeCalculationData:interface'
    name: Excel.Interfaces.IterativeCalculationData
