### YamlMime:UniversalReference
items:
  - uid: 'excel-scripts!Excel.SettingCollection:class'
    summary: >-
      Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to
      per file and add-in (task-pane or content) combination.
    name: Excel.SettingCollection
    fullName: Excel.SettingCollection
    langs:
      - typeScript
    type: class
    package: excel-scripts!
    children:
      - 'excel-scripts!Excel.SettingCollection#add:member(1)'
      - 'excel-scripts!Excel.SettingCollection#context:member'
      - 'excel-scripts!Excel.SettingCollection#getCount:member(1)'
      - 'excel-scripts!Excel.SettingCollection#getItem:member(1)'
      - 'excel-scripts!Excel.SettingCollection#getItemOrNullObject:member(1)'
      - 'excel-scripts!Excel.SettingCollection#items:member'
      - 'excel-scripts!Excel.SettingCollection#load:member(1)'
  - uid: 'excel-scripts!Excel.SettingCollection#add:member(1)'
    summary: Sets or adds the specified setting to the workbook.
    name: 'add(key, value)'
    fullName: 'add(key, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(key: string, value: string | number | boolean | Date | Array<any> | any): Excel.Setting;'
      return:
        type:
          - 'excel-scripts!Excel.Setting:class'
        description: ''
      parameters:
        - id: key
          description: The Key of the new setting.
          type:
            - string
        - id: value
          description: The Value for the new setting.
          type:
            - 'excel-scripts!Excel.SettingCollection#add~0:complex'
  - uid: 'excel-scripts!Excel.SettingCollection#context:member'
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel-scripts!Excel.RequestContext:class'
  - uid: 'excel-scripts!Excel.SettingCollection#getCount:member(1)'
    summary: Gets the number of Settings in the collection.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel-scripts!Excel.SettingCollection#getCount~0:complex'
        description: ''
  - uid: 'excel-scripts!Excel.SettingCollection#getItem:member(1)'
    summary: Gets a Setting entry via the key.
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Setting;'
      return:
        type:
          - 'excel-scripts!Excel.Setting:class'
        description: ''
      parameters:
        - id: key
          description: Key of the setting.
          type:
            - string
  - uid: 'excel-scripts!Excel.SettingCollection#getItemOrNullObject:member(1)'
    summary: 'Gets a Setting entry via the key. If the Setting does not exist, will return a null object.'
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Setting;'
      return:
        type:
          - 'excel-scripts!Excel.Setting:class'
        description: ''
      parameters:
        - id: key
          description: The key of the setting.
          type:
            - string
  - uid: 'excel-scripts!Excel.SettingCollection#items:member'
    summary: Gets the loaded child items in this collection.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Setting[];'
      return:
        type:
          - 'excel-scripts!Excel.SettingCollection#items~0:complex'
  - uid: 'excel-scripts!Excel.SettingCollection#load:member(1)'
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SettingCollection;'
      return:
        type:
          - 'excel-scripts!Excel.SettingCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type:
            - 'string | string[]'
references:
  - uid: 'excel-scripts!Excel.Setting:class'
    name: Excel.Setting
  - uid: 'excel-scripts!Excel.SettingCollection#add~0:complex'
    name: string | number | boolean | Date | Array<any> | any
    fullName: string | number | boolean | Date | Array<any> | any
    spec.typeScript:
      - name: 'string | number | boolean | '
        fullName: 'string | number | boolean | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | '
        fullName: ' | '
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <any> | any
        fullName: <any> | any
  - uid: 'excel-scripts!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel-scripts!Excel.SettingCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel-scripts!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel-scripts!Excel.SettingCollection#items~0:complex'
    name: 'Excel.Setting[]'
    fullName: 'Excel.Setting[]'
    spec.typeScript:
      - uid: 'excel-scripts!Excel.Setting:class'
        name: Excel.Setting
        fullName: Excel.Setting
      - name: '[]'
        fullName: '[]'
  - uid: 'excel-scripts!Excel.SettingCollection:class'
    name: Excel.SettingCollection
