'ExcelScript.AutoFillType:enum':
  - |-
    /**
     * This script uses the autofill feature to complete a table with days of the month.
     * See https://support.microsoft.com/74e31bdd-d993-45da-aa82-35a236c5b5db
     * for examples of autofill scenarios.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current, active worksheet.
      let currentWorksheet = workbook.getActiveWorksheet();

      // Get the data range that shows the pattern.
      let dataRange = currentWorksheet.getRange("C2:C3");

      // Autofill the connected range. C2:C3 are filled in with dates. C4:C54 are blank.
      dataRange.autoFill("C2:C54", ExcelScript.AutoFillType.fillDays);
    }
'ExcelScript.AutoFilter:interface':
  - |-
    /**
     * This script creates an autofilter on the worksheet that filters out rows based on column values. 
     * The autofilter filters to only include rows that have a value in column C in the lowest 10 values 
     * (of column C values).
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const dataRange = currentSheet.getUsedRange();

      // Add a filter that will only show the rows with the lowest 10 values in column C
      // (index 2, assuming the used range spans from at least A:C).
      currentSheet.getAutoFilter().apply(dataRange, 2, {
        criterion1: "10",
        filterOn: ExcelScript.FilterOn.bottomItems
      });
    }
'ExcelScript.AutoFilter#clearCriteria:member(1)':
  - |-
    /**
     * This script clears any applied criteria from the worksheet's autofilter.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();

      // Clear all the criteria currently applied to the autofilter.
      currentSheet.getAutoFilter().clearCriteria();
    }
'ExcelScript.Chart#setName:member(1)':
  - |-
    /**
     * This sample creates a column-clustered chart based on the current worksheet's data.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the data range.
      let range = selectedSheet.getUsedRange();

      // Insert a chart using the data on the current worksheet.
      let chart = selectedSheet.addChart(ExcelScript.ChartType.columnClustered, range);

      // Name the chart for easy access in other scripts.
      chart.setName("ColumnChart");
    }
'ExcelScript.Chart#setPosition:member(1)':
  - |-
    /**
     * This sample moves an existing chart to a specific place on the worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();
      
      // Get an existing chart named "ColumnChart".
      let chart = selectedSheet.getChart("ColumnChart");

      // Place the chart over the range "F1:L13".
      chart.setPosition("F1", "L13");
    }
'ExcelScript.ChartSeries#getName:member(1)':
  - |-
    /**
     * This sample logs the names of each of the chart series in a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let chart = selectedSheet.getChart("ColumnClusteredChart");

      // Log the name of each chart series in the chart.
      let seriesList = chart.getSeries();
      seriesList.forEach((series) => {
        console.log(series.getName());
      });
    }
'ExcelScript.Chart#getPlotBy:member(1)':
  - |-
    /**
     * This sample performs the "Switch Row/Column" action on a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let columnClusteredChart = selectedSheet.getChart("ColumnClusteredChart");
      
      // Switch the row and column for the chart's data source.
      if (columnClusteredChart.getPlotBy() === ExcelScript.ChartPlotBy.columns) {
        // If the chart is grouped by columns, switch it to rows.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.rows);
      } else {
        // If the chart is grouped by rows, switch it to columns.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.columns);
      }
    }
'ExcelScript.Chart#getSeries:member(1)':
  - |-
    /**
     * This sample sets the overlap of the columns in a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let chart = selectedSheet.getChart("ColumnClusteredChart");

      // Set the overlap of every column of each series within a category.
      let seriesList = chart.getSeries();
      seriesList.forEach((series) => {
        // An overlap of 25 means the columns have 25% of their length overlapping with the adjacent columns in the same category.
        series.setOverlap(25);
      });
    }
'ExcelScript.Chart#setPlotBy:member(1)':
 - |-
    /**
     * This sample performs the "Switch Row/Column" action on a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let columnClusteredChart = selectedSheet.getChart("ColumnClusteredChart");
      
      // Switch the row and column for the chart's data source.
      if (columnClusteredChart.getPlotBy() === ExcelScript.ChartPlotBy.columns) {
        // If the chart is grouped by columns, switch it to rows.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.rows);
      } else {
        // If the chart is grouped by rows, switch it to columns.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.columns);
      }
    }
'ExcelScript.ChartPlotBy:enum':
  - |-
    /**
     * This sample performs the "Switch Row/Column" action on a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let columnClusteredChart = selectedSheet.getChart("ColumnClusteredChart");
      
      // Switch the row and column for the chart's data source.
      if (columnClusteredChart.getPlotBy() === ExcelScript.ChartPlotBy.columns) {
        // If the chart is grouped by columns, switch it to rows.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.rows);
      } else {
        // If the chart is grouped by rows, switch it to columns.
        columnClusteredChart.setPlotBy(ExcelScript.ChartPlotBy.columns);
      }
    }
'ExcelScript.ChartSeries#setOverlap:member(1)':
  - |-
    /**
     * This sample sets the overlap of the columns in a chart named "ColumnClusteredChart".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get an existing chart named "ColumnClusteredChart".
      let chart = selectedSheet.getChart("ColumnClusteredChart");

      // Set the overlap of every column of each series within a category.
      let seriesList = chart.getSeries();
      seriesList.forEach((series) => {
        // An overlap of 25 means the columns have 25% of their length overlapping with the adjacent columns in the same category.
        series.setOverlap(25);
      });
    }
'ExcelScript.ClearApplyTo:enum':
  - |-
    /**
     * This script removes any extra formatting that's been applied to a table. 
     * This leaves only the base table style effects.
     * Any formatting outside of the table will be left as is.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first table on the current worksheet.
      let worksheet = workbook.getActiveWorksheet();
      let table = worksheet.getTables()[0];

      // Get the range used by the table.
      let range = table.getRange();

      // Clear all the formatting that is not applied by the table and the table style.
      range.clear(ExcelScript.ClearApplyTo.formats);
    }
'ExcelScript.CommentRichContent#richContent:member':
  - |-
    /**
     * This sample finds overdue work items in a table and 
     * lets their owners know with a comment that uses an @mention.
     * 
     * This assumes the worksheet has a table with the columns: 
     * "Work Item", "Project", "Owner", "Due Date"
     */
    function main(workbook: ExcelScript.Workbook) {
      let currentSheet = workbook.getActiveWorksheet();

      // Get the "Owner" column range and values.
      let table = currentSheet.getTables()[0];
      let ownerColumnRange = table.getColumn("Owner").getRangeBetweenHeaderAndTotal();
      let ownerColumnValues = ownerColumnRange.getValues();

      // Get the "Due Date" column range and values.
      let dueDateColumnRange = table.getColumn("Due Date").getRangeBetweenHeaderAndTotal();
      let dueDateColumnValues = dueDateColumnRange.getValues();

      // Look for overdue work items.
      for (let row = 0; row < dueDateColumnValues.length; row++) {

        /* Convert the Excel date into a JavaScript date. 
         * This is necessary because Excel and JavaScript store
         * their dates as different numerical values.
         */
        let dueDate = new Date(Math.round((dueDateColumnValues[row][0] as number - 25569) * 86400 * 1000));

        // Check if the current date is greater than the due date.
        if (Date.now() > dueDate.valueOf()) {

          /* Create a CommentMention object for the comment,
           * based on the work item's owner.
           *
           * A CommentMention's properties are:
           * `name`: The name of the person being mentioned.
           * `id`: The index of this mention in the comment.
           * `email`: The email address of the person being mentioned. 
           *          In this sample, "Owner: is also the user name for the email.
           */
          let mention = {
            name: ownerColumnValues[row][0],
            id: 0,
            email: ownerColumnValues[row][0] + "@contoso.com"
          };

          /* Create the comment. 
           * The `<at id="0">` syntax embeds the mention in the comment text. 
           * The name is displayed in the comment, 
           * while an email is sent to the given address.
           *
           * The addComment parameters are:
           * `cellAddress`: The location of the comment.
           * `content`: The text of the comment and any embedded mentions.
           * `contentType`: The type of comment ("Mention" or "Plain").
           */
          currentSheet.addComment(
            dueDateColumnRange.getCell(row, 0),
            {
              richContent: '<at id="0">' + mention.name + "</at> - Your work item is overdue.",
              mentions: [mention]
            },
            ExcelScript.ContentType.mention
          );
        }
      }
    }
'ExcelScript.ConditionalFormat#getColorScale:member(1)':
  - |-
    /**
     * This script applies a red, white, and blue color scale to the selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected range.
      let selectedRange = workbook.getSelectedRange();

      // Create a new conditional formatting object by adding one to the range.
      let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);

      // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.
      conditionalFormatting.getColorScale().setCriteria({
        minimum: {
          color:"#F8696B", /* A pale red. */
          type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue
        },
        midpoint: {
          color: "#FCFCFF", /* Slightly off-white. */
          formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile
        },
        maximum: {
          color: "#5A8AC6", /* A pale blue. */
          type:ExcelScript.ConditionalFormatColorCriterionType.highestValue
        }
      });
    }
'ExcelScript.ConditionalFormat#getCustom:member(1)':
  - |-
    /**
     * This script applies a custom conditional formatting to the selected range.
     * A light-green fill is applied to a cell if the value is larger than the value in the row's previous column.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected cells.
      let selectedRange = workbook.getSelectedRange();

      // Apply a rule for positive change from the previous column.
      let positiveChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);
      positiveChange.getCustom().getFormat().getFill().setColor("lightgreen");
      positiveChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}>${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);
    }
'ExcelScript.ConditionalFormatColorCriterionType:enum':
  - |-
    /**
     * This script applies a red, white, and blue color scale to the selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected range.
      let selectedRange = workbook.getSelectedRange();

      // Create a new conditional formatting object by adding one to the range.
      let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);

      // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.
      conditionalFormatting.getColorScale().setCriteria({
        minimum: {
          color:"#F8696B", /* A pale red. */
          type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue
        },
        midpoint: {
          color: "#FCFCFF", /* Slightly off-white. */
          formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile
        },
        maximum: {
          color: "#5A8AC6", /* A pale blue. */
          type:ExcelScript.ConditionalFormatColorCriterionType.highestValue
        }
      });
    }
'ExcelScript.ConditionalFormatType:enum':
  - |-
    /**
     * This script applies a red, white, and blue color scale to the selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected range.
      let selectedRange = workbook.getSelectedRange();

      // Create a new conditional formatting object by adding one to the range.
      let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);

      // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.
      conditionalFormatting.getColorScale().setCriteria({
        minimum: {
          color:"#F8696B", /* A pale red. */
          type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue
        },
        midpoint: {
          color: "#FCFCFF", /* Slightly off-white. */
          formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile
        },
        maximum: {
          color: "#5A8AC6", /* A pale blue. */
          type:ExcelScript.ConditionalFormatColorCriterionType.highestValue
        }
      });
    }
'ExcelScript.ConditionalTopBottomRule:interface':
  - |-
    /**
     * This sample applies conditional formatting to the currently used range in the worksheet. 
     * The conditional formatting is a pink fill for the 5 lowest values.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the used range in the worksheet.
      let range = selectedSheet.getUsedRange();

      // Set the fill color to pink for the lowest 5 values in the range.
      let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
      conditionalFormat.getTopBottom().getFormat().getFill().setColor("pink");
      conditionalFormat.getTopBottom().setRule({
        rank: 5, /* The numerical threshold. */
        type: ExcelScript.ConditionalTopBottomCriterionType.bottomItems /* The type of the top/bottom condition. */
      });
    }
'ExcelScript.CustomConditionalFormat:interface':
  - |-
    /**
     * This script applies a custom three-color conditional formatting to the selected range.
     * The three colors represent positive, negative, or no changes from the values in the previous column.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected cells.
      let selectedRange = workbook.getSelectedRange();

      // Apply a rule for positive change from the previous column.
      let positiveChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);
      positiveChange.getCustom().getFormat().getFill().setColor("lightgreen");
      positiveChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}>${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);

      // Apply a rule for negative change from the previous column.
      let negativeChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);
      negativeChange.getCustom().getFormat().getFill().setColor("pink");
      negativeChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}<${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);

      // Apply a rule for no change from the previous column.
      let noChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);
      noChange.getCustom().getFormat().getFill().setColor("lightyellow");
      noChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}=${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);
    }
'ExcelScript.DataValidation#getType:member(1)':
  - |-
    /**
     * This sample reads and logs the data validation type of the currently selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the currently selected range.
      let range = workbook.getSelectedRange();

      // Get the type (`DataValidationType`) of data validation applied to the range.
      let validationType = range.getDataValidation().getType();

      /*
       * Log the data validation type.
       * If the range has a single value, it logs that type.
       * If the range doesn't have data validation applied, it logs "None".
       * If the range has multiple different types of data validation, it logs "Inconsistent" or "MixedCriteria".
       */
      console.log(validationType.toString());
    }
'ExcelScript.DataValidationType:enum':
  - |-
    /**
     * This sample reads and logs the data validation type of the currently selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the currently selected range.
      let range = workbook.getSelectedRange();

      // Get the type (`DataValidationType`) of data validation applied to the range.
      let validationType = range.getDataValidation().getType();

      /*
       * Log the data validation type.
       * If the range has a single value, it logs that type.
       * If the range doesn't have data validation applied, it logs "None".
       * If the range has multiple different types of data validation, it logs "Inconsistent" or "MixedCriteria".
       */
      console.log(validationType.toString());
    }
'ExcelScript.DeleteShiftDirection:enum':
  - |-
    /**
     * This sample creates a sample range, then deletes
     * "A1" using different DeleteShiftDirection values.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Add sample data to better visualize the delete changes.
      const currentSheet = workbook.getActiveWorksheet();
      currentSheet.getRange("A1:D4").setValues([
        [1,2,3,4],
        [5,6,7,8],
        [9,10,11,12],
        [13,14,15,16]]);

      // Delete A1 and shift the cells from the right to fill the space.
      // The value being deleted is 1.
      currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.left);

      // Delete A1 and shift the cells from the bottom to fill the space.
      // The value being deleted is 2.
      currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.up);

      // Log the sample range. The values should be:
      /*
        5, 3, 4, "",
        9, 6, 7, 8,
        13, 10, 11, 12,
        "", 14, 15, 16
      */
      console.log(currentSheet.getRange("A1:D4").getValues()); 
    }
'ExcelScript.Filter#applyValuesFilter:member(1)':
  - |-
    /**
     * This script applies a filter to a table so that it only shows rows with "Needs Review" in the "Type" column.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first table in the workbook.
      const table = workbook.getTables()[0];

      // Apply the filter to the "Type" column.
      const typeColumn = table.getColumnByName("Type");
      typeColumn.getFilter().applyValuesFilter(["Needs Review"]);
    }
'ExcelScript.KeyboardDirection:enum':
  - |-
    /**
     * This script makes the font bold on all the contiguous cells between 
     * A1 and the bottom of the used range of the first column.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get every cell that's used between A1 and the end of the column.
      // This recreates the Ctrl+Shift+Down arrow key behavior.
      let firstCell = selectedSheet.getRange("A1");
      let firstColumn = firstCell.getExtendedRange(ExcelScript.KeyboardDirection.down);

      // Set the font to bold in that range.
      firstColumn.getFormat().getFont().setBold(true);
    }
'ExcelScript.PivotField#applyFilter:member(1)':
  - |-
    /**
     * This script applies a PivotValueFilter to the first row hierarchy in the PivotTable.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the PivotTable on the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let pivotTable = sheet.getPivotTables()[0];

      // Get the first row hierarchy to use as the field which gets filtered.
      let rowHierarchy = pivotTable.getRowHierarchies()[0];

      // Get the first data hierarchy to use as the values for filtering the rows.
      let dataHierarchy = pivotTable.getDataHierarchies()[0];

      // Create a filter that excludes values greater than 500.
      let filter: ExcelScript.PivotValueFilter = {
        condition: ExcelScript.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: dataHierarchy.getName()
      };

      // Apply the filter.
      rowHierarchy.getPivotField(rowHierarchy.getName()).applyFilter({
        valueFilter: filter
      });
    }
'ExcelScript.PivotFilters#valueFilter:member':
  - |-
    /**
     * This script applies a PivotValueFilter to the first row hierarchy in the PivotTable.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the PivotTable on the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let pivotTable = sheet.getPivotTables()[0];

      // Get the first row hierarchy to use as the field which gets filtered.
      let rowHierarchy = pivotTable.getRowHierarchies()[0];

      // Get the first data hierarchy to use as the values for filtering the rows.
      let dataHierarchy = pivotTable.getDataHierarchies()[0];

      // Create a filter that excludes values greater than 500.
      let filter: ExcelScript.PivotValueFilter = {
        condition: ExcelScript.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: dataHierarchy.getName()
      };

      // Apply the filter.
      rowHierarchy.getPivotField(rowHierarchy.getName()).applyFilter({
        valueFilter: filter
      });
    }
'ExcelScript.PivotHierarchy:interface':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to a new worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];

      // Add the PivotTable to a new worksheet.
      let newSheet = workbook.addWorksheet("Pivot");
      let pivotTable = newSheet.addPivotTable("My Pivot", table, "A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.PivotLayout#getBodyAndTotalRange:member(1)':
  - |-
    /**
     * This sample finds the first PivotTable in the workbook and logs the values in the "Grand Total" cells.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first PivotTable in the workbook.
      let pivotTable = workbook.getPivotTables()[0];

      // Get the names of each data column in the PivotTable.
      let pivotColumnLabelRange = pivotTable.getLayout().getColumnLabelRange();

      // Get the range displaying the pivoted data.
      let pivotDataRange = pivotTable.getLayout().getBodyAndTotalRange();

      // Get the range with the "grand totals" for the PivotTable columns.
      let grandTotalRange = pivotDataRange.getLastRow();

      // Print each of the "Grand Totals" to the console.
      grandTotalRange.getValues()[0].forEach((column, columnIndex) => {
        console.log(`Grand total of ${pivotColumnLabelRange.getValues()[0][columnIndex]}: ${grandTotalRange.getValues()[0][columnIndex]}`);
        // Example log: "Grand total of Sum of Crates Sold Wholesale: 11000"
      });
    }
'ExcelScript.PivotTable:interface':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to a new worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];

      // Add the PivotTable to a new worksheet.
      let newSheet = workbook.addWorksheet("Pivot");
      let pivotTable = newSheet.addPivotTable("My Pivot", table, "A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.PivotTable#addColumnHierarchy:member(1)':
  - |-
    /**
     * This script adds a row hierarchy to the PivotTable on the current worksheet.
     * This assumes the source data has columns named 
     * "Type", "Classification", and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the PivotTable on the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let pivotTable = sheet.getPivotTables()[0];

      // Add the field "Type" to the PivotTable as a row hierarchy.
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));

      // Add the field "Classification" to the PivotTable as a column hierarchy.
      pivotTable.addColumnHierarchy(pivotTable.getHierarchy("Classification"));

      // Add the field "Sales" to the PivotTable as a data hierarchy.
      // By default, this displays the sums of the values in "Sales" based on the "Type".
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.PivotTable#addDataHierarchy:member(1)':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to a new worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];

      // Add the PivotTable to a new worksheet.
      let newSheet = workbook.addWorksheet("Pivot");
      let pivotTable = newSheet.addPivotTable("My Pivot", table, "A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.PivotTable#addRowHierarchy:member(1)':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to a new worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];

      // Add the PivotTable to a new worksheet.
      let newSheet = workbook.addWorksheet("Pivot");
      let pivotTable = newSheet.addPivotTable("My Pivot", table, "A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.PivotValueFilter:interface':
  - |-
    /**
     * This script applies a PivotValueFilter to the first row hierarchy in the PivotTable.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the PivotTable on the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let pivotTable = sheet.getPivotTables()[0];

      // Get the first row hierarchy to use as the field which gets filtered.
      let rowHierarchy = pivotTable.getRowHierarchies()[0];

      // Get the first data hierarchy to use as the values for filtering the rows.
      let dataHierarchy = pivotTable.getDataHierarchies()[0];

      // Create a filter that excludes values greater than 500.
      let filter: ExcelScript.PivotValueFilter = {
        condition: ExcelScript.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: dataHierarchy.getName()
      };

      // Apply the filter.
      rowHierarchy.getPivotField(rowHierarchy.getName()).applyFilter({
        valueFilter: filter
      });
    }
'ExcelScript.Range:interface':
  - |-
    /**
     * This script logs the address of the used range in the current worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current, active worksheet.
      let currentWorksheet = workbook.getActiveWorksheet();

      // Get the range containing all the cells with data or formatting.
      let usedRange = currentWorksheet.getUsedRange();

      // Log the range's address to the console.
      console.log(usedRange.getAddress());
    }
'ExcelScript.Range#addConditionalFormat:member(1)':
  - |-
    /**
     * This sample applies conditional formatting to the currently used range in the worksheet. 
     * The conditional formatting is a green fill for the top 10% of values.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the used range in the worksheet.
      let range = selectedSheet.getUsedRange();

      // Set the fill color to green for the top 10% of values in the range.
      let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
      conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
      conditionalFormat.getTopBottom().setRule({
        rank: 10, // The percentage threshold.
        type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
      });
    }
'ExcelScript.Range#autoFill:member(1)':
  - |-
    /**
     * This script uses the autofill feature to complete a table.
     * See https://support.microsoft.com/74e31bdd-d993-45da-aa82-35a236c5b5db
     * for examples of autofill scenarios.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current, active worksheet.
      let currentWorksheet = workbook.getActiveWorksheet();

      // Get the data range that shows the pattern.
      let dataRange = currentWorksheet.getRange("C2:C3");

      // Autofill the connected range. C2:C3 are filled in. C4:C14 are blank.
      // This uses the default behavior to match a pattern with the table's contents.
      dataRange.autoFill("C2:C14");
    }
'ExcelScript.Range#calculate:member(1)':
  - |-
    /**
     * This script recalculates the used range of a specific worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Only recalculate if the calculation mode is not set to automatic.
      if (workbook.getApplication().getCalculationMode() !== ExcelScript.CalculationMode.automatic) {
        // Get the used range from a worksheet named "Monthly Report".
        let sheet = workbook.getWorksheet("Monthly Report");
        let range = sheet.getUsedRange();
        console.log(`Calculating ${range.getAddress()}`);

        // Force all the used cells in that worksheet to calculate.
        sheet.getUsedRange().calculate();
      }
    }
'ExcelScript.Range#clear:member(1)':
  - |-
    /**
     * This script removes all the formatting from the selected range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the selected range.
      let range = workbook.getSelectedRange();

      // Clear all the formatting in that range.
      range.clear(ExcelScript.ClearApplyTo.formats);
    }
'ExcelScript.Range#copyFrom:member(1)':
  - |-
    /**
     * This script copies a table from one worksheet to a new worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the worksheet named "TableTemplate".
      let base = workbook.getWorksheet("TableTemplate");
      
      // Get the range to be copied based on the first table.
      let tableRange = base.getTables()[0].getRange();

      // Get the area in a new worksheet for the new table.
      let newWorksheet = workbook.addWorksheet();
      let newRange = newWorksheet.getRangeByIndexes(0,0, tableRange.getRowCount(), tableRange.getColumnCount());

      // Copy the existing data into the new range.
      newRange.copyFrom(tableRange);
    }
'ExcelScript.Range#delete:member(1)':
  - |-
    /**
     * This sample creates a sample range, then deletes
     * "A1" using different DeleteShiftDirection values.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Add sample data to better visualize the delete changes.
      const currentSheet = workbook.getActiveWorksheet();
      currentSheet.getRange("A1:D4").setValues([
        [1,2,3,4],
        [5,6,7,8],
        [9,10,11,12],
        [13,14,15,16]]);

      // Delete A1 and shift the cells from the right to fill the space.
      // The value being deleted is 1.
      currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.left);

      // Delete A1 and shift the cells from the bottom to fill the space.
      // The value being deleted is 2.
      currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.up);

      // Log the sample range. The values should be:
      /*
        5, 3, 4, "",
        9, 6, 7, 8,
        13, 10, 11, 12,
        "", 14, 15, 16
      */
      console.log(currentSheet.getRange("A1:D4").getValues()); 
    }
'ExcelScript.Range#flashFill:member(1)':
  - |-
    /**
     * This script uses the Flash Fill feature to complete a table.
     * See https://support.microsoft.com/office/3f9bcf1e-db93-4890-94a0-1578341f73f7
     * for the example table.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current, active worksheet.
      let currentWorksheet = workbook.getActiveWorksheet();

      // Get the data range with a pattern and cells to fill. C2 is filled in. C3:C6 are blank.
      let dataRange = currentWorksheet.getRange("C2:C6");

      // Flash fill the connected range. 
      dataRange.flashFill();
    }
'ExcelScript.Range#find:member(1)':
  - |-
    /**
     * This script searches through a table column and finds cells marked "no change". 
     * Those cells have "no change" replaced with the value from the cell to the left.
     * This script uses Range.find instead of Worksheet.findAll 
     * to limit the search to a specific range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the range of a table named "Orders".
      let table = workbook.getTable("Orders");
      let range = table.getColumnByName("March").getRange();

      // Find all cells with the value "no change".
      let cellToOverwrite = range.find("no change", { completeMatch: true });
      while (cellToOverwrite) {
        let cellToCopyFrom = cellToOverwrite.getOffsetRange(0,-1);
        cellToOverwrite.setValue(cellToCopyFrom.getValue());
        cellToOverwrite = range.find("no change", { completeMatch: true });
      }
    }
'ExcelScript.Range#getAddress:member(1)':
  - |-
    /**
     * This script logs the address of the used range in each worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Iterate over every worksheet in the workbook.
      workbook.getWorksheets().forEach((sheet) => {
        // Get the used range for a single worksheet.
        let range = sheet.getUsedRange();

        // Print the address of the used range to the console.
        console.log(range.getAddress());
      });
    }
'ExcelScript.Range#getBoundingRect:member(1)':
  - |-
    /**
     * This script gets the bounding range of two existing ranges and puts a border around it.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let sheet = workbook.getActiveWorksheet();

      // Create two range objects for the sample.
      let range1 = sheet.getRange("B2:C5");
      let range2 = sheet.getRange("D10:E15");

      // Get the rectangular range that fully includes both ranges.
      let boundingRectangle = range1.getBoundingRect(range2);

      // Add a border around the whole bounding range (B2:E15).
      let borders = boundingRectangle.getFormat().getBorders();
      format.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous); // Top border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous); // Bottom border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous); // Left border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous); // Right border
    }
'ExcelScript.Range#getColumnCount:member(1)':
  - |-
    /**
     * This sample provides the count of negative numbers that are present
     * in the used range of the current worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the working range.
      let usedRange = workbook.getActiveWorksheet().getUsedRange();
      let rowCount = usedRange.getRowCount();
      let columnCount = usedRange.getColumnCount();

      // Save the values locally to avoid repeatedly asking the workbook.
      let usedRangeValues = usedRange.getValues();

      // Start the negative number counter.
      let negativeCount = 0;

      // Iterate over the entire range looking for negative numbers.
      for (let i = 0; i < rowCount; i++) {
        for (let j = 0; j < columnCount; j++) {
          if (usedRangeValues[i][j] < 0) {
            negativeCount++;
          }
        }
      }

      // Log the negative number count to the console.
      console.log(negativeCount);
    }
'ExcelScript.Range#getDataValidation:member(1)':
  - |-
    /**
     * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the values for data validation.
      let selectedRange = workbook.getSelectedRange();
      let rangeValues = selectedRange.getValues();

      // Convert the values into a comma-delimited string.
      let dataValidationListString = "";
      rangeValues.forEach((rangeValueRow) => {
        rangeValueRow.forEach((value) => {
          dataValidationListString += value + ",";
        });
      });

      // Clear the old range.
      selectedRange.clear(ExcelScript.ClearApplyTo.contents);

      // Apply the data validation to the first cell in the selected range.
      let targetCell = selectedRange.getCell(0,0);
      let dataValidation = targetCell.getDataValidation();

      // Set the content of the drop-down list.
      dataValidation.setRule({
          list: {
            inCellDropDown: true,
            source: dataValidationListString
          }
        });
    }
'ExcelScript.Range#getExtendedRange:member(1)':
  - |-
    /**
     * This script makes the font bold on all the contiguous cells between 
     * A1 and the bottom of the used range of the first column.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get every cell that's used between A1 and the end of the column.
      // This recreates the Ctrl+Shift+Down arrow key behavior.
      let firstCell = selectedSheet.getRange("A1");
      let firstColumn = firstCell.getExtendedRange(ExcelScript.KeyboardDirection.down);

      // Set the font to bold in that range.
      firstColumn.getFormat().getFont().setBold(true);
    }
'ExcelScript.Range#getFormat:member(1)':
  - |-
    /**
     * This script gives the total row of a table a green color fill.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first table in the workbook.
      let table = workbook.getTables()[0];

      // Get the range for the total row of the table.
      let totalRange = table.getTotalRowRange();

      // Set the fill color to green.
      totalRange.getFormat().getFill().setColor("green");
    }
'ExcelScript.Range#getFormula:member(1)':
  - |-
    /*
     * This script sets a cell's formula, 
     * then displays how Excel stores the cell's formula and value separately.
     */
    function main(workbook: ExcelScript.Workbook) {
      let selectedSheet = workbook.getActiveWorksheet();

      // Set A1 to 2.
      let a1 = selectedSheet.getRange("A1");
      a1.setValue(2);

      // Set B1 to the formula =(2*A1), which should equal 4.
      let b1 = selectedSheet.getRange("B1")
      b1.setFormula("=(2*A1)");

      // Log the current results for `getFormula` and `getValue` at B1.
      console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
    }
'ExcelScript.Range#getHyperlink:member(1)':
  - |-
    /**
     * This sample clears all of the hyperlinks from the current worksheet
     * and removes the usual hyperlink formatting.
     */
    function main(workbook: ExcelScript.Workbook, sheetName: string = 'Sheet1') {
      // Get the active worksheet. 
      let sheet = workbook.getWorksheet(sheetName);

      // Get the used range to operate on.
      // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.
      const targetRange = sheet.getUsedRange(true);
      console.log(`Target Range to clear hyperlinks from: ${targetRange.getAddress()}`);

      const rowCount = targetRange.getRowCount();
      const colCount = targetRange.getColumnCount();
      console.log(`Searching for hyperlinks in ${targetRange.getAddress()} which contains ${(rowCount * colCount)} cells`);

      // Go through each individual cell looking for a hyperlink. 
      // This allows us to limit the formatting changes to only the cells with hyperlink formatting.
      let clearedCount = 0;
      for (let i = 0; i < rowCount; i++) {
        for (let j = 0; j < colCount; j++) {
          const cell = targetRange.getCell(i, j);
          const hyperlink = cell.getHyperlink();
          if (hyperlink) {
            cell.clear(ExcelScript.ClearApplyTo.hyperlinks);
            cell.getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.none);
            cell.getFormat().getFont().setColor('Black');
            clearedCount++;
          }
        }
      }

      console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);
    }
'ExcelScript.Range#getOffsetRange:member(1)':
  - |-
    /**
     * This script gets adjacent cells using relative references.
     * Note that if the active cell is on the top row, part of the script fails, 
     * because it references the cell above the currently selected one.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the currently active cell in the workbook.
      let activeCell = workbook.getActiveCell();
      console.log(`The active cell's address is: ${activeCell.getAddress()}`);

      // Get the cell to the right of the active cell and set its value and color.
      let rightCell = activeCell.getOffsetRange(0,1);
      rightCell.setValue("Right cell");
      console.log(`The right cell's address is: ${rightCell.getAddress()}`);
      rightCell.getFormat().getFont().setColor("Magenta");
      rightCell.getFormat().getFill().setColor("Cyan");

      // Get the cell to the above of the active cell and set its value and color.
      // Note that this operation will fail if the active cell is in the top row.
      let aboveCell = activeCell.getOffsetRange(-1, 0);
      aboveCell.setValue("Above cell");
      console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
      aboveCell.getFormat().getFont().setColor("White");
      aboveCell.getFormat().getFill().setColor("Black");
    }
'ExcelScript.Range#getRangeEdge:member(1)':
  - |-
    /**
     * This script adds the value "Total" after the end of the first column.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the last used cell at the end of the column.
      // This recreates the Ctrl+Down arrow key behavior.
      let firstCell = selectedSheet.getRange("A1");
      let firstColumn = selectedSheet.getRange("A1").getRangeEdge(ExcelScript.KeyboardDirection.down);
      let cellAfter = firstColumn.getOffsetRange(1, 0);

      // Set the value of the cell after the current end of the used column to "Total".
      cellAfter.setValue("Total");
    }
'ExcelScript.Range#getResizedRange:member(1)':
  - |-
    /**
     * This script copies the formatting in the active cell to the neighboring cells.
     * Note that this script only works when the active cell isn't on an edge of the worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the active cell.
      let activeCell = workbook.getActiveCell();

      // Get the cell that's one row above and one column to the left of the active cell.
      let cornerCell = activeCell.getOffsetRange(-1,-1);

      // Get a range that includes all the cells surrounding the active cell.
      let surroundingRange = cornerCell.getResizedRange(2, 2)

      // Copy the formatting from the active cell to the new range.
      surroundingRange.copyFrom(
        activeCell, /* The source range. */
        ExcelScript.RangeCopyType.formats /* What to copy. */
      );
    }
'ExcelScript.Range#getRowCount:member(1)':
  - |-
    /**
     * This sample provides the count of negative numbers that are present
     * in the used range of the current worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the working range.
      let usedRange = workbook.getActiveWorksheet().getUsedRange();
      let rowCount = usedRange.getRowCount();
      let columnCount = usedRange.getColumnCount();

      // Save the values locally to avoid repeatedly asking the workbook.
      let usedRangeValues = usedRange.getValues();

      // Start the negative number counter.
      let negativeCount = 0;

      // Iterate over the entire range looking for negative numbers.
      for (let i = 0; i < rowCount; i++) {
        for (let j = 0; j < columnCount; j++) {
          if (usedRangeValues[i][j] < 0) {
            negativeCount++;
          }
        }
      }

      // Log the negative number count to the console.
      console.log(negativeCount);
    }
'ExcelScript.Range#getSpecialCells:member(1)':
  - |-
    /**
     * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.
     */
    function main(workbook: ExcelScript.Workbook) {
        // Get the current used range.
        let range = workbook.getActiveWorksheet().getUsedRange();
        
        // Get all the blank cells.
        let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);
        // Highlight the blank cells with a yellow background.
        blankCells.getFormat().getFill().setColor("yellow");
    }
'ExcelScript.Range#getValue:member(1)':
  - |-
    /**
     * This sample reads the value of A1 and prints it to the console.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the value of cell A1.
      let range = selectedSheet.getRange("A1");
      
      // Print the value of A1.
      console.log(range.getValue());
    }
'ExcelScript.Range#insert:member(1)':
  - |-
    /**
     * This script inserts headers at the top of the worksheet.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      let currentSheet = workbook.getActiveWorksheet();

      // Create headers for 3 columns.
      let myHeaders = [["NAME", "ID", "ROLE"]];

      // Add a blank first row and push existing data down a row.
      let firstRow = currentSheet.getRange("1:1");
      firstRow.insert(ExcelScript.InsertShiftDirection.down);

      // Add the headers.
      currentSheet.getRange("A1:C1").setValues(myHeaders);
    }
'ExcelScript.Range#replaceAll:member(1)':
  - |-
    /**
     * This script searches through a table column and replaces  
     * cells marked "monthly special" with "parsnip".
     * This script uses Range.replaceAll instead of Worksheet.replaceAll
     * to limit the search to a specific range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the range of a table named "Orders".
      let table = workbook.getTable("Orders");
      let range = table.getColumnByName("Vegetable").getRange();
      
      // Change the value of any cells with the value "monthly special".
      range.replaceAll("monthly special", "parsnip", {completeMatch: true});
    }
'ExcelScript.Range#setFormula:member(1)':
  - |-
    /*
     * This script sets a cell's formula, 
     * then displays how Excel stores the cell's formula and value separately.
     */
    function main(workbook: ExcelScript.Workbook) {
      let selectedSheet = workbook.getActiveWorksheet();

      // Set A1 to 2.
      let a1 = selectedSheet.getRange("A1");
      a1.setValue(2);

      // Set B1 to the formula =(2*A1), which should equal 4.
      let b1 = selectedSheet.getRange("B1")
      b1.setFormula("=(2*A1)");

      // Log the current results for `getFormula` and `getValue` at B1.
      console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
    }
'ExcelScript.Range#setFormulas:member(1)':
  - |-
    /**
     * This script sets the values of a range, then adds SUM formulas to calcuate
     * the totals for each row of that range. 
     */
    function main(workbook: ExcelScript.Workbook)
    {
      let currentSheet = workbook.getActiveWorksheet();

      // Set the values of a range.
      let values = [[1, 2, 4], [8, 16, 32], [64, 128, 256]];
      let valueRange = currentSheet.getRange("A1:C3");
      valueRange.setValues(values);

      // Set the formulas of a range.
      let formulas = [["=SUM(A1:C1)"], ["=SUM(A2:C2)"], ["=SUM(A3:C3)"]];
      let formulaRange = currentSheet.getRange("D1:D3");
      formulaRange.setFormulas(formulas);
    }
'ExcelScript.Range#setHyperlink:member(1)':
  - |-
    /** 
     * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the active cell.
      let cell = workbook.getActiveCell();

      // Get the last worksheet in the workbook.
      // Note that this might be the current sheet if there's only one worksheet.
      let lastSheet = workbook.getLastWorksheet();

      // Get sheet name. 
      let linkedSheetName = lastSheet.getName();
      console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

      // Set the text for the hyperlink.
      let value = `Click to go to: ${linkedSheetName}`;

      // Create the hyperlink using that cell's value.
      cell.setHyperlink({
        textToDisplay: value.toString(),
        screenTip: `Navigate to ${linkedSheetName}`,
        documentReference: `${linkedSheetName}!A1`
      });
    }
'ExcelScript.Range#setNumberFormat:member(1)':
  - |-
    /**
     * This script sets the number format in column C to show the data as a percentage.
     */
    function main(workbook: ExcelScript.Workbook) {
      const  selectedSheet = workbook.getActiveWorksheet();
      
      // Set number format for column C to a percentage that rounds to the nearest percentage point.
      selectedSheet.getRange("C:C").setNumberFormat("0%");
    }
'ExcelScript.Range#setNumberFormatLocal:member(1)':
  - |-
    /**
     * This script sets the number format in column D to show the data as a percentage with a decimal.
     */
    function main(workbook: ExcelScript.Workbook) {
      const  selectedSheet = workbook.getActiveWorksheet();
      
      // Set number format for column D to a percentage that rounds to the nearest tenth of a percentage.
      selectedSheet.getRange("D:D").setNumberFormatLocal("0.0%");
    }
'ExcelScript.Range#setValues:member(1)':
  - |-
   /**
    * This sample inserts some pre-loaded data into a range.
    * It also shows how to get a range that fits the data.
    */
    function main(workbook: ExcelScript.Workbook) {
      // Get the active cell.
      let currentCell = workbook.getActiveCell();
      
      // Calculate the range needed to fit the given data.
      let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

      // Set range values to the data.
      targetRange.setValues(DATA);

      // Autofit the columns so the worksheet is readable. 
      targetRange.getFormat().autofitColumns();
    }

    /* 
     * This sample's data is in a static 2-dimensional array.
     * You could also get the input from other ranges or sources.
     * Note that each row must have the same number of columns to be valid. 
     */
    const DATA = [
      ['Date', 'Salesperson', 'Product', 'Amount']
      , ['3/2/2020', 'Anne', 'Pizza', '$1400']
      , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
      , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
      , ['3/24/2020', 'Anne', 'Pizza', '$750']
      , ['3/28/2020', 'Mark', 'Salads', '$510']
      , ['4/17/2020', 'Laura', 'Salads', '$900']
      , ['4/17/2020', 'Mariya', 'Salads', '$1600']
      , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
    ];
'ExcelScript.RangeBorder#setStyle:member(1)':
  - |-   
    /**
     * This script adds a border around the outside of a range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get a range from the current worksheet.
      let range = workbook.getActiveWorksheet().getRange("B2:E15");

      // Add a border around the whole bounding range.
      let format = range.getFormat();
      format.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous); // Top border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous); // Bottom border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous); // Left border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous); // Right border
    }
'ExcelScript.RangeCopyType:enum':
  - |-
    /**
     * This script copies all of the values from the current worksheet to a new worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the used range on the current worksheet.
      let usedRange = workbook.getActiveWorksheet().getUsedRange();

      // Create a new worksheet with a default name.
      let newSheet = workbook.addWorksheet();

      // Copy the values from the used range to the new worksheet.
      let copyType = ExcelScript.RangeCopyType.values; /* Change this to copy different information, such as formats. */
      let targetRange = newSheet.getRangeByIndexes(
        usedRange.getRowIndex(),
        usedRange.getColumnIndex(),
        usedRange.getRowCount(),
        usedRange.getColumnCount());
      targetRange.copyFrom(usedRange, copyType);

      // Switch the view to the new worksheet.
      newSheet.activate();
    }
'ExcelScript.RangeFill:interface':
  - |-
    /**
     * This script sets the fill color of the used range to green.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the used range of the current worksheet.
      let currentSheet = workbook.getActiveWorksheet();
      let usedRange = currentSheet.getUsedRange();

      // Get the RangeFill object.
      let fill = usedRange.getFormat().getFill();

      // Set the fill color to green.
      fill.setColor("green");
    }
'ExcelScript.RangeFill#clear:member(1)':
  - |-
    /**
     * This script removes all fill color and styles from the used range.
     */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the used range of the current worksheet.
      let currentSheet = workbook.getActiveWorksheet();
      let usedRange = currentSheet.getUsedRange();

      // Clear the fill from the entire range.
      usedRange.getFormat().getFill().clear();
    }
'ExcelScript.RangeFill#setColor:member(1)':
  - |-
    /**
     * This script sets the fill color of cell A2 to blue.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the range representing cell A2 from the current worksheet.
      let cell = workbook.getActiveWorksheet().getRange("A2");

      // Set the fill color to blue.
      cell.getFormat().getFill().setColor("blue");
    }
'ExcelScript.RangeFormat#getFill:member(1)':
  - |-
    /**
     * This script gives the total row of a table a green color fill.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first table in the workbook.
      let table = workbook.getTables()[0];

      // Get the range for the total row of the table.
      let totalRange = table.getTotalRowRange();

      // Set the fill color to green.
      totalRange.getFormat().getFill().setColor("green");
    }
'ExcelScript.RangeFormat#autofitColumns:member(1)':
  - |-
    /**
     * This script creates a new table from existing data and autofits the columns.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const usedRange = currentSheet.getUsedRange();

      // Create the table.
      const table = currentSheet.addTable(usedRange, true);

      // Format the table columns.
      table.getRange().getFormat().autofitColumns();
    }
'ExcelScript.RangeFormat#autofitRows:member(1)':
  - |-
    /**
     * This script creates a new table from existing data and autofits the rows.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const usedRange = currentSheet.getUsedRange();

      // Create the table.
      const table = currentSheet.addTable(usedRange, true);

      // Format the table rows.
      table.getRange().getFormat().autofitRows();
    }
'ExcelScript.RangeFormat#getColumnWidth:member(1)':
  - |-
    /**
     * This script doubles the column width for every column in the active worksheet's used range.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const usedRange = currentSheet.getUsedRange();

      // To optimize performance, get all the current row heights before setting them.
      let currentWidths = Array<number>(usedRange.getColumnCount());
      for (let column = 0; column < currentWidths.length; column++) {
        currentWidths[column] = usedRange.getColumn(column).getFormat().getColumnWidth();
      }

      // Set the new column widths.
      for (let column = 0; column < currentWidths.length; column++) {
        usedRange.getFormat().setColumnWidth(currentWidths[column] * 2);
      }
'ExcelScript.RangeFormat#getRowHeight:member(1)':
  - |-
    /**
     * This script doubles the row height for every row in the active worksheet's used range.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const usedRange = currentSheet.getUsedRange();

      // To optimize performance, get all the current row heights before setting them.
      let currentHeights = Array<number>(usedRange.getRowCount());
      for (let row = 0; row < currentHeights.length; row++) {
        currentHeights[row] = usedRange.getRow(row).getFormat().getRowHeight();
      }

      // Set the new row heights.
      for (let row = 0; row < currentHeights.length; row++) {
        usedRange.getFormat().setRowHeight(currentHeights[row] * 2);
      }
    }
'ExcelScript.RangeFormat#getRangeBorder:member(1)':
  - |-   
    /**
     * This script adds a border around the outside of a range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get a range from the current worksheet.
      let range = workbook.getActiveWorksheet().getRange("B2:E15");

      // Add a border around the whole bounding range.
      let format = range.getFormat();
      format.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous); // Top border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous); // Bottom border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous); // Left border
      format.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous); // Right border
    }
'ExcelScript.RangeFormat#setColumnWidth:member(1)':
  - |-
    /**
     * This script inserts a new column and sets that column's width to 100 pixels wide.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();

      // Insert a new column between the current B and C columns.
      const bcRange = currentSheet.getRange("C:C");
      const newColumn = bcRange.insert(ExcelScript.InsertShiftDirection.right);
      
      // Set the column width of the new column to 100 pixels.
      newColumn.getFormat().setColumnWidth(100);
    }
'ExcelScript.RangeFormat#setRowHeight:member(1)':
  - |-
    /**
     * This script inserts a new row and sets that row's width to 100 pixels tall.
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();

      // Insert a new row between the current 2 and 3 rows.
      const bcRange = currentSheet.getRange("3:3");
      const newRow = bcRange.insert(ExcelScript.InsertShiftDirection.down);
      
      // Set the row height of the new row to 100 pixels.
      newRow.getFormat().setRowHeight(100);
    }
'ExcelScript.ReplaceCriteria#completeMatch:member':
  - |-
    /**
     * This script normalizes the text in a column so that values don't include both "OK" and "okay". 
     * It replaces "OK" and all the case-based variants with "okay".
     */ 
    function main(workbook: ExcelScript.Workbook) {
      // Get the range representing column D.
      const currentSheet = workbook.getActiveWorksheet();
      const column = currentSheet.getRange("D:D");

      // Create a ReplaceCriteria object for the Range.replaceAll call.
      const criteria: ExcelScript.ReplaceCriteria = {
        completeMatch: true, /* Use a complete match to skip cells that already say "okay". */
        matchCase: false /* Ignore case when comparing strings. */
      };

      // Replace all instances of "ok" (case-insensitive) with "okay".
      column.replaceAll("ok", "okay", criteria);
    }
'ExcelScript.ReplaceCriteria#matchCase:member':
  - |-
    /**
     * This script replaces instances of "NA" with "North America", 
     * using the casing to ignore parts of words.
     */ 
    function main(workbook: ExcelScript.Workbook) {
      // Get the currently used range.
      const currentSheet = workbook.getActiveWorksheet();
      const usedRange = currentSheet.getUsedRange();

      // Create a ReplaceCriteria object for the Range.replaceAll call.
      const criteria: ExcelScript.ReplaceCriteria = {
        completeMatch: false, 
        matchCase: true /* Match with "NA market", not "navigate" */
      }

      // Replace all instances of "NA" (case-sensitive) with "North America".
      usedRange.replaceAll("NA", "North America", criteria);
    }
'ExcelScript.SearchCriteria:interface':
  - |-
    /**
     * This script searches for the next instance of the text "TK" on the current worksheet.
     * It then selects that cell and removes "TK" and all formatting from the cell.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the used range on the current worksheet.
      let range = workbook.getActiveWorksheet().getUsedRange();

      // Get the next cell that contains "TK".
      let tkCell = range.find("TK", {
        completeMatch: true, /* Don't match if the cell text only contains "TK" as part of another string. */
        matchCase: false,
        searchDirection: ExcelScript.SearchDirection.forward /* Start at the beginning of the range and go to later columns and rows. */
      });

      // Set focus on the found cell.
      tkCell.select();

      // Remove the "TK" text value from the cell, as well as any formatting that may have been added.
      tkCell.clear(ExcelScript.ClearApplyTo.all);
    }
'ExcelScript.SearchDirection:enum':
  - |-
    /**
     * This script searches for the next instance of the text "TK" on the current worksheet.
     * It then selects that cell and removes "TK" and all formatting from the cell.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the used range on the current worksheet.
      let range = workbook.getActiveWorksheet().getUsedRange();

      // Get the next cell that contains "TK".
      let tkCell = range.find("TK", {
        completeMatch: true, /* Don't match if the cell text only contains "TK" as part of another string. */
        matchCase: false,
        searchDirection: ExcelScript.SearchDirection.forward /* Start at the beginning of the range and go to later columns and rows. */
      });

      // Set focus on the found cell.
      tkCell.select();

      // Remove the "TK" text value from the cell, as well as any formatting that may have been added.
      tkCell.clear(ExcelScript.ClearApplyTo.all);
    }
'ExcelScript.Shape#getImage:member(1)':
  - |-
    /**
    * This script transfers an image from one worksheet to another.
    */
    function main(workbook: ExcelScript.Workbook)
    {
      // Get the worksheet with the image on it.
      let firstWorksheet = workbook.getWorksheet("FirstSheet");

      // Get the first image from the worksheet.
      // If a script added the image, you could add a name to make it easier to find.
      let image: ExcelScript.Image;
      firstWorksheet.getShapes().forEach((shape, index) => {
        if (shape.getType() === ExcelScript.ShapeType.image) {
          image = shape.getImage();
          return;
        }
      });

      // Copy the image to another worksheet.
      image.getShape().copyTo("SecondSheet");
    }
'ExcelScript.Table#getRange:member(1)':
  - |-
    /**
     * This script removes any extra formatting that's been applied to a table. 
     * This leaves only the base table style effects.
     * Any formatting outside of the table will be left as is.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first table on the current worksheet.
      let worksheet = workbook.getActiveWorksheet();
      let table = worksheet.getTables()[0];

      // Get the range used by the table.
      let range = table.getRange();

      // Clear all the formatting that is not applied by the table and the table style.
      range.clear(ExcelScript.ClearApplyTo.formats);
    }
'ExcelScript.TableSort#apply:member(1)':
  - |-
    /**
     * This sample creates a table from the current worksheet's used range, then sorts it based on the first column.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Create a table with the used cells.
      let usedRange = selectedSheet.getUsedRange();
      let newTable = selectedSheet.addTable(usedRange, true);

      // Sort the table using the first column.
      newTable.getSort().apply([{ key: 0, ascending: true }]);
    }
'ExcelScript.TopBottomConditionalFormat:interface':
  - |-
    /**
     * This sample applies conditional formatting to the currently used range in the worksheet. 
     * The conditional formatting is a green fill for the top 10% of values.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the used range in the worksheet.
      let range = selectedSheet.getUsedRange();

      // Set the fill color to green for the top 10% of values in the range.
      let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
      conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
      conditionalFormat.getTopBottom().setRule({
        rank: 10, /* The percentage threshold. */
        type: ExcelScript.ConditionalTopBottomCriterionType.topPercent /* The type of the top/bottom condition. */
      });
    }
'ExcelScript.ValueFilterCondition:enum':
  - |-
    /**
     * This script applies a PivotValueFilter to the first row hierarchy in the PivotTable.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the PivotTable on the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let pivotTable = sheet.getPivotTables()[0];

      // Get the first row hierarchy to use as the field which gets filtered.
      let rowHierarchy = pivotTable.getRowHierarchies()[0];

      // Get the first data hierarchy to use as the values for filtering the rows.
      let dataHierarchy = pivotTable.getDataHierarchies()[0];

      // Create a filter that excludes values greater than 500.
      let filter: ExcelScript.PivotValueFilter = {
        condition: ExcelScript.ValueFilterCondition.greaterThan,
        comparator: 500,
        value: dataHierarchy.getName()
      };

      // Apply the filter.
      rowHierarchy.getPivotField(rowHierarchy.getName()).applyFilter({
        valueFilter: filter
      });
    }
'ExcelScript.Workbook:interface':
  - |-
    /**
     * This script adds a new worksheet to the workbook, then switches to it.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Add a new worksheet with the default name.
      let worksheet = workbook.addWorksheet();

      // Switch focus to the new worksheet.
      worksheet.activate();
    }
'ExcelScript.Workbook#addPivotTable:member(1)':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to an existing worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     * It also assumes there is a worksheet named "PivotSheet".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];
      let pivotTable = workbook.addPivotTable("My Pivot", table, "PivotSheet!A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));
    }
'ExcelScript.Workbook#addWorksheet:member(1)':
  - |-
    /**
     * This script adds a new worksheet named "Data" to the workbook.
     * If a worksheet with that name already exists, the script logs a note.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Check if the "Data" worksheet already exists.
      if (workbook.getWorksheet("Data")) {
        console.log("The Data worksheet is already in the workbook.");
      } else {
        // Add a new worksheet.
        let worksheet = workbook.addWorksheet("Data");
      }
    }
'ExcelScript.Workbook#getActiveCell:member(1)':
  - |-
    /**
     * This script logs the value of the current active cell. 
     * If multiple cells are selected, the top-leftmost cell will be logged.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current active cell in the workbook.
      let cell = workbook.getActiveCell();
      console.log(`The current cell's value is ${cell.getValue()}`);
    }
'ExcelScript.Workbook#getName:member(1)':
  - |-
    /**
     * This script logs the name of the workbook without the ".xlsx" extension.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the workbook's name.
      let name = workbook.getName();

      // Remove the file extension.
      name = name.substring(0, name.lastIndexOf(".xlsx"));

      // Display the name in the console.
      console.log(name);
    }
'ExcelScript.Workbook#getWorksheet:member(1)':
  - |-
    /**
     * This script switches the active view to a worksheet named "Data", if it exists.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Check if the "Data" worksheet exists.
      let dataWorksheet = workbook.getWorksheet("Data");
      if (dataWorksheet) {
        // Switch to the "Data" worksheet.
        dataWorksheet.activate();
      } else {
        console.log(`No worksheet named "Data" in this workbook.`);
      }
    }
'ExcelScript.Workbook#getWorksheets:member(1)':
  - |-
    /**
     * This script logs the names of all the worksheets in the workbook.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get all the worksheets in the workbook. 
      let sheets = workbook.getWorksheets();

      // Get a list of all the worksheet names.
      let names = sheets.map ((sheet) => sheet.getName());

      // Write in the console all the worksheet names and the total count.
      console.log(names);
      console.log(`Total worksheets inside of this workbook: ${sheets.length}`);
    }
'ExcelScript.Worksheet:interface':
  - |-
    /**
     * This script creates a new worksheet named "Plum" and sets its tab color to purple.
     */
    function main(workbook: ExcelScript.Workbook) {
      const newSheet = workbook.addWorksheet("Plum")
      newSheet.setTabColor("purple");
    }
'ExcelScript.Worksheet#activate:member(1)':
  - |-
    /**
     * This script switches the active view to a worksheet named "Data", if it exists.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Check if the "Data" worksheet exists.
      let dataWorksheet = workbook.getWorksheet("Data");
      if (dataWorksheet) {
        // Switch to the "Data" worksheet.
        dataWorksheet.activate();
      } else {
        console.log(`No worksheet named "Data" in this workbook.`);
      }
    }
'ExcelScript.Worksheet#addChart:member(1)':
  - |-
    /**
     * This sample creates a column-clustered chart based on the current worksheet's data.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the data range.
      let range = selectedSheet.getUsedRange();

      // Insert a chart using the data on the current worksheet.
      let chart = selectedSheet.addChart(ExcelScript.ChartType.columnClustered, range);

      // Name the chart for easy access in other scripts.
      chart.setName("ColumnChart");
    }
'ExcelScript.Worksheet#addImage:member(1)':
  - |-
    /**
     * This sample copies an image from a URL. This could be used to copy photos that a colleague stored in a shared folder to a related workbook.
     */
    async function main(workbook: ExcelScript.Workbook) {
      // Fetch the image from a URL.
      const link = "https://raw.githubusercontent.com/OfficeDev/office-scripts-docs/master/docs/images/git-octocat.png";
      const response = await fetch(link);

      // Store the response as an ArrayBuffer, since it is a raw image file.
      const data = await response.arrayBuffer();

      // Convert the image data into a base64-encoded string.
      const image = convertToBase64(data);

      // Add the image to the current worksheet.
      workbook.getActiveWorksheet().addImage(image)
    }

    /**
     * Converts an ArrayBuffer containing a .png image into a base64-encoded string.
     */
    function convertToBase64(input: ArrayBuffer) {
      const uInt8Array = new Uint8Array(input);
      const count = uInt8Array.length;

      // Allocate the necessary space up front.
      const charCodeArray = new Array(count) 
      
      // Convert every entry in the array to a character.
      for (let i = count; i >= 0; i--) { 
        charCodeArray[i] = String.fromCharCode(uInt8Array[i]);
      }

      // Convert the characters to base64.
      const base64 = btoa(charCodeArray.join(''));
      return base64;
    }
'ExcelScript.Worksheet#addPivotTable:member(1)':
  - |-
    /**
     * This script creates a PivotTable from an existing table and adds it to a new worksheet.
     * This script assumes there is a table in the current worksheet with columns named "Type" and "Sales".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Create a PivotTable based on a table in the current worksheet.
      let sheet = workbook.getActiveWorksheet();
      let table = sheet.getTables()[0];

      // Add the PivotTable to a new worksheet.
      let newSheet = workbook.addWorksheet("Pivot");
      let pivotTable = newSheet.addPivotTable("My Pivot", table, "A1");

      // Add fields to the PivotTable to show "Sales" per "Type".
      pivotTable.addRowHierarchy(pivotTable.getHierarchy("Type"));
      pivotTable.addDataHierarchy(pivotTable.getHierarchy("Sales"));

      // Switch to the new worksheet.
      newSheet.activate();
    }
'ExcelScript.Worksheet#addTable:member(1)':
  - |-
    /**
     * This sample creates a table from the current worksheet's used range, then sorts it based on the first column.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Create a table with the used cells.
      let usedRange = selectedSheet.getUsedRange();
      let newTable = selectedSheet.addTable(usedRange, true);

      // Sort the table using the first column.
      newTable.getSort().apply([{ key: 0, ascending: true }]);
    }
'ExcelScript.Worksheet#copy:member(1)':
  - |-
    /**
     * This script duplicates a worksheet named "Template". 
     * The new worksheet is added after the template.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the worksheet named "Template".
      let template = workbook.getWorksheet("Template");

      // Copy the worksheet.
      let newSheet = template.copy(
        ExcelScript.WorksheetPositionType.after,
        template
      );

      // Name the worksheet using the current date.
      let date = new Date(Date.now());
      newSheet.setName(`${date.toDateString()}`);
    }
'ExcelScript.Worksheet#delete:member(1)':
  - |-
    /**
     * The following scripts removes the first worksheet in the workbook.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the first worksheet.
      let sheet = workbook.getWorksheets()[0];

      // Remove that worksheet from the workbook.
      sheet.delete();
    }
'ExcelScript.Worksheet#findAll:member(1)':
 - |-
    /**
     * This script searches through a worksheet and finds cells containing "No". 
     * Those cells are filled red.
     * Use Range.find instead of Worksheet.findAll when you want to limit the search to a specific range.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current, active worksheet.
      let worksheet = workbook.getActiveWorksheet();
      let noCells = worksheet.findAll("No", { completeMatch: true });

      // Set the fill color to red.
      noCells.getFormat().getFill().setColor("red");
    }
'ExcelScript.Worksheet#getAutoFilter:member(1)':
 - |-
    /**
     * This script creates an autofilter on the worksheet that filters out rows based on column values. 
     * The autofilter filters to only include rows that have a value in column D in the top 10 percentile 
     * (of column D values).
     */
    function main(workbook: ExcelScript.Workbook) {
      const currentSheet = workbook.getActiveWorksheet();
      const dataRange = currentSheet.getUsedRange();

      // Add a filter that will only show the rows with the top 10% of values in column D
      // (index 3, assuming the used range spans from at least A:D).
      currentSheet.getAutoFilter().apply(dataRange, 3, {
        criterion1: "10",
        filterOn: ExcelScript.FilterOn.topPercent
      });
    }
'ExcelScript.Worksheet#getChart:member(1)':
 - |-
    /**
     * This sample moves an existing chart to a specific place on the worksheet.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();
      
      // Get an existing chart named "ColumnChart".
      let chart = selectedSheet.getChart("ColumnChart");

      // Place the chart over the range "F1:L13".
      chart.setPosition("F1", "L13");
    }
'ExcelScript.Worksheet#getName:member(1)':
  - |-
    /**
     * This sample gets all the worksheet names in the workbook.
     * It then logs those names to the console.
     */
    function main(workbook: ExcelScript.Workbook) {
        // Create an array to hold the worksheet names.
        let worksheetNames = [];

        // Iterate over the worksheet collection in the workbook.
        for (let worksheet of workbook.getWorksheets()) {
            worksheetNames.push(worksheet.getName());
        }

        // Log the array of worksheet names.
        console.log(worksheetNames);
    }
'ExcelScript.Worksheet#getRange:member(1)':
  - |-
    /**
     * This sample reads the value of A1 and prints it to the console.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the current worksheet.
      let selectedSheet = workbook.getActiveWorksheet();

      // Get the value of cell A1.
      let range = selectedSheet.getRange("A1");
      
      // Print the value of A1.
      console.log(range.getValue());
    }
'ExcelScript.Worksheet#setName:member(1)':
  - |-
    /**
     * This sample renames a worksheet from "Sheet1" to "SALES".
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get a worksheet named "Sheet1".
      const sheet = workbook.getWorksheet('Sheet1'); 

      // Set its name to SALES.
      sheet.setName('SALES');
    }
'ExcelScript.Worksheet#setPosition:member(1)':
  - |-
    /**
     * This sample sets the worksheet named "SALES" as the first sheet in the workbook.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get a worksheet named "SALES".
      const sheet = workbook.getWorksheet('SALES'); 
      // Position the worksheet at the beginning of the workbook.
      sheet.setPosition(0);
    }
'ExcelScript.Worksheet#setTabColor:member(1)':
  - |-
    /**
     * This script sets the tab color of every worksheet in the workbook to red.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get all the worksheets in the workbook. 
      let sheets = workbook.getWorksheets();
      
      // Set the tab color of each worksheet to a random color.
      for (let sheet of sheets) {    
        // Set the color of the current worksheet's tab to red.
        sheet.setTabColor("red");
      }
    }
'ExcelScript.WorksheetPositionType:enum':
  - |-
    /**
     * This script duplicates a worksheet named "Template". 
     * The new worksheet is added after the template.
     */
    function main(workbook: ExcelScript.Workbook) {
      // Get the worksheet named "Template".
      let template = workbook.getWorksheet("Template");

      // Copy the worksheet.
      let newSheet = template.copy(
        ExcelScript.WorksheetPositionType.after,
        template
      );

      // Name the worksheet using the current date.
      let date = new Date(Date.now());
      newSheet.setName(`${date.toDateString()}`);
    }